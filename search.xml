<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2025/09/15/linux-100-commands-parameter/"/>
      <url>/2025/09/15/linux-100-commands-parameter/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-常用-100-命令速查表"><a href="#Linux-常用-100-命令速查表" class="headerlink" title="Linux 常用 100 命令速查表"></a>Linux 常用 100 命令速查表</h1><hr><h2 id="一、文件与目录管理"><a href="#一、文件与目录管理" class="headerlink" title="一、文件与目录管理"></a>一、文件与目录管理</h2><ol><li><p><strong>ls</strong> – list<br>显示目录内容  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token parameter variable">-l</span>       <span class="token comment"># 详细列表</span><span class="token function">ls</span> <span class="token parameter variable">-a</span>       <span class="token comment"># 包括隐藏文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>cd</strong> – change directory<br>切换目录  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /etc<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>       <span class="token comment"># 返回上一级</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>pwd</strong> – print working directory<br>显示当前目录  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">pwd</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>mkdir</strong> – make directory<br>创建目录  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token builtin class-name">test</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> a/b/c   <span class="token comment"># 递归创建</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>rmdir</strong> – remove directory<br>删除空目录  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rmdir</span> <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>tree</strong> – (无缩写)<br>以树形结构显示目录  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tree<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>lsblk</strong> – list block devices<br>查看磁盘挂载情况  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lsblk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><hr><h2 id="二、文件操作"><a href="#二、文件操作" class="headerlink" title="二、文件操作"></a>二、文件操作</h2><ol start="8"><li><p><strong>touch</strong> – (无缩写)<br>创建空文件&#x2F;更新时间戳  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> a.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>cp</strong> – copy<br>复制文件  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> a.txt b.txt<span class="token function">cp</span> <span class="token parameter variable">-r</span> dir1 dir2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>mv</strong> – move<br>移动&#x2F;重命名  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> a.txt b.txt<span class="token function">mv</span> old new<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>rm</strong> – remove<br>删除文件&#x2F;目录  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> a.txt<span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token function">dir</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>cat</strong> – concatenate</p><p>&#x2F;kɒnˈkætɪneɪt&#x2F;<br>adj.连锁状的<br>v.使(成串地)连结衔接起来<br>web.连接；串联；多联体</p><p>查看文件内容  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> file.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>more</strong> – (无缩写)<br>分页查看文件  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">more</span> file.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>less</strong> – (无缩写)<br>更强大的分页工具  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">less</span> file.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>head</strong> – (无缩写)<br>查看文件前几行  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">head</span> <span class="token parameter variable">-n</span> <span class="token number">10</span> file.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>tail</strong> – (无缩写)<br>查看文件末尾内容  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tail</span> <span class="token parameter variable">-f</span> log.txt   <span class="token comment"># 实时跟踪</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>wc</strong> – word count<br>统计文件行数、字数、字节数  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wc</span> <span class="token parameter variable">-l</span> file.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>stat</strong> – status<br>查看文件属性  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">stat</span> file.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>file</strong> – (无缩写)<br>查看文件类型  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">file</span> file.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><hr><h2 id="三、搜索与查找"><a href="#三、搜索与查找" class="headerlink" title="三、搜索与查找"></a>三、搜索与查找</h2><ol start="20"><li><p><strong>find</strong> – (无缩写)<br>按条件查找文件  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-name</span> <span class="token string">"*.txt"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>locate</strong> – (无缩写)<br>&#x2F;ˈloʊkeɪt&#x2F;<br>v. 找出…的准确位置；确定…的准确地点；把…安置在（或建造于）<br>web. 定位；位于；使坐落于</p><p>快速查找文件（依赖索引）  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">locate</span> <span class="token function">passwd</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>which</strong> – (无缩写)<br>查找命令路径  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">which</span> <span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>whereis</strong> – (无缩写)<br>查找命令及帮助文档位置  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">whereis</span> <span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>type</strong> – (无缩写)<br>判断命令类型（内建&#x2F;外部）  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">type</span> <span class="token builtin class-name">cd</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>grep</strong> – global regular expression print<br>文本搜索（详见文档末尾）</p></li></ol><hr><h2 id="四、压缩与归档"><a href="#四、压缩与归档" class="headerlink" title="四、压缩与归档"></a>四、压缩与归档</h2><ol start="26"><li><p><strong>tar</strong> – tape archive<br>打包&#x2F;解包  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-cvf</span> a.tar <span class="token function">dir</span><span class="token function">tar</span> <span class="token parameter variable">-xvf</span> a.tar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>gzip</strong> – GNU zip<br>压缩文件  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">gzip</span> file.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>gunzip</strong> – GNU unzip<br>解压文件  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gunzip file.txt.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>zip</strong> – (无缩写)<br>压缩文件  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">zip</span> a.zip file1 file2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>unzip</strong> – (无缩写)<br>解压文件  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> a.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><hr><h2 id="五、用户与权限"><a href="#五、用户与权限" class="headerlink" title="五、用户与权限"></a>五、用户与权限</h2><ol start="31"><li><p><strong>whoami</strong> – (无缩写)<br>显示当前用户  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">whoami</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>id</strong> – (无缩写)<br>显示用户 UID、组信息  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">id</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>who</strong> – (无缩写)<br>显示登录用户  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">who</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>w</strong> – (无缩写)<br>显示当前活动用户及负载  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">w<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>su</strong> – substitute user</p><p>&#x2F;ˈsʌbstɪtuːt&#x2F;<br>v.取代；（以…）代替<br>n.代用品；代替物；代替者<br>web.替身；替换；替代  </p><p>切换用户  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">su</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>sudo</strong> – super user do<br>临时以 root 身份执行  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">ls</span> /root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>passwd</strong> – (无缩写)<br>修改密码  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">passwd</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>chmod</strong> – change mode<br>修改权限  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">755</span> file.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>chown</strong> – change owner<br>修改所有者  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chown</span> user:user file.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>groups</strong> – (无缩写)<br>查看用户所属组  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">groups</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><hr><h2 id="六、进程与系统监控"><a href="#六、进程与系统监控" class="headerlink" title="六、进程与系统监控"></a>六、进程与系统监控</h2><ol start="41"><li><p><strong>ps</strong> – process status<br>查看进程  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> aux<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>top</strong> – (无缩写)<br>动态显示进程  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">top</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>htop</strong> – (无缩写)<br>更友好的进程管理工具  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">htop</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>kill</strong> – (无缩写)<br>结束进程<br>（数字为对应的PID值）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">kill</span> <span class="token number">1234</span><span class="token comment"># 使用信号9进行强制结束进程</span><span class="token function">kill</span> <span class="token parameter variable">-9</span> <span class="token number">1234</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>killall</strong> – (kill all)<br>按服务名结束相关进程  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">killall</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>jobs</strong> – (无缩写)<br>查看后台任务，它会列出所有作业的编号、状态和命令  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">jobs</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>fg</strong> – foreground<br>例子的意思是将后台编号1的任务切换到前台运行任务<br>%1 是作业号（job number）<br>比如执行 %1 任务时，使用 <code>Ctrl+Z</code> 暂停，或者在命令末尾加上 &amp;，任务会被暂停<br>此时终端可以用来做别的事，当别的事情完成后，就可以用 <code>fg %1</code> 将暂停的作业重新开始</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">fg</span> %1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>bg</strong> – background<br>将后台暂停的作业 %N 变为后台运行<br>接上例，如果 %1 被 Ctrl+Z 暂停了，可以用 bg %1 让它在后台继续运行，而不是回到前台    </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">bg</span> %1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>uptime</strong> – (无缩写)<br>查看系统运行时间和负载  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">uptime</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>dmesg</strong> – diagnostic message<br>&#x2F;ˌdaɪ.əɡˈnɑː.stɪk&#x2F;<br>adj.诊断的;用于诊断的(对于疾病)<br>判断的；用于判断的(对于问题)<br>查看内核日志  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">dmesg</span> <span class="token operator">|</span> <span class="token function">tail</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><hr><h2 id="七、磁盘与文件系统"><a href="#七、磁盘与文件系统" class="headerlink" title="七、磁盘与文件系统"></a>七、磁盘与文件系统</h2><ol start="51"><li><p><strong>df</strong> – disk free<br>查看磁盘空间  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">df</span> <span class="token parameter variable">-h</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>du</strong> – disk usage<br>查看目录大小  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">du</span> <span class="token parameter variable">-sh</span> *<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>mount</strong> – (无缩写)<br>挂载文件系统  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mount</span> /dev/sdb1 /mnt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>umount</strong> – (无缩写)<br>卸载文件系统  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">umount</span> /mnt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>lsblk</strong> – list block devices<br>查看磁盘分区  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lsblk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>blkid</strong> – block id<br>查看磁盘 UUID  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">blkid<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>fsck</strong> – file system check<br>检查文件系统错误  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">fsck</span> /dev/sdb1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>mkfs</strong> – make filesystem<br>格式化磁盘  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mkfs.ext4 /dev/sdb1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><hr><h2 id="八、网络管理"><a href="#八、网络管理" class="headerlink" title="八、网络管理"></a>八、网络管理</h2><ol start="59"><li><p><strong>ping</strong> – (无缩写)<br>测试网络连通  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ping</span> google.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>curl</strong> – (无缩写)<br>网络请求工具  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> http://example.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>wget</strong> – (无缩写)<br>下载文件  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://example.com/file.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>ifconfig</strong> – interface config<br>显示或配置网卡（旧命令）  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ifconfig</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>ip</strong> – (无缩写)<br>新的网络配置命令  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ip</span> addr show<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>netstat</strong> – network statistics<br>网络连接情况（旧）  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> <span class="token parameter variable">-tulnp</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>ss</strong> – socket statistics<br>查看网络连接（推荐）  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ss <span class="token parameter variable">-tulnp</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>traceroute</strong> – (无缩写)<br>路由跟踪  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">traceroute</span> google.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>dig</strong> – domain information groper<br>DNS 查询  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">dig</span> google.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>nslookup</strong> – (无缩写)<br>另一种 DNS 查询  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nslookup</span> google.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>scp</strong> – secure copy<br>远程文件拷贝  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> file.txt user@host:/tmp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>rsync</strong> – remote sync<br>高效同步文件  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rsync</span> <span class="token parameter variable">-avz</span> src/ user@host:/dst<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>ssh</strong> – secure shell<br>远程登录  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> user@host<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><hr><h2 id="九、软件包管理（以-Debian-Ubuntu-为例）"><a href="#九、软件包管理（以-Debian-Ubuntu-为例）" class="headerlink" title="九、软件包管理（以 Debian&#x2F;Ubuntu 为例）"></a>九、软件包管理（以 Debian&#x2F;Ubuntu 为例）</h2><ol start="72"><li><p><strong>apt-get</strong> – advanced package tool<br>安装&#x2F;卸载软件  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>apt</strong> – (简化版)  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token function">sudo</span> <span class="token function">apt</span> upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>dpkg</strong> – Debian package<br>管理 <code>.deb</code> 包  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dpkg <span class="token parameter variable">-i</span> pkg.deb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>snap</strong> – (无缩写)<br>新的软件包格式  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">snap <span class="token function">install</span> code             <span class="token comment"># - 安装 vscode</span>snap remove                   <span class="token comment"># - 移除 snap 包</span>snap refresh                  <span class="token comment"># - 更新 snap 包</span>snap list                     <span class="token comment"># - 列出已安装的 snap 包</span>snap <span class="token function">find</span>                     <span class="token comment"># - 搜索可用的 snap 包</span>snap info                     <span class="token comment"># - 显示 snap 包信息</span>snap revert                   <span class="token comment"># - 回滚到之前版本</span>snap disable/enable           <span class="token comment"># - 禁用/启用 snap 包</span>snap services                 <span class="token comment"># - 管理 snap 服务    </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><h2 id="十、系统信息"><a href="#十、系统信息" class="headerlink" title="十、系统信息"></a>十、系统信息</h2><ol start="76"><li><p><strong>uname</strong> – unix name<br>查看系统信息  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">uname</span> <span class="token parameter variable">-a</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>hostname</strong> – (无缩写)<br>查看主机名  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">hostname</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>date</strong> – (无缩写)<br>显示&#x2F;设置日期  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">date</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>cal</strong> – calendar<br>显示日历  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cal</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>uptime</strong> – (无缩写)<br>系统运行时长  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">uptime</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>free</strong> – (无缩写)<br>显示内存  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">free</span> <span class="token parameter variable">-h</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>vmstat</strong> – virtual memory statistics<br>内存&#x2F;CPU统计  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vmstat</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>iostat</strong> – I&#x2F;O statistics<br>磁盘 I&#x2F;O 监控  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">iostat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>lscpu</strong> – list CPU<br>CPU 信息  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lscpu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>lsusb</strong> – list USB<br>USB 设备信息  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lsusb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>lspci</strong> – list PCI<br>PCI 设备信息  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lspci<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><hr><h2 id="十一、Shell-常用"><a href="#十一、Shell-常用" class="headerlink" title="十一、Shell 常用"></a>十一、Shell 常用</h2><ol start="87"><li><p><strong>echo</strong> – (无缩写)<br>输出字符串  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> hello<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>history</strong> – (无缩写)<br>查看历史命令  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">history</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">ssh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>alias</strong> – (无缩写)<br>设置命令别名  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">alias</span> <span class="token assign-left variable">ll</span><span class="token operator">=</span><span class="token string">'ls -alF'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>unalias</strong> – (无缩写)<br>删除别名  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">unalias</span> ll<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>clear</strong> – (无缩写)<br>清屏  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">clear</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>exit</strong> – (无缩写)<br>退出 shell  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>logout</strong> – (无缩写)<br>注销会话  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">logout</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>env</strong> – environment<br>查看环境变量  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">env</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>export</strong> – (无缩写)<br>设置环境变量  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/opt/bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>printenv</strong> – (无缩写)<br>打印环境变量  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">printenv</span> <span class="token environment constant">PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>set</strong> – (无缩写)<br>显示所有变量  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">set</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>unset</strong> – (无缩写)<br>删除变量  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">unset</span> VAR<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>source</strong> – (无缩写)<br>执行脚本  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>man</strong> – manual<br>查看帮助文档  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">man</span> <span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><hr><h1 id="🔎-附录：grep-速查表"><a href="#🔎-附录：grep-速查表" class="headerlink" title="🔎 附录：grep 速查表"></a>🔎 附录：grep 速查表</h1><h3 id="grep-语法"><a href="#grep-语法" class="headerlink" title="grep 语法"></a>grep 语法</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span> pattern <span class="token punctuation">[</span>files<span class="token punctuation">]</span>或<span class="token function">grep</span> <span class="token punctuation">[</span>-abcEFGhHilLnqrsvVwxy<span class="token punctuation">]</span><span class="token punctuation">[</span>-A<span class="token operator">&lt;</span>显示行数<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">[</span>-B<span class="token operator">&lt;</span>显示列数<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">[</span>-C<span class="token operator">&lt;</span>显示列数<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">[</span>-d<span class="token operator">&lt;</span>进行动作<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">[</span>-e<span class="token operator">&lt;</span>范本样式<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">[</span>-f<span class="token operator">&lt;</span>范本文件<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">[</span>--help<span class="token punctuation">]</span><span class="token punctuation">[</span>范本样式<span class="token punctuation">]</span><span class="token punctuation">[</span>文件或目录<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>pattern - 表示要查找的字符串或正则表达式。</li><li>files - 表示要查找的文件名，可以同时查找多个文件，如果省略 files 参数，则默认从标准输入中读取数据。</li></ul><p><strong>常用参数：</strong>：</p><ul><li><code>-i</code>：忽略大小写进行匹配。</li><li><code>-v</code>：反向查找，只打印不匹配的行。</li><li><code>-n</code>：显示匹配行的行号。</li><li><code>-r</code>：递归查找子目录中的文件。</li><li><code>-l</code>：只打印匹配的文件名。</li><li><code>-c</code>：只打印匹配的行数。</li></ul><p><strong>更多参数说明</strong>：</p><ul><li><strong>-a 或 –text</strong> : 不要忽略二进制的数据。</li><li><strong>-A&lt;显示行数&gt; 或 –after-context&#x3D;&lt;显示行数&gt;</strong> : 除了显示符合范本样式的那一列之外，并显示该行之后的内容。</li><li><strong>-b 或 –byte-offset</strong> : 在显示符合样式的那一行之前，标示出该行第一个字符的编号。</li><li><strong>-B&lt;显示行数&gt; 或 –before-context&#x3D;&lt;显示行数&gt;</strong> : 除了显示符合样式的那一行之外，并显示该行之前的内容。</li><li><strong>-c 或 –count</strong> : 计算符合样式的列数。</li><li><strong>-C&lt;显示行数&gt; 或 –context&#x3D;&lt;显示行数&gt;或-&lt;显示行数&gt;</strong> : 除了显示符合样式的那一行之外，并显示该行之前后的内容。</li><li><strong>-d &lt;动作&gt; 或 –directories&#x3D;&lt;动作&gt;</strong> : 当指定要查找的是目录而非文件时，必须使用这项参数，否则grep指令将回报信息并停止动作。</li><li><strong>-e&lt;范本样式&gt; 或 –regexp&#x3D;&lt;范本样式&gt;</strong> : 指定字符串做为查找文件内容的样式。</li><li><strong>-E 或 –extended-regexp</strong> : 将样式为延伸的正则表达式来使用。</li><li><strong>-f&lt;规则文件&gt; 或 –file&#x3D;&lt;规则文件&gt;</strong> : 指定规则文件，其内容含有一个或多个规则样式，让grep查找符合规则条件的文件内容，格式为每行一个规则样式。</li><li><strong>-F 或 –fixed-regexp</strong> : 将样式视为固定字符串的列表。</li><li><strong>-G 或 –basic-regexp</strong> : 将样式视为普通的表示法来使用。</li><li><strong>-h 或 –no-filename</strong> : 在显示符合样式的那一行之前，不标示该行所属的文件名称。</li><li><strong>-H 或 –with-filename</strong> : 在显示符合样式的那一行之前，表示该行所属的文件名称。</li><li><strong>-i 或 –ignore-case</strong> : 忽略字符大小写的差别。</li><li><strong>-l 或 –file-with-matches</strong> : 列出文件内容符合指定的样式的文件名称。</li><li><strong>-L 或 –files-without-match</strong> : 列出文件内容不符合指定的样式的文件名称。</li><li><strong>-n 或 –line-number</strong> : 在显示符合样式的那一行之前，标示出该行的列数编号。</li><li><strong>-o 或 –only-matching</strong> : 只显示匹配PATTERN 部分。</li><li><strong>-q 或 –quiet或–silent</strong> : 不显示任何信息。</li><li><strong>-r 或 –recursive</strong> : 此参数的效果和指定”-d recurse”参数相同。</li><li><strong>-s 或 –no-messages</strong> : 不显示错误信息。</li><li><strong>-v 或 –invert-match</strong> : 显示不包含匹配文本的所有行。</li><li><strong>-V 或 –version</strong> : 显示版本信息。</li><li><strong>-w 或 –word-regexp</strong> : 只显示全字符合的列。</li><li><strong>-x –line-regexp</strong> : 只显示全列符合的列。</li><li>**-y **: 此参数的效果和指定”-i”参数相同。</li></ul><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> <span class="token string">'root'</span> /etc/passwd     <span class="token comment"># 搜索包含 root 的行</span><span class="token function">grep</span> <span class="token parameter variable">-i</span> <span class="token string">'error'</span> log.txt     <span class="token comment"># 忽略大小写</span><span class="token function">grep</span> <span class="token parameter variable">-n</span> <span class="token string">'main'</span> file.c       <span class="token comment"># 显示行号</span><span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token string">'test'</span> file.txt     <span class="token comment"># 反向匹配</span><span class="token function">grep</span> <span class="token parameter variable">-r</span> <span class="token string">'TODO'</span> ./src        <span class="token comment"># 递归搜索目录</span><span class="token function">grep</span> <span class="token parameter variable">--color</span><span class="token operator">=</span>auto root /etc/passwd   <span class="token comment"># 高亮</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用正则"><a href="#常用正则" class="headerlink" title="常用正则"></a>常用正则</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> <span class="token string">'^root'</span> /etc/passwd    <span class="token comment"># 以 root 开头</span><span class="token function">grep</span> <span class="token string">'bash$'</span> /etc/passwd    <span class="token comment"># 以 bash 结尾</span><span class="token function">grep</span> <span class="token string">'r..t'</span> file.txt        <span class="token comment"># r+任意两字符+t</span><span class="token function">grep</span> <span class="token string">'lo*ng'</span> file.txt       <span class="token comment"># lng, long, loong</span><span class="token function">grep</span> <span class="token string">'[ch]at'</span> file.txt      <span class="token comment"># cat 或 hat</span><span class="token function">grep</span> <span class="token string">'[^0-9]'</span> file.txt      <span class="token comment"># 含非数字</span><span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">'(foo|bar)'</span> file.txt <span class="token comment"># foo 或 bar</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="组合用法"><a href="#组合用法" class="headerlink" title="组合用法"></a>组合用法</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> nginx         <span class="token comment"># 查找进程</span><span class="token function">dmesg</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-i</span> usb         <span class="token comment"># 内核日志里找 USB</span><span class="token function">history</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">ssh</span>          <span class="token comment"># 历史命令中找 ssh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Linux-常用命令参数速查表（A-Z）"><a href="#Linux-常用命令参数速查表（A-Z）" class="headerlink" title="Linux 常用命令参数速查表（A-Z）"></a>Linux 常用命令参数速查表（A-Z）</h2><hr><h2 id="🅰-A"><a href="#🅰-A" class="headerlink" title="🅰  A"></a>🅰  A</h2><ul><li><p><strong><code>-a</code> → all</strong><br>显示所有内容（包括隐藏文件）。<br>示例：<code>ls -a</code> 显示所有文件。</p></li><li><p><strong><code>-A</code> → almost all</strong><br>类似 <code>-a</code>，但不显示 <code>.</code> 和 <code>..</code>。<br>示例：<code>ls -A</code>。</p></li></ul><hr><h2 id="🅱-B"><a href="#🅱-B" class="headerlink" title="🅱 B"></a>🅱 B</h2><ul><li><strong>（常见命令里较少单独使用 <code>-b</code>）</strong><br>示例：<code>ls -b</code> 以转义方式显示不可打印字符。</li></ul><hr><h2 id="🅲-C"><a href="#🅲-C" class="headerlink" title="🅲 C"></a>🅲 C</h2><ul><li><strong><code>-c</code> → count &#x2F; change time</strong><br>统计、显示更改时间。<br>示例：<code>grep -c pattern file</code> 统计匹配行数。</li></ul><hr><h2 id="🅳-D"><a href="#🅳-D" class="headerlink" title="🅳 D"></a>🅳 D</h2><ul><li><strong><code>-d</code> → directory</strong><br>针对目录本身，而不是目录里的内容。<br>示例：<code>ls -d */</code> 只显示目录。</li></ul><hr><h2 id="🅴-E"><a href="#🅴-E" class="headerlink" title="🅴 E"></a>🅴 E</h2><ul><li><strong><code>-e</code> → expression</strong><br>指定表达式&#x2F;模式。<br>示例：<code>grep -e pattern1 -e pattern2 file</code>。</li></ul><hr><h2 id="🅵-F"><a href="#🅵-F" class="headerlink" title="🅵 F"></a>🅵 F</h2><ul><li><strong><code>-f</code> → force &#x2F; file</strong><br>强制执行或指定文件。<br>示例：<code>rm -f file.txt</code> 强制删除。</li></ul><hr><h2 id="🅶-G"><a href="#🅶-G" class="headerlink" title="🅶 G"></a>🅶 G</h2><ul><li><strong>（常用场景较少单独出现）</strong><br>示例：<code>ls -g</code> 类似 <code>-l</code> 但不显示所有者。</li></ul><hr><h2 id="🅷-H"><a href="#🅷-H" class="headerlink" title="🅷 H"></a>🅷 H</h2><ul><li><strong><code>-h</code> → human readable &#x2F; help</strong><br>人类可读输出；或帮助。<br>示例：<code>ls -lh</code> 显示 KB&#x2F;MB 单位文件大小。<br>示例：<code>command -h</code> 查看帮助。</li></ul><hr><h2 id="🅸-I"><a href="#🅸-I" class="headerlink" title="🅸 I"></a>🅸 I</h2><ul><li><p><strong><code>-i</code> → interactive &#x2F; ignore case &#x2F; inode</strong><br>示例：</p><ul><li><code>rm -i file.txt</code> 删除前确认。</li><li><code>grep -i pattern file</code> 忽略大小写。</li><li><code>ls -i</code> 显示 inode 号。</li></ul></li></ul><hr><h2 id="🅹-J"><a href="#🅹-J" class="headerlink" title="🅹 J"></a>🅹 J</h2><ul><li><strong>（很少用到）</strong></li></ul><hr><h2 id="🅺-K"><a href="#🅺-K" class="headerlink" title="🅺 K"></a>🅺 K</h2><ul><li><strong>（无通用缩写）</strong></li></ul><hr><h2 id="🅻-L"><a href="#🅻-L" class="headerlink" title="🅻 L"></a>🅻 L</h2><ul><li><strong><code>-l</code> → long</strong><br>长列表格式。<br>示例：<code>ls -l</code> 显示详细信息。</li></ul><hr><h2 id="🅼-M"><a href="#🅼-M" class="headerlink" title="🅼 M"></a>🅼 M</h2><ul><li><strong><code>-m</code> → multiple &#x2F; merge</strong><br>示例：<code>ls -m</code> 用逗号分隔文件名。</li></ul><hr><h2 id="🅽-N"><a href="#🅽-N" class="headerlink" title="🅽 N"></a>🅽 N</h2><ul><li><strong><code>-n</code> → number</strong><br>显示行号或数字形式。<br>示例：<code>grep -n pattern file</code> 显示行号。</li></ul><hr><h2 id="🅾-O"><a href="#🅾-O" class="headerlink" title="🅾 O"></a>🅾 O</h2><ul><li><p><strong><code>-o</code> → only &#x2F; owner</strong><br>示例：</p><ul><li><code>grep -o pattern file</code> 只输出匹配部分。</li><li><code>ls -o</code> 类似 <code>-l</code> 但不显示组。</li></ul></li></ul><hr><h2 id="🅿-P"><a href="#🅿-P" class="headerlink" title="🅿 P"></a>🅿 P</h2><ul><li><p><strong><code>-p</code> → preserve &#x2F; parents</strong><br>示例：</p><ul><li><code>mkdir -p a/b/c</code> 自动创建父目录。</li><li><code>cp -p</code> 保留时间戳。</li></ul></li></ul><hr><h2 id="🆀-Q"><a href="#🆀-Q" class="headerlink" title="🆀 Q"></a>🆀 Q</h2><ul><li><strong><code>-q</code> → quiet</strong><br>静默模式，不输出内容。<br>示例：<code>grep -q pattern file &amp;&amp; echo &quot;found&quot;</code>。</li></ul><hr><h2 id="🆁-R"><a href="#🆁-R" class="headerlink" title="🆁 R"></a>🆁 R</h2><ul><li><p><strong><code>-r</code> → recursive &#x2F; reverse</strong><br>示例：</p><ul><li><code>grep -r pattern ./</code> 递归搜索。</li><li><code>ls -r</code> 倒序输出。</li></ul></li></ul><hr><h2 id="🆂-S"><a href="#🆂-S" class="headerlink" title="🆂 S"></a>🆂 S</h2><ul><li><p><strong><code>-s</code> → silent &#x2F; size &#x2F; sort</strong><br>示例：</p><ul><li><code>rm -s</code> 静默模式。</li><li><code>du -s</code> 仅显示总大小。</li></ul></li></ul><hr><h2 id="🆃-T"><a href="#🆃-T" class="headerlink" title="🆃 T"></a>🆃 T</h2><ul><li><strong><code>-t</code> → time</strong><br>按时间排序。<br>示例：<code>ls -lt</code> 按修改时间排序。</li></ul><hr><h2 id="🆄-U"><a href="#🆄-U" class="headerlink" title="🆄 U"></a>🆄 U</h2><ul><li><p><strong><code>-u</code> → user &#x2F; access time</strong><br>示例：</p><ul><li><code>ls -lu</code> 按访问时间显示。</li><li><code>chown -u user file</code> 指定用户。</li></ul></li></ul><hr><h2 id="🆅-V"><a href="#🆅-V" class="headerlink" title="🆅 V"></a>🆅 V</h2><ul><li><p><strong><code>-v</code> → invert match &#x2F; verbose</strong><br>示例：</p><ul><li><code>grep -v pattern file</code> 显示不匹配的行。</li><li><code>cp -v</code> 显示详细过程。</li></ul></li></ul><hr><h2 id="🆆-W"><a href="#🆆-W" class="headerlink" title="🆆 W"></a>🆆 W</h2><ul><li><strong><code>-w</code> → word</strong><br>精确匹配整个单词。<br>示例：<code>grep -w root /etc/passwd</code>。</li></ul><hr><h2 id="🆇-X"><a href="#🆇-X" class="headerlink" title="🆇 X"></a>🆇 X</h2><ul><li><strong><code>-x</code> → exact match &#x2F; extract</strong><br>示例：<code>grep -x &#39;pattern&#39; file</code> 匹配整行。</li></ul><hr><h2 id="🆈-Y"><a href="#🆈-Y" class="headerlink" title="🆈 Y"></a>🆈 Y</h2><ul><li><strong>（较少见）</strong></li></ul><hr><h2 id="🆉-Z"><a href="#🆉-Z" class="headerlink" title="🆉 Z"></a>🆉 Z</h2><ul><li><strong><code>-z</code> → zero terminated &#x2F; compress</strong><br>示例：<code>grep -z</code> 用 NULL 分隔输入。<br>示例：<code>gzip -z</code> 压缩。</li></ul><hr><h1 id="常见大小写参数对照表"><a href="#常见大小写参数对照表" class="headerlink" title="常见大小写参数对照表"></a>常见大小写参数对照表</h1><table><thead><tr><th>小写参数</th><th>大写参数</th><th>关系</th></tr></thead><tbody><tr><td><code>-a</code> (所有文件)</td><td><code>-A</code> (几乎所有，排除<code>.</code>和<code>..</code>)</td><td>功能细分</td></tr><tr><td><code>-f</code> (强制&#x2F;文件)</td><td><code>-F</code> (固定字符串&#x2F;完整格式)</td><td>功能不同</td></tr><tr><td><code>-l</code> (长格式&#x2F;列出匹配文件)</td><td><code>-L</code> (跟随符号链接)</td><td>功能不同</td></tr><tr><td><code>-n</code> (行号)</td><td><code>-N</code> (禁止转义&#x2F;字面值)</td><td>功能不同</td></tr><tr><td><code>-r</code> (递归&#x2F;反序)</td><td><code>-R</code> (递归并跟随符号链接)</td><td>扩展功能</td></tr><tr><td><code>-v</code> (反选&#x2F;详细)</td><td><code>-V</code> (版本信息)</td><td>功能不同</td></tr><tr><td><code>-x</code> (精确匹配整行)</td><td><code>-X</code> (排除文件&#x2F;扩展功能)</td><td>功能不同</td></tr></tbody></table><h1 id="常见元字符表-Linux-Metacharacter"><a href="#常见元字符表-Linux-Metacharacter" class="headerlink" title="常见元字符表(Linux Metacharacter)"></a>常见元字符表(Linux Metacharacter)</h1><table><thead><tr><th>元字符（Metacharacter）</th><th>名称</th><th>介绍</th><th>示例</th></tr></thead><tbody><tr><td><em>(空格)</em></td><td>空格</td><td>分隔命令、参数和选项。</td><td><code>ls -l</code></td></tr><tr><td><code>|</code></td><td>管道符</td><td>将前一个命令的标准输出作为后一个命令的标准输入。</td><td><code>ls -l | grep &quot;.txt&quot;</code></td></tr><tr><td><code>&gt;</code></td><td>重定向输出（覆盖）</td><td>将命令的标准输出重定向到文件，会覆盖文件原有内容。</td><td><code>echo &quot;Hello&quot; &gt; file.txt</code></td></tr><tr><td><code>&gt;&gt;</code></td><td>重定向输出（追加）</td><td>将命令的标准输出追加到文件末尾。</td><td><code>echo &quot;World&quot; &gt;&gt; file.txt</code></td></tr><tr><td><code>&lt;</code></td><td>重定向输入</td><td>将文件内容作为命令的标准输入。</td><td><code>wc &lt; file.txt</code></td></tr><tr><td><code>$</code></td><td>变量引用</td><td>引用变量的值。</td><td><code>echo $HOME</code></td></tr><tr><td><code>#</code></td><td>注释</td><td>在脚本或命令中用于添加注释，该行 # 之后的内容会被忽略。</td><td><code># This is a comment</code></td></tr><tr><td><code>*</code></td><td>通配符（Wildcard）</td><td>匹配任何零个或多个字符。</td><td><code>ls *.txt</code></td></tr><tr><td><code>?</code></td><td>通配符（Wildcard）</td><td>匹配任何单个字符。</td><td><code>ls file?.txt</code></td></tr><tr><td><code>[]</code></td><td>通配符（Wildcard）</td><td>匹配括号内列出的任何单个字符。</td><td><code>ls [abc].txt</code></td></tr><tr><td><code>&amp;</code></td><td>后台执行</td><td>在后台运行命令，使终端立即返回。</td><td><code>sleep 60 &amp;</code></td></tr><tr><td><code>()</code></td><td>子 Shell</td><td>在一个子 Shell 中执行命令列表。</td><td><code>(cd /tmp &amp;&amp; ls)</code></td></tr><tr><td><code>;</code></td><td>顺序执行</td><td>按顺序执行多个命令，不关心前一个命令的成功与否。</td><td><code>cmd1 ; cmd2</code></td></tr><tr><td><code>&amp;&amp;</code></td><td>逻辑 AND</td><td>只有前一个命令成功（返回 0）时，才执行下一个命令。</td><td><code>cmd1 &amp;&amp; cmd2</code></td></tr><tr><td><code>||</code></td><td>逻辑 OR</td><td>只有前一个命令失败（返回非 0）时，才执行下一个命令</td><td>&#96;command1</td></tr><tr><td><code>&#39;</code></td><td>单引号（Single Quotes）</td><td>强引用，引号内的所有字符都按字面值处理，不进行任何转义或变量替换。</td><td><code>echo &#39;$HOME&#39;</code></td></tr><tr><td><code>&quot;</code></td><td>双引号（Double Quotes）</td><td>弱引用，引号内的字符按字面值处理，但会进行变量替换和命令替换。</td><td><code>echo &quot;$HOME&quot;</code></td></tr><tr><td><code>`</code></td><td>反引号（Backticks）</td><td>执行命令，并将其标准输出作为另一个命令的参数。</td><td><code>echo &quot;The current date is `date`&quot;</code></td></tr><tr><td><code>\</code></td><td>转义符（Escape）</td><td>用于取消元字符的特殊含义，使其按字面值处理。</td><td><code>echo &quot;The path is C:\\Users&quot;</code></td></tr></tbody></table><p>更多信息：<br><a href="https://www.runoob.com/w3cnote/linux-common-command.html">菜鸟教程</a><br><a href="https://www.linuxcool.com/">linuxcool</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs拆分PDF为多个文件,然后合并文件</title>
      <link href="/2025/09/15/nodejs-chai-fen-pdf-wei-duo-ge-wen-jian-ran-hou-he-bing-wen-jian/"/>
      <url>/2025/09/15/nodejs-chai-fen-pdf-wei-duo-ge-wen-jian-ran-hou-he-bing-wen-jian/</url>
      
        <content type="html"><![CDATA[<h4 id="拆分（切割）pdf文件为多个pdf文件"><a href="#拆分（切割）pdf文件为多个pdf文件" class="headerlink" title="拆分（切割）pdf文件为多个pdf文件"></a>拆分（切割）pdf文件为多个pdf文件</h4><p>用法: <code>node split.js &lt;pdf文件路径&gt; &lt;拆分份数&gt;</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> PDFDocument <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"pdf-lib"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 将 PDF 拆分成指定份数 * @param &#123;string&#125; inputFile 输入的 PDF 文件路径 * @param &#123;number&#125; parts 要拆分的份数 */</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">splitPdf</span><span class="token punctuation">(</span><span class="token parameter">inputFile<span class="token punctuation">,</span> parts</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 读取原始 PDF</span>  <span class="token keyword">const</span> existingPdfBytes <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>inputFile<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> pdfDoc <span class="token operator">=</span> <span class="token keyword">await</span> PDFDocument<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>existingPdfBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> totalPages <span class="token operator">=</span> pdfDoc<span class="token punctuation">.</span><span class="token function">getPageCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> step <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>totalPages <span class="token operator">/</span> parts<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> remainder <span class="token operator">=</span> totalPages <span class="token operator">%</span> parts<span class="token punctuation">;</span>  <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> parts<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> end <span class="token operator">=</span> start <span class="token operator">+</span> step <span class="token operator">+</span> <span class="token punctuation">(</span>remainder <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    remainder<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token comment">// 创建一个新的 PDF</span>    <span class="token keyword">const</span> newPdf <span class="token operator">=</span> <span class="token keyword">await</span> PDFDocument<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> copiedPages <span class="token operator">=</span> <span class="token keyword">await</span> newPdf<span class="token punctuation">.</span><span class="token function">copyPages</span><span class="token punctuation">(</span>pdfDoc<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token function">Array</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x <span class="token operator">+</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    copiedPages<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">page</span><span class="token punctuation">)</span> <span class="token operator">=></span> newPdf<span class="token punctuation">.</span><span class="token function">addPage</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 保存拆分后的 PDF</span>    <span class="token keyword">const</span> pdfBytes <span class="token operator">=</span> <span class="token keyword">await</span> newPdf<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> outName <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">part_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.pdf</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>outName<span class="token punctuation">,</span> pdfBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">已生成: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>outName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> (第 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>start <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> 页 到 第 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>end<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> 页)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    start <span class="token operator">=</span> end<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 使用示例：node split.js input.pdf 5</span><span class="token keyword">const</span> inputFile <span class="token operator">=</span> process<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> parts <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inputFile <span class="token operator">||</span> <span class="token operator">!</span>parts<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"用法: node split.js &lt;pdf文件路径> &lt;拆分份数>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">splitPdf</span><span class="token punctuation">(</span>inputFile<span class="token punctuation">,</span> parts<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="按顺序合并拆分的pdf文件为1个pdf文件"><a href="#按顺序合并拆分的pdf文件为1个pdf文件" class="headerlink" title="按顺序合并拆分的pdf文件为1个pdf文件"></a>按顺序合并拆分的pdf文件为1个pdf文件</h4><p>用法: <code>用法: node merge.js &lt;输出文件名&gt; &lt;输入文件1&gt; &lt;输入文件2&gt; &lt;输入文件3&gt; ...</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> PDFDocument <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"pdf-lib"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 合并多个 PDF 文件 * @param &#123;string[]&#125; inputFiles 要合并的 PDF 文件路径数组 * @param &#123;string&#125; outputFile 输出的 PDF 文件名 */</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">mergePdf</span><span class="token punctuation">(</span><span class="token parameter">inputFiles<span class="token punctuation">,</span> outputFile</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> mergedPdf <span class="token operator">=</span> <span class="token keyword">await</span> PDFDocument<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> file <span class="token keyword">of</span> inputFiles<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> pdfBytes <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> pdf <span class="token operator">=</span> <span class="token keyword">await</span> PDFDocument<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>pdfBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> copiedPages <span class="token operator">=</span> <span class="token keyword">await</span> mergedPdf<span class="token punctuation">.</span><span class="token function">copyPages</span><span class="token punctuation">(</span>pdf<span class="token punctuation">,</span> pdf<span class="token punctuation">.</span><span class="token function">getPageIndices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    copiedPages<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">page</span><span class="token punctuation">)</span> <span class="token operator">=></span> mergedPdf<span class="token punctuation">.</span><span class="token function">addPage</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">已添加: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>file<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> mergedBytes <span class="token operator">=</span> <span class="token keyword">await</span> mergedPdf<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>outputFile<span class="token punctuation">,</span> mergedBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">✅ 合并完成: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>outputFile<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 用法: node merge.js output.pdf part_1.pdf part_2.pdf ...</span><span class="token keyword">const</span> args <span class="token operator">=</span> process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"用法: node merge.js &lt;输出文件名> &lt;输入文件1> &lt;输入文件2> ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> outputFile <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> inputFiles <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mergePdf</span><span class="token punctuation">(</span>inputFiles<span class="token punctuation">,</span> outputFile<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> NODEJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用JS对页面中的图片和JS文件实时更新</title>
      <link href="/2025/09/09/yong-js-dui-ye-mian-zhong-de-tu-pian-he-js-wen-jian-shi-shi-geng-xin/"/>
      <url>/2025/09/09/yong-js-dui-ye-mian-zhong-de-tu-pian-he-js-wen-jian-shi-shi-geng-xin/</url>
      
        <content type="html"><![CDATA[<h3 id="码海无涯系列，写给自己的注释"><a href="#码海无涯系列，写给自己的注释" class="headerlink" title="码海无涯系列，写给自己的注释"></a>码海无涯系列，写给自己的注释</h3><p>如何不大改html页面的代码，而令用户及时获得最新的图片和JS文件呢？<br>可以用JS给这些文件的后缀加上时间戳<br>以下是代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"DOMContentLoaded"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> timestamp <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 取时间戳</span>    <span class="token keyword">const</span> baseURL <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>origin<span class="token punctuation">;</span>     <span class="token comment">// 取地址，location.origin输出为“协议+域名”，一个字符串</span>    document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'script[src]:not([src*="?v="])'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">oldScript</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 遍历所有的script的非带时间戳的地址</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> scriptUrl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>oldScript<span class="token punctuation">.</span>src<span class="token punctuation">,</span> baseURL<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 将所有（相对的）JS库地址，和窗口的绝对地址拼接为新地址</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>scriptUrl<span class="token punctuation">.</span>pathname<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"no.js"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token comment">// 过滤掉不是no.js的地址（因为其他库不需要经常更新，只有no.js需要更新）</span>            <span class="token keyword">const</span> newScript <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>                name<span class="token punctuation">,</span>                value            <span class="token punctuation">&#125;</span>                <span class="token keyword">of</span> oldScript<span class="token punctuation">.</span>attributes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                newScript<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// for..of循环遍历旧的script属性和值，并将其赋值给newScript</span>            scriptUrl<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"v"</span><span class="token punctuation">,</span> timestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 设置scriptUrl的v查询参数的新值为timestamp</span>            newScript<span class="token punctuation">.</span>src <span class="token operator">=</span> scriptUrl<span class="token punctuation">.</span>href<span class="token punctuation">;</span>            <span class="token comment">// 把scriptUrl的链接值赋值给newScript</span>            newScript<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"脚本加载失败:"</span><span class="token punctuation">,</span> scriptUrl<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span>                document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>oldScript<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">// 出错时的处理：将 oldScript 深复制一遍到DOM树上（即回退）</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            oldScript<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>newScript<span class="token punctuation">,</span> oldScript<span class="token punctuation">)</span>            <span class="token comment">// 使用replaceChild替换oldScript（注意：replaceChild </span>            <span class="token comment">// 是要在被替换的元素的父节点使用的，所以用</span>            <span class="token comment">// oldScript.parentNode找到oldScript的父节点）</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"脚本替换失败:"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 下面给Img元素加时间戳</span>    <span class="token keyword">const</span> <span class="token function-variable function">processElements</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">elements<span class="token punctuation">,</span> baseURL</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        elements<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">el</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>tagName<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'img'</span> <span class="token operator">&amp;&amp;</span> el<span class="token punctuation">.</span>src<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">const</span> urlObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>src<span class="token punctuation">,</span> baseURL<span class="token punctuation">)</span><span class="token punctuation">;</span>                    urlObj<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"v"</span><span class="token punctuation">,</span> timestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>                    el<span class="token punctuation">.</span>src <span class="token operator">=</span> urlObj<span class="token punctuation">.</span>href                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"URL 解析失败:"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 调用processElements函数，并过滤data:image/开头的base64编码的图片</span>    <span class="token function">processElements</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"img[src]"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">img</span> <span class="token operator">=></span> <span class="token operator">!</span>img<span class="token punctuation">.</span>src<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"data:image/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> baseURL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 对引入的 iframe 进行处理</span>    document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"iframe"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">iframe</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> <span class="token function-variable function">processIframe</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">const</span> doc <span class="token operator">=</span> iframe<span class="token punctuation">.</span>contentDocument<span class="token punctuation">;</span>                <span class="token comment">// 查看 iframe 里是否有 Document 对象，如果没有停止处理</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>doc<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token function">processElements</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>doc<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"img[src]"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">img</span> <span class="token operator">=></span> <span class="token operator">!</span>img<span class="token punctuation">.</span>src<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"data:image/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> iframe<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"跨域 iframe 访问失败:"</span><span class="token punctuation">,</span> iframe<span class="token punctuation">.</span>src<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token function-variable function">waitForDocumentReady</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">doc<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> timeoutId<span class="token punctuation">;</span>            <span class="token keyword">const</span> <span class="token function-variable function">checkReady</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>doc<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token string">'complete'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeoutId<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>checkReady<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            timeoutId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"iframe 加载超时"</span><span class="token punctuation">,</span> doc<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">30_000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 超时设定为30秒</span>            <span class="token function">checkReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">// 设定 iframe 的 onLoad</span>        <span class="token keyword">const</span> <span class="token function-variable function">onLoad</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>iframe<span class="token punctuation">.</span>contentDocument<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">waitForDocumentReady</span><span class="token punctuation">(</span>iframe<span class="token punctuation">.</span>contentDocument<span class="token punctuation">,</span> processIframe<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        iframe<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> onLoad<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>iframe<span class="token punctuation">.</span>contentDocument <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token string">'interactive'</span><span class="token punctuation">,</span> <span class="token string">'complete'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>iframe<span class="token punctuation">.</span>contentDocument<span class="token punctuation">.</span>readyState<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">processIframe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
          <category> 码海无涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一个nodejs项目上线的经验</title>
      <link href="/2025/08/26/di-yi-ge-nodejs-xiang-mu-shang-xian-de-jing-yan/"/>
      <url>/2025/08/26/di-yi-ge-nodejs-xiang-mu-shang-xian-de-jing-yan/</url>
      
        <content type="html"><![CDATA[<h3 id="码海无涯系列，写给自己的注释"><a href="#码海无涯系列，写给自己的注释" class="headerlink" title="码海无涯系列，写给自己的注释"></a>码海无涯系列，写给自己的注释</h3><h4 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h4><p>首先在服务器上安装nodejs。</p><p>建立一个 Node.js 服务端：<br>在网站文件夹下 上传server.js文件<br>server.js例子:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"express"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> exec <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"child_process"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">9999</span><span class="token punctuation">;</span> <span class="token comment">// 可以改</span><span class="token comment">// 一个API，当用户点击时访问</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/run"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"node w.js"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> stdout<span class="token punctuation">,</span> stderr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">执行出错: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>error<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"执行出错"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;pre></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>stdout<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/pre></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 把执行结果返回网页</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">服务运行在 http://localhost:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>port<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在nginx中，设置反向代理到node</p><pre class="line-numbers language-none"><code class="language-none">location &#x2F;run &#123;    proxy_pass http:&#x2F;&#x2F;127.0.0.1:9999; # 转发到 Node 服务&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="出现问题"><a href="#出现问题" class="headerlink" title="出现问题"></a>出现问题</h5><h6 id="cannot-found-module"><a href="#cannot-found-module" class="headerlink" title="cannot found module:"></a><code>cannot found module</code>:</h6><p>权限错误：途中使用了 <code>sudo</code> 导致文件夹的用户全部变为 <code>root</code> 而不是 <code>aaa</code><br><code>sudo</code> 直装 <code>node</code>，导致 <code>node</code> 只为 <code>root</code> 所有，依赖库也只能为 <code>root</code> 所用，使用 <code>aaa</code>，或 <code>www</code> 用户无法调用依赖库<br>使用pm2守护进程时，调用依赖库直接报找不到模块<br>多次安装依赖库后仍然徒劳</p><h6 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h6><p>卸载干净 <code>nodejs</code>，</p><p>按照<code>nodejs</code>官网文档，使用 <code>nvm with npm</code>，安装了 <code>node 22</code>版本</p><h6 id="下面是一些途中可能用到的命令"><a href="#下面是一些途中可能用到的命令" class="headerlink" title="下面是一些途中可能用到的命令:"></a>下面是一些途中可能用到的命令:</h6><p>pm2 命令</p><p>启动服务:<br><code>pm2 start 你的文件名.js（该命令要在“你的文件名.js”所在目录运行）</code></p><p>保存当前 pm2 的进程列表，确保重启服务器后还能恢复:<br><code>pm2 save</code></p><p>让 pm2 在开机时自动启动:<br><code>pm2 startup</code></p><p>查看 pm2 守护的服务的进程状态:<br><code>pm2 status</code></p><p>列出最后50行报错日志:<br><code>pm2 logs SB(这个是你设置的名字) --lines 50</code></p><p>或<br><code>tail -n 50 ~/.pm2/logs/SB-error.log</code></p><p>启动服务并给该服务命名为SB（该命令要在“你的文件名.js”所在目录运行）:<br><code>pm2 start 你的文件名.js --name SB</code></p><p>卸载pm2:<br><code>sudo npm uninstall -g pm2</code></p><p>安装pm2:<br><code>npm install -g pm2</code></p><h6 id="node，npm命令"><a href="#node，npm命令" class="headerlink" title="node，npm命令"></a>node，npm命令</h6><p>卸载 node，npm（如果是用 apt 安装的）:<br><code>sudo apt remove --purge nodejs npm -y</code></p><p>再次清查 node npm:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">which</span> <span class="token function">node</span><span class="token function">which</span> <span class="token function">npm</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果输出还有 <code>/usr/bin/node</code> 或 <code>/usr/local/bin/node</code>，就删掉：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> /usr/bin/node<span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> /usr/bin/npm<span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> /usr/local/bin/node<span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> /usr/local/bin/npm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>同时清理旧全局模块：</p><p><code>sudo rm -rf /usr/lib/node_modules</code><br><code>sudo rm -rf /usr/local/lib/node_modules</code></p><p>按照官网文档，我使用 nvm with npm，安装了 node，则新程序会安装在当前用户下，避免权限问题</p><p>由于之前执行过 sudo，需要把网页文件全部改为当前用户：<br><code>sudo chown -R aaa:aaa /www/wwwroot/1.com/src</code></p><p>再把1.com&#x2F;src&#x2F;node_modules删除(用宝塔面板删也可以)：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /www/wwwroot/1.com/src/node_modules<span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> /www/wwwroot/1.com/src/package-lock.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>重新安装依赖：<br><code>npm install</code></p><p>但是运行pm2 server.js 仍然报错，打开pm2日志看，错误为找不到模块。推测pm2仍然是旧的：<br><code>Cannot find module &#39;/usr/lib/node_modules/pm2/lib/ProcessContainerFork.js&#39;</code></p><p>因为我用 nvm 重新安装了 node，所以 pm2 位置应该在：<br><code>~/.nvm/versions/node/v22.18.0/lib/node_modules/pm2</code></p><p>则再删除 pm2：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> /usr/bin/pm2<span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /usr/lib/node_modules/pm2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>重新全局安装：<br><code>npm install -g pm2</code></p><p>刷新 shell 的环境变量，确保 ~&#x2F;.nvm&#x2F;versions&#x2F;node&#x2F;22.18.0&#x2F;bin 在 PATH 里：<br><code>export PATH=&quot;$HOME/.nvm/versions/node/v22.18.0/bin:$PATH&quot;</code></p><p>更新 Shell 环境：<br><code>source ~/.bashrc</code></p><p>WSL 重新开机后 pm2 没启动：<br>由于使用的是WSL 2，WSL 默认不会像 Ubuntu 那样运行 systemd 服务<br>所以使用 PM2 来守护 nodejs 进程，但是 pm2 在 WSL 里设置了 <code>pm2 startup</code> 也不会开机自启，第一次使用该功能，以为哪里又出错</p><p>解决：<br>第①种方法：<br>打开wsl.conf：<br><code>sudo nano /etc/wsl.conf</code></p><p>添加：</p><pre class="line-numbers language-none"><code class="language-none">[boot]systemd&#x3D;true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>重启：<br><code>wsl --shutdown</code></p><p>开机后检查：<br><code>systemctl list-units --type=service | grep pm2</code></p><p>配置 PM2 自启：</p><pre class="line-numbers language-none"><code class="language-none">pm2 startup systemdpm2 save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第②种方法<br>在windows系统的powershell里直接打开：<br><code>wsl -d Ubuntu pm2 resurrect</code></p>]]></content>
      
      
      <categories>
          
          <category> 码海无涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 码海无涯 </tag>
            
            <tag> NODEJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两组对 web 网页的JS，IMG的SRC进行遍历并增加时间戳的JS代码</title>
      <link href="/2025/03/25/liang-zu-dui-web-wang-ye-de-js-img-de-src-jin-xing-bian-li-bing-zeng-jia-shi-jian-chuo-de-js-dai-ma/"/>
      <url>/2025/03/25/liang-zu-dui-web-wang-ye-de-js-img-de-src-jin-xing-bian-li-bing-zeng-jia-shi-jian-chuo-de-js-dai-ma/</url>
      
        <content type="html"><![CDATA[<h4 id="四组对-web-网页的JS，IMG的SRC进行遍历并增加时间戳的JS代码，并对引用的-iframe-的JS，IMG的SRC进行遍历"><a href="#四组对-web-网页的JS，IMG的SRC进行遍历并增加时间戳的JS代码，并对引用的-iframe-的JS，IMG的SRC进行遍历" class="headerlink" title="四组对 web 网页的JS，IMG的SRC进行遍历并增加时间戳的JS代码，并对引用的 iframe 的JS，IMG的SRC进行遍历"></a>四组对 web 网页的JS，IMG的SRC进行遍历并增加时间戳的JS代码，并对引用的 iframe 的JS，IMG的SRC进行遍历</h4><h3 id="建议使用第1组代码（其他组别的代码没有过滤base64的图片，导致base64图片不能显示）"><a href="#建议使用第1组代码（其他组别的代码没有过滤base64的图片，导致base64图片不能显示）" class="headerlink" title="建议使用第1组代码（其他组别的代码没有过滤base64的图片，导致base64图片不能显示）"></a>建议使用第1组代码（其他组别的代码没有过滤base64的图片，导致base64图片不能显示）</h3><h4 id="第1组代码"><a href="#第1组代码" class="headerlink" title="第1组代码"></a>第1组代码</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"DOMContentLoaded"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> timestamp <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> baseURL <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>origin<span class="token punctuation">;</span>    <span class="token comment">// 处理脚本更新</span>    document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'script[src]:not([src*="?v="])'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">oldScript</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> scriptUrl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>oldScript<span class="token punctuation">.</span>src<span class="token punctuation">,</span> baseURL<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>scriptUrl<span class="token punctuation">.</span>pathname<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"no.js"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> newScript <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> value <span class="token punctuation">&#125;</span> <span class="token keyword">of</span> oldScript<span class="token punctuation">.</span>attributes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                newScript<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            scriptUrl<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"v"</span><span class="token punctuation">,</span> timestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>            newScript<span class="token punctuation">.</span>src <span class="token operator">=</span> scriptUrl<span class="token punctuation">.</span>href<span class="token punctuation">;</span>            newScript<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"脚本加载失败:"</span><span class="token punctuation">,</span> scriptUrl<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span>                document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>oldScript<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            oldScript<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>newScript<span class="token punctuation">,</span> oldScript<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"脚本替换失败:"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 处理图片更新</span>    <span class="token keyword">const</span> <span class="token function-variable function">processElements</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">elements<span class="token punctuation">,</span> baseURL</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        elements<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">el</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>tagName<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'img'</span> <span class="token operator">&amp;&amp;</span> el<span class="token punctuation">.</span>src<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">const</span> urlObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>src<span class="token punctuation">,</span> baseURL<span class="token punctuation">)</span><span class="token punctuation">;</span>                    urlObj<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"v"</span><span class="token punctuation">,</span> timestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>                    el<span class="token punctuation">.</span>src <span class="token operator">=</span> urlObj<span class="token punctuation">.</span>href<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"URL 解析失败:"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">processElements</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"img[src]"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">img</span> <span class="token operator">=></span> <span class="token operator">!</span>img<span class="token punctuation">.</span>src<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"data:image/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> baseURL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 处理 iframe 内部的图片更新</span>    document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"iframe"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">iframe</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> <span class="token function-variable function">processIframe</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">const</span> doc <span class="token operator">=</span> iframe<span class="token punctuation">.</span>contentDocument<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>doc<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token function">processElements</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>doc<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"img[src]"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">img</span> <span class="token operator">=></span> <span class="token operator">!</span>img<span class="token punctuation">.</span>src<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"data:image/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> iframe<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"跨域 iframe 访问失败:"</span><span class="token punctuation">,</span> iframe<span class="token punctuation">.</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token function-variable function">waitForDocumentReady</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">doc<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> timeoutId<span class="token punctuation">;</span>            <span class="token keyword">const</span> <span class="token function-variable function">checkReady</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>doc<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token string">'complete'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeoutId<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>checkReady<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            timeoutId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"iframe 加载超时"</span><span class="token punctuation">,</span> doc<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">30_000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">checkReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token function-variable function">onLoad</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>iframe<span class="token punctuation">.</span>contentDocument<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">waitForDocumentReady</span><span class="token punctuation">(</span>iframe<span class="token punctuation">.</span>contentDocument<span class="token punctuation">,</span> processIframe<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        iframe<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> onLoad<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>iframe<span class="token punctuation">.</span>contentDocument <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token string">'interactive'</span><span class="token punctuation">,</span> <span class="token string">'complete'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>iframe<span class="token punctuation">.</span>contentDocument<span class="token punctuation">.</span>readyState<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">processIframe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第2组代码"><a href="#第2组代码" class="headerlink" title="第2组代码"></a>第2组代码</h4><p>上一组代码只能动态更新IMG，而JS即使更新了SRC，还是不会重载。<br>所以另写一组代码，对JS进行更新。</p><p>由于JS文件在单纯修改 <code>&lt;script&gt;</code> 的 <code>src</code> 不会触发重新加载和执行<br>必须 </p><ol><li>插入新标签; </li><li>克隆并替换旧标签;<br>才能触发脚本加载和执行<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"DOMContentLoaded"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 由于对 &lt;script> 修改 src 并添加时间戳，一般不会重新执行脚本</span>    <span class="token comment">// 所以使用下列代码破坏缓存策略，强制更新 no.js</span>        <span class="token comment">// 获取所有脚本标签（排除已包含版本号的）</span>    document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'script[src]:not([src*="?v="])'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">oldScript</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 解析脚本的完整 URL</span>            <span class="token keyword">const</span> scriptUrl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>oldScript<span class="token punctuation">.</span>src<span class="token punctuation">,</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 检查 pathname 是否以 no.js 结尾</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>scriptUrl<span class="token punctuation">.</span>pathname<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"no.js"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token comment">// 创建新脚本标签</span>            <span class="token keyword">const</span> newScript <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 克隆所有原属性（保留 async/defer/integrity 等）</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> value <span class="token punctuation">&#125;</span> <span class="token keyword">of</span> oldScript<span class="token punctuation">.</span>attributes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                newScript<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 添加时间戳参数</span>            scriptUrl<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"v"</span><span class="token punctuation">,</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            newScript<span class="token punctuation">.</span>src <span class="token operator">=</span> scriptUrl<span class="token punctuation">.</span>href<span class="token punctuation">;</span>            <span class="token comment">// 处理加载失败</span>            newScript<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"脚本加载失败:"</span><span class="token punctuation">,</span> url<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 可选回退逻辑：重新插入旧脚本</span>                document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>oldScript<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token comment">// 替换旧标签</span>            oldScript<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>newScript<span class="token punctuation">,</span> oldScript<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'脚本替换失败:'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="第3组代码"><a href="#第3组代码" class="headerlink" title="第3组代码"></a>第3组代码</h4><p>以下的代码:</p><ol><li>判断 no.js不够精准，可能误判 no.jsp 或 ?debug&#x3D;no.js</li><li>el.tagName &#x3D;&#x3D;&#x3D; “IMG”可以转小写以兼容库或 XHTML </li><li>事件是 <code>DOMContentLoaded</code> 时，可能 iframe 还没加载完全，可能导致 iframe 内容不能被加上时间戳</li><li>即使 iframe 里的 HTML 文档已经 存在，但可能 iframe.onload 触发得 太早，导致 iframe.contentDocument 还没完全初始化，所以 doc 仍然是 null<br>本代码在本地测试不能通过，（跑完 <code>let doc = iframe.contentDocument || iframe.contentWindow.document</code> 之后停止）可能因为本地响应事件很短，在远程服务器通过，可能是远程服务器响应时间较长</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"DOMContentLoaded"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> timestamp <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 处理 index.html 本身的 JS 和图片</span>    document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"img[src], script[src]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>src<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"no.js"</span><span class="token punctuation">)</span> <span class="token operator">||</span> el<span class="token punctuation">.</span>tagName <span class="token operator">===</span> <span class="token string">"IMG"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 只修改特定JS &amp; 所有图片</span>            <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>src<span class="token punctuation">,</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>            url<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"v"</span><span class="token punctuation">,</span> timestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>            el<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">.</span>href<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 遍历所有 iframe，给 iframe 里的 JS 和图片加时间戳</span>    document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"iframe"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">iframe</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> doc <span class="token operator">=</span> iframe<span class="token punctuation">.</span>contentDocument <span class="token operator">||</span> iframe<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span>document<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>doc<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"无法访问 iframe 文档"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            doc<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"img[src], script[src]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>src<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"no.js"</span><span class="token punctuation">)</span> <span class="token operator">||</span> el<span class="token punctuation">.</span>tagName <span class="token operator">===</span> <span class="token string">"IMG"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 只修改特定JS &amp; 所有图片</span>                    <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>src<span class="token punctuation">,</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>                    url<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"v"</span><span class="token punctuation">,</span> timestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>                    el<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">.</span>href<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"无法访问 iframe 内容，可能是跨域问题："</span><span class="token punctuation">,</span> iframe<span class="token punctuation">.</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS反恐精英的地图名字的前缀，如：gg, de, he，等，代表什么意思？</title>
      <link href="/2025/03/25/cs-fan-kong-jing-ying-de-di-tu-ming-zi-de-qian-zhui-ru-gg-de-he-deng-dai-biao-shi-me-yi-si/"/>
      <url>/2025/03/25/cs-fan-kong-jing-ying-de-di-tu-ming-zi-de-qian-zhui-ru-gg-de-he-deng-dai-biao-shi-me-yi-si/</url>
      
        <content type="html"><![CDATA[<h2 id="CS反恐精英的地图名字的前缀，如：gg-de-he，等，代表什么意思？"><a href="#CS反恐精英的地图名字的前缀，如：gg-de-he，等，代表什么意思？" class="headerlink" title="CS反恐精英的地图名字的前缀，如：gg, de, he，等，代表什么意思？"></a>CS反恐精英的地图名字的前缀，如：gg, de, he，等，代表什么意思？</h2><p>在《反恐精英》（Counter-Strike，简称 CS）系列游戏中，地图的名称通常带有不同的前缀，它们表示该地图的类型或玩法模式。以下是一些常见的地图前缀及其含义：</p><h4 id="拆弹模式"><a href="#拆弹模式" class="headerlink" title="拆弹模式"></a>拆弹模式</h4><p>de_（Defuse）<br>反恐精英（CT）需要阻止恐怖分子（T）安装炸弹，或者在炸弹被安放后拆除炸弹。<br>例如：de_dust2、de_inferno、de_nuke<br>cs_（Hostage Rescue）——解救人质模式</p><p>反恐精英（CT）需要解救人质并带回安全区，而恐怖分子（T）需要阻止他们。<br>例如：cs_office、cs_assault</p><h4 id="护送VIP模式"><a href="#护送VIP模式" class="headerlink" title="护送VIP模式"></a>护送VIP模式</h4><p>as_（Assassination）——（CS 1.6 及更早版本）</p><p>反恐精英（CT）需要护送 VIP 到达撤离点，而恐怖分子（T）需要阻止他们。<br>例如：as_oilrig（该模式较少见，CS:GO 中已被移除）</p><h4 id="枪械竞赛模式"><a href="#枪械竞赛模式" class="headerlink" title="枪械竞赛模式"></a>枪械竞赛模式</h4><p>gg_（Gun Game，CS:GO 变种为 Arms Race）</p><p>通过击杀敌人来升级武器，从手枪开始到长枪，最终使用金刀（Golden Knife）完成最后一击获胜。<br>例如：gg_aim_ag_texture</p><h4 id="高爆手雷模式"><a href="#高爆手雷模式" class="headerlink" title="高爆手雷模式"></a>高爆手雷模式</h4><p>he_（High Explosive）——</p><p>主要以高爆手雷（HE Grenade）作为武器进行战斗。<br>例如：he_dodgeball</p><h4 id="瞄准训练地图"><a href="#瞄准训练地图" class="headerlink" title="瞄准训练地图"></a>瞄准训练地图</h4><p>aim_（Aim Training）</p><p>设计为练习枪法的对战地图，通常是对称的，且武器受限。<br>例如：aim_map、aim_redline</p><h4 id="狙击地图"><a href="#狙击地图" class="headerlink" title="狙击地图"></a>狙击地图</h4><p>awp_（AWP Training）</p><p>主要使用 AWP 狙击步枪，地图通常开阔并限制其他武器。<br>例如：awp_india、awp_lego_2</p><h4 id="滑行地图"><a href="#滑行地图" class="headerlink" title="滑行地图"></a>滑行地图</h4><p>surf_（Surfing）</p><p>利用 CS 物理引擎的斜坡进行滑行，通常为娱乐或竞速玩法。<br>例如：surf_ski_2、surf_utopia</p><p>连跳训练地图<br>bhop_（Bunny Hop）</p><p>练习 Bunny Hop（兔子跳）技巧，提高移动速度和连跳流畅度。<br>例如：bhop_fps_max、bhop_arcane</p><h4 id="小游戏地图"><a href="#小游戏地图" class="headerlink" title="小游戏地图"></a>小游戏地图</h4><p>mg_（Minigame）</p><p>具有各种娱乐或挑战元素，如跑酷、障碍赛、团队合作等。<br>例如：mg_fun_multigames、mg_saw</p><h4 id="死亡竞赛模式"><a href="#死亡竞赛模式" class="headerlink" title="死亡竞赛模式"></a>死亡竞赛模式</h4><p>dm_（Deathmatch）</p><p>复活后立即投入战斗，无需等待回合结束，通常用于练习枪法。<br>例如：dm_dust2、dm_nuke<br>这些地图前缀帮助玩家快速识别地图的模式和玩法，在选择地图时更加直观。</p><h4 id="自由混战模式"><a href="#自由混战模式" class="headerlink" title="自由混战模式"></a>自由混战模式</h4><p>ffa_（Free-For-All）<br>玩法特点：</p><p>没有固定的队伍，所有玩家都是敌人，看到人就可以击杀。<br>无需等待复活，通常是 无限复活（Respawn），被击杀后可快速重新投入战斗。<br>适用于 枪法训练、快速对战 等场景。<br>常见 ffa_ 地图示例：</p><p>ffa_dust2（基于 Dust2 的自由混战版本）<br>ffa_aim_map（自由对战的瞄准训练地图）<br>ffa_awp_india（狙击混战地图）<br>这种模式类似于 “死亡竞赛（Deathmatch）”，但区别在于：</p><p>DM（Deathmatch） 可能仍然有 CT 和 T 队伍，队友之间不能攻击。<br>FFA（Free-For-All） 则完全没有队伍概念，每个人都是独立个体，见人就打。<br>在 CS:GO 及 CS 1.6 的社区服务器里，FFA 模式通常用于 枪械练习、娱乐模式或竞技热身，可以更快提高反应速度和枪法。</p><h4 id="死亡奔跑模式"><a href="#死亡奔跑模式" class="headerlink" title="死亡奔跑模式"></a>死亡奔跑模式</h4><p>dr_（Deathrun）<br>玩法特点：</p><p>由两组玩家组成：<br>跑者（Runners）：通常是反恐精英（CT），需要躲避陷阱并跑到终点。<br>陷阱触发者（Activators）：通常是恐怖分子（T），他们的任务是在适当的时机激活地图中的陷阱，阻止跑者通过。<br>地图上布满各种机关、陷阱，如移动平台、炸弹、射击装置、突然掉落的地面等。<br>跑者必须<strong>依靠技巧（跳跃、走位）</strong>避开陷阱并到达终点，通常在终点会有武器，成功到达终点的玩家可以击杀T（陷阱触发者）。<br>该模式考验的是跑酷技巧、反应速度和团队协作，具有很强的娱乐性。<br>常见 dr_ 地图示例：</p><p>dr_minecraft（以 Minecraft 主题打造的 Deathrun 地图）<br>dr_cyberpunk（赛博朋克风格的死亡奔跑地图）<br>dr_psykopat（经典死亡奔跑地图）<br>这个模式在CS 1.6、CS: Source 和 CS:GO 的社区服务器中都非常流行，尤其适合喜欢跑酷和挑战反应速度的玩家。</p><h4 id="战斗场模式"><a href="#战斗场模式" class="headerlink" title="战斗场模式"></a>战斗场模式</h4><p>fy_（Fight Yard）<br>玩法特点：</p><p>小型、对称的战斗地图，通常没有复杂的任务目标，只需消灭对方队伍。<br>固定武器：大多数 fy_ 地图会在地图上放置武器，玩家通常无法购买武器，只能拾取地上的枪械进行战斗。<br>紧张快节奏：地图一般较小，对战迅速，玩家在出生点附近就能立即交战。<br>适用于 快速练枪、热身、团队竞技。<br>常见 fy_ 地图示例：</p><p>fy_iceworld（最经典的战斗场地图之一，全图都是冰面）<br>fy_snow（类似 iceworld，但加入了雪景）<br>fy_pool_day（在游泳池环境中战斗）<br>fy_buzzkill（带有高低差的近距离战斗地图）<br>这种地图非常适合 练枪、团队竞技、快速对战，在 CS 1.6、CS: Source 和 CS:GO 的社区服务器中都很流行。</p><h4 id="捉迷藏模式"><a href="#捉迷藏模式" class="headerlink" title="捉迷藏模式"></a>捉迷藏模式</h4><p>hns_（Hide and Seek）<br>hns_ 代表 “Hide and Seek”（捉迷藏），是一种娱乐模式，玩法类似于现实中的捉迷藏，但结合了 CS 的机制。</p><p>玩法特点：</p><p>玩家被分为 躲藏者（Hiders，通常是 CT） 和 寻找者（Seekers，通常是 T）。<br>躲藏者 需要利用地图中的障碍物和跳跃技巧（如 Bunny Hop、滑墙等）来隐藏或逃跑。<br>寻找者 需要在限定时间内找到并击杀所有躲藏者。<br>一些服务器会允许躲藏者使用特殊能力（如短暂隐身、高跳）。<br>地图通常较大，包含很多可以躲藏的地点，如房屋、箱子、通风管道等。<br>常见 hns_ 地图示例：</p><p>hns_warehouse（仓库环境，适合躲藏）<br>hns_city（城市风格的捉迷藏地图）<br>hns_tower（多层建筑，提供丰富的躲藏点）</p><p>轻型狙击刀战模式<br>scout_（ScoutzKnivez）<br>scout_ 代表 “ScoutzKnivez”（轻型狙击 + 小刀模式），专为 SCOUT 狙击步枪（SSG 08）+ 小刀 设计的地图。</p><p>玩法特点：</p><p>所有玩家只配备 SSG 08（Scout）和小刀，不能购买其他武器。<br>低重力设定（类似于月球重力），玩家可以跳得更高、更远，增加机动性。<br>考验狙击精度和移动技巧，因为 SSG 08 需要精准射击才能击杀对手。<br>适用于练习移动射击和空中精准狙击。<br>常见 scout_ 地图示例：</p><p>scoutzknivez（最经典的 Scout 模式地图，玩家可以在高平台间跳跃）<br>scout_towers（高塔间对战，利用低重力跳跃）<br>scout_alley（狭长巷道狙击战）<br>这类地图在 CS 1.6、CS: Source 和 CS:GO 社区中都非常受欢迎，适合练习跳狙、移动射击和快速对战。</p><h4 id="训练模式"><a href="#训练模式" class="headerlink" title="训练模式"></a>训练模式</h4><p>training_<br>training_ 代表 “Training”（训练），通常用于 练习枪法、投掷物、移动技巧等。</p><p>玩法特点：<br>这些地图主要用于提升玩家个人技能，而不是对战。<br>训练项目包括：<br>瞄准（AIM）训练：练习精准度、射击速度、转身射击等。<br>反应训练：针对快速出现的目标进行射击练习。<br>投掷物训练：练习烟雾弹、闪光弹、燃烧弹的投掷轨迹。<br>移动技巧：如 Bunny Hop（连跳）、滑步、跳箱等。<br>打靶练习：射击站桩或移动的机器人。<br>常见 training_ 地图示例：<br>training_aim_csgo（基础瞄准训练地图）<br>training_aim_react（反应速度训练地图）<br>training_grenade（手雷&#x2F;烟雾弹投掷训练）<br>training_movement（移动技巧训练地图）<br>在 CS:GO 中，许多玩家会使用 training_ 地图来提升自己的技术，特别是在竞技模式前热身。</p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS </tag>
            
            <tag> 反恐精英 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS数组基础</title>
      <link href="/2025/02/15/js-shu-zu-ji-chu/"/>
      <url>/2025/02/15/js-shu-zu-ji-chu/</url>
      
        <content type="html"><![CDATA[<ul><li><p><a href="#_1">前言</a></p></li><li><p><a href="#_2">数组基础</a></p><ul><li><p><a href="#_3">简介</a></p></li><li><p><a href="#_4">属性</a></p></li><li><p><a href="#_5">基本操作</a></p><ul><li><a href="#_6">创建数组</a></li><li><a href="#_7">检测数组</a></li></ul></li><li><p><a href="#isarray-from-of">数组方法 isArray, from, of</a></p></li><li><p><a href="#_8">数组实例方法</a></p><ul><li><a href="#join">转换方法 join</a></li><li><a href="#push-pop">栈方法 push, pop</a></li><li><a href="#unshift-shift">队列方法 unshift, shift</a></li><li><a href="#reverse-sort">重排序方法 reverse, sort</a></li><li><a href="#concat-slice-splice-copywithin-fill">操作方法 concat, slice, splice, copyWithin, fill</a></li><li><a href="#indexof-lastindexof-includes">位置方法 indexOf, lastIndexOf, includes</a></li><li><a href="#every-some-filter-foreach-map-find-findindex-entries-keys-values">迭代方法 every, some, filter, forEach, map, find, findIndex, entries, keys, values</a></li><li><a href="#reduce-reduceright">归并方法 reduce, reduceRight</a></li></ul></li></ul></li><li><p><a href="#_9">数组常见问题练习</a></p><ul><li><p><a href="#_10">数组合并</a></p><ul><li><a href="#_11">多个一维数组合并</a></li><li><a href="#_12">多维（复合）数组合并成一维数组</a></li></ul></li><li><p><a href="#_13">数组去重</a></p><ul><li><a href="#_14">双重循环去重</a></li><li><a href="#_15">排序遍历去重</a></li><li><a href="#_16">对象键值对法</a></li><li><a href="#es6-set-map">使用 ES6 的 Set 和 Map 方法</a></li></ul></li><li><p><a href="#_17">数组随机排序</a></p><ul><li><a href="#_18">递归的方法</a></li><li><a href="#sort">使用数组 sort 方法对数组元素随机排序（效果不佳）</a></li><li><a href="#from-underscorejs">随机交换数组内的元素 (原理from underscore.js）</a></li><li><a href="#_19">随机从原数组抽取一个元素,加入到新数组</a></li></ul></li><li><p><a href="#_20">取数组中最大值最小值</a></p><ul><li><a href="#_21">遍历比较方法</a></li><li><a href="#_22">归并比较方法</a></li><li><a href="#mathmax-mathmin">利用 Math.max() 与 Math.min() 方法</a></li></ul></li><li><p><a href="#_23">将一个数按大小顺序插入数组并返回索引值</a></p><ul><li><a href="#push-sort-indexof">使用 push + sort + indexOf 方法</a></li><li><a href="#sort-findindex-splice">使用 sort + findIndex + splice 方法</a></li></ul></li><li><p><a href="#_24">从数组中寻找元素并删除元素</a></p><ul><li><a href="#arguments-indexof-filter">arguments + indexOf + filter 遍历判断法</a></li><li><a href="#slice-es6-set-filter">slice(或解构运算符) + es6 set + filter 方法</a></li></ul></li></ul></li><li><p><a href="#_25">引用列表</a></p></li></ul><h2 id="数组基础"><a href="#数组基础" class="headerlink" title="数组基础"></a><a href="#_2"></a>数组基础</h2><p>原文：<a href="http://www.ferecord.com/lujs-array.html">http://www.ferecord.com/lujs-array.html</a></p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a><a href="#_3"></a>简介</h3><p>数组是应用最广泛的数据存储结构。它被植入到大部分编程语言中。在 ECMAScript 中数组是非常常用的引用类型。</p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a><a href="#_4"></a>属性</h3><p><code>length</code><br>length属性表示数组的长度，即其中元素的个数。<br>JavaScript数组的length属性是可变的，当length属性被设置得更大时，整个数组的状态事实上不会发生变化，仅仅是length属性变大；当length属性被设置得比原来小时，则原先数组中索引大于或等于length的元素的值全部被丢失。</p><p><code>prototype</code><br>返回对象类型原型的引用。prototype 属性是 object 共有的。<br>一般用来给数组实例添加方法。</p><p><code>constructor</code><br>表示创建对象的函数。<br>说明：constructor 属性是所有具有 prototype 的对象的成员。constructor 属性保存了对构造特定对象实例的函数的引用。</p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a><a href="#_5"></a>基本操作</h3><h4 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a><a href="#_6"></a>创建数组</h4><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>12345678910</td><td>&#x2F;&#x2F; 数组实例的创建var arr &#x3D; []var arr &#x3D; new Array() &#x2F;&#x2F;创建一个空数组 []var arr &#x3D; new Array(5) &#x2F;&#x2F;创建一个length为5的数组 [undefined, undefined, undefined, undefined, undefined]var arr &#x3D; new Array(1,2,3,4,5) &#x2F;&#x2F;创建数组并赋值 [1,2,3,4,5] var arr &#x3D; Array.of(7);       &#x2F;&#x2F; 创建数组并赋值 [7]var arr &#x3D; Array.of(1, 2, 3); &#x2F;&#x2F; 创建数组并赋值 [1, 2, 3]</td></tr></tbody></table><h4 id="检测数组"><a href="#检测数组" class="headerlink" title="检测数组"></a><a href="#_7"></a>检测数组</h4><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>12345678</td><td>&#x2F;&#x2F;判断一个对象是不是数组var arr &#x3D; []if(arr instanceof Array){} &#x2F;&#x2F; 方法一if(Object.prototype.toString.call(arr) &#x3D;&#x3D; ‘[object Array]’)}{} &#x2F;&#x2F; 方法二if(Array.isArray(arr)){} &#x2F;&#x2F;方法三if(arr.constructor &#x3D;&#x3D; Array){} &#x2F;&#x2F; 方法四</td></tr></tbody></table><h3 id="数组方法-isArray-from-of"><a href="#数组方法-isArray-from-of" class="headerlink" title="数组方法 isArray, from, of"></a><a href="#isarray-from-of"></a>数组方法 isArray, from, of</h3><p><code>Array.isArray(obj)</code><br>检测对象是否 Array ，是则返回true，否则为false。</p><p><code>Array.from(arrayLike, mapFn, thisArg)</code><br>该方法从一个类似数组或可迭代对象创建一个新的数组实例。参数 arrayLike 是想要转换成真实数组的类数组对象或可遍历对象。mapFn 是可选参数，如果指定了该参数，则最后生成的数组会经过该函数的加工处理后再返回。thisArg是可选参数，为执行 mapFn 函数时 this 的值。</p><p>所谓类似数组的对象，本质特征只有一点，即必须有length属性。因此，任何有length属性的对象，都可以通过Array.from方法转为数组。<br>实际应用中，常见的类似数组的对象是 DOM 操作返回的 NodeList 集合，以及函数内部的 arguments 对象。</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>12345678910111213141516</td><td>let arrayLike &#x3D; {    0: ‘a’,    1: ‘b’,    2: ‘c’,    length: 3}let arrayLike2 &#x3D; {length: 3}let str &#x3D; ‘abcd’ let newArray &#x3D; Array.from(arrayLike) &#x2F;&#x2F;[‘a’, ‘b’, ‘c’]let newArray2 &#x3D; Array.from(arrayLike, (v) &#x3D;&gt; v+’1’) &#x2F;&#x2F;[‘a1’, ‘b1’, ‘c1’]let newArray3 &#x3D; Array.from(arrayLike2) &#x2F;&#x2F; [undefined, undefined, undefined]let newArray4 &#x3D; Array.from(str) &#x2F;&#x2F; [‘a’, ‘b’, ‘c’, ‘d’]</td></tr></tbody></table><p><code>Array.of(item…)</code><br>该方法用于创建数组实例。该方法用于替代 Array() 或 new Array()。Array.of() 和 Array 构造函数之间的区别在于处理整数参数：Array.of(7) 创建一个具有单个元素 7 的数组，而 Array(7) 创建一个包含 7 个 undefined 元素的数组。</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>1234567</td><td>Array.of(7);       &#x2F;&#x2F; [7]Array.of(1, 2, 3); &#x2F;&#x2F; [1, 2, 3] Array(7);          &#x2F;&#x2F; [ , , , , , , ]Array(1, 2, 3);    &#x2F;&#x2F; [1, 2, 3]</td></tr></tbody></table><h3 id="数组实例方法"><a href="#数组实例方法" class="headerlink" title="数组实例方法"></a><a href="#_8"></a>数组实例方法</h3><h4 id="转换方法-join"><a href="#转换方法-join" class="headerlink" title="转换方法 join"></a><a href="#join"></a>转换方法 join</h4><p><code>arr.join(separator)</code><br>把数组构构造成字符串，它先把数组中的每个元素转换成字符串，然后再用 separator 分隔符把它们链接在一起，separator 分隔符默认是逗号 “,”，要想做到无间隔链接，可以使用空字符串作为 separator：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>1234567</td><td>var arr &#x3D; [1,2,3,4,5]arr.join(‘|’) &#x2F;&#x2F;“1|2|3|4|5”arr.join(“”) &#x2F;&#x2F;12345 &#x2F;&#x2F;另所有对象有具有的 toLocaleString、toString、valueOf，可以看作是join的特殊用法，不常用</td></tr></tbody></table><h4 id="栈方法-push-pop"><a href="#栈方法-push-pop" class="headerlink" title="栈方法 push, pop"></a><a href="#push-pop"></a>栈方法 push, pop</h4><p><code>arr.push(item…)</code><br>将一个或多个新元素添加到数组结尾，并返回数组新长度。</p><p><code>arr.pop()</code><br>移除最后一个元素并返回该元素值。</p><h4 id="队列方法-unshift-shift"><a href="#队列方法-unshift-shift" class="headerlink" title="队列方法 unshift, shift"></a><a href="#unshift-shift"></a>队列方法 unshift, shift</h4><p><code>arr.unshift(item…)</code><br>将一个或多个新元素添加到数组开始，数组中的元素自动后移，返回数组新长度。</p><p><code>arr.shift()</code><br>移除最前一个元素并返回该元素值，数组中元素自动前移.如果这个数组是空的，它会返回 undefined。shift 通常比 pop 慢的多。</p><h4 id="重排序方法-reverse-sort"><a href="#重排序方法-reverse-sort" class="headerlink" title="重排序方法 reverse, sort"></a><a href="#reverse-sort"></a>重排序方法 reverse, sort</h4><p><code>arr.reverse()</code><br>反转数组的顺序。</p><p><code>arr.sort(comparefn)</code><br>给数组排序，默认升序。</p><p>注意 sort 默认会将数组内容视为字符串来排序，所以对数字排序时默认的排序规则会错的离谱。一般我们给sort带入个比较函数来替代原来的默认的比较方法，比较方法接受两个参数，如果两个参数相等则返回0，如果第一个参数应该排在前面则返回一个负数，如果第二个参数应该排在前面则返回一个正数：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>1234567</td><td>&#x2F;&#x2F;数组排序var arr &#x3D; [2,3,1,5,4]arr.sort(function(a, b) {    return a - b}) &#x2F;&#x2F; [1,2,3,4,5]</td></tr></tbody></table><h4 id="操作方法-concat-slice-splice-copyWithin-fill"><a href="#操作方法-concat-slice-splice-copyWithin-fill" class="headerlink" title="操作方法 concat, slice, splice, copyWithin, fill"></a><a href="#concat-slice-splice-copywithin-fill"></a>操作方法 concat, slice, splice, copyWithin, fill</h4><p><code>arr.concat(item…)</code><br>该方法产生一份 arr 的潜复制，并将多个数组（也可以是字符串，或者是数组和字符串的混合）附加在其后连接为一个数组，返回连接好的新的数组。</p><p><code>arr.slice(start, end)</code><br>该方法对数组中的一段做浅复制，首先复制数组 arr[start] 至 arr[end] 的部分，注意不包括 end 对应的元素，如果省略 end 将复制 start 之后的所有元素（或者理解成 end 的默认值为 arr.length）。字符串也有个同名方法 string.slice。</p><p><code>arr.splice(start, deleteCount, item…)</code><br>该方法从 arr 中移除一个或多个元素，并将新的 item 插入至移除元素的开始位置， 参数 start 是移除元素的开始位置，deleteCount 是要移除的元素的个数，item 是要被插入的元素。它返回一个包含被移除元素的数组。</p><p><code>arr.copyWithin(target, start, end)</code><br>该方法复制数组的一部分到同一数组中的另一个位置（会覆盖原成员），并返回修改后的数组。使用这个方法，会修改当前数组。参数 target 为开始替换数据的位置，若 target 大于等于 arr.length，将会不发生拷贝。start 是可选参数，为开始读取数据的位置，默认为0。end 是可选参数，为停止读取数据的位置，默认为 arr.length。</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>1234</td><td>[1, 2, 3, 4, 5].copyWithin(0, 3)&#x2F;&#x2F; [4, 5, 3, 4, 5]</td></tr></tbody></table><p>上面代码表示将从3号位直到数组结束的成员（4和5），复制到从0号位开始的位置，结果覆盖了原来的1和2。</p><p><code>arr.fill(value, start, end)</code><br>该方法使用给定值填充一个数组，参数 value 是用来填充数组的值。start 是可选参数，为填充开始位置，默认为 0。end 是可选参数，为填充的结束位置，默认为 arr.length。</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>1234</td><td>[1, 2, 3].fill(4)            &#x2F;&#x2F; [4, 4, 4][1, 2, 3].fill(4, 1 , 2)            &#x2F;&#x2F; [1, 4, 3]</td></tr></tbody></table><p>fill 方法是个可变方法, 它会改变调用它的 this 对象本身, 然后返回它, 而并不是返回一个副本。</p><h4 id="位置方法-indexOf-lastIndexOf-includes"><a href="#位置方法-indexOf-lastIndexOf-includes" class="headerlink" title="位置方法 indexOf, lastIndexOf, includes"></a><a href="#indexof-lastindexof-includes"></a>位置方法 indexOf, lastIndexOf, includes</h4><p><code>arr.indexOf(searchElement, start)</code><br>该方法返回要查找的项在数组中的位置，如果没找到返回 -1。接受两个参数，searchElement 是要查找的项，start 是查找起始位置的索引，默认是0。</p><p><code>arr.lastIndexOf(searchElement, start)</code><br>从 start 位置开始向前查找，start 默认值为 arr.length - 1。</p><p>注意该方法在比较查找项与数组中每一项时，会使用全等操作符，也就是要求查找的项必须严格相等。</p><p><code>arr.includes(searchElement, fromIndex)</code><br>该方法用来判断当前数组是否包含某指定的值，如果是，则返回 true，否则返回 false。参数 searchElement 为需要查找的元素值。参数 fromIndex 是可选参数，从该索引处开始查找 searchElement，如果为负值，则按升序从 array.length + fromIndex 的索引开始搜索，默认为 0。 如果fromIndex 大于等于数组长度 ，则返回 false 。该数组不会被搜索。<br>该方法属于ES7，但Babel转码器已经支持。</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>12345</td><td>[1, 2, 3].includes(2);     &#x2F;&#x2F; true[1, 2, 3].includes(4);     &#x2F;&#x2F; false[1, 2, NaN].includes(NaN); &#x2F;&#x2F; true</td></tr></tbody></table><p>没有该方法之前，我们通常使用数组的indexOf方法，检查是否包含某个值。</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>12345</td><td>if (arr.indexOf(el) !&#x3D;&#x3D; -1) {  &#x2F;&#x2F; …}</td></tr></tbody></table><p>indexOf方法有两个缺点，一是不够语义化，它的含义是找到参数值的第一个出现位置，所以要去比较是否不等于-1，表达起来不够直观。二是，它内部使用严格相当运算符（&#x3D;&#x3D;&#x3D;）进行判断，这会导致对NaN的误判。includes使用的是不一样的判断算法，就没有这个问题。</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>123456</td><td>[NaN].indexOf(NaN)&#x2F;&#x2F; -1[NaN].includes(NaN)&#x2F;&#x2F; true</td></tr></tbody></table><p>includes() 方法有意设计为通用方法。它不要求this值是数组对象，所以它可以被用于其他类型的对象 (比如类数组对象)。</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>123456</td><td>(function(){    console.log([].includes.call(arguments, 2)) &#x2F;&#x2F; true    console.log([].includes.call(arguments, 4)) &#x2F;&#x2F; false})(1,2,3)</td></tr></tbody></table><h4 id="迭代方法-every-some-filter-forEach-map-find-findIndex-entries-keys-values"><a href="#迭代方法-every-some-filter-forEach-map-find-findIndex-entries-keys-values" class="headerlink" title="迭代方法 every, some, filter, forEach, map, find, findIndex, entries, keys, values"></a><a href="#every-some-filter-foreach-map-find-findindex-entries-keys-values"></a>迭代方法 every, some, filter, forEach, map, find, findIndex, entries, keys, values</h4><p><code>arr.every(callback，thisArg)</code><br>对数组中的每一项运行给定函数，如果该函数对每一项都返回 true，则返回 true。callback 被调用时传入三个参数：元素值，元素的索引，原数组。thisArg 为可选参数，指定执行 callback 时使用的 this 值。</p><p><code>arr.some(callback, thisArg)</code><br>对数组中的每一项运行给定函数，如果该函数对任意一项返回 true，则返回 true。</p><p><code>arr.filter(callback, thisArg)</code><br>对数组中的每一项运行给定函数，返回该函数会返回 true 的项组成的数组。</p><p><code>arr.forEach(callback)</code><br>对数组中的每一项运行给定函数，这个方法没有返回值。本质上与使用 for 循环迭代数组一样。</p><p><code>arr.map(callback)</code><br>对数组中的每一项运行给定函数，返回每次函数调用组成的数组。</p><p><code>arr.find(callback, thisArg)</code><br>该方法对数组所有成员依次执行 callback 函数，直到找出第一个返回值为 true 的成员，然后返回该成员。如果没有符合条件的成员，则返回 undefined。</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>1234</td><td>[1, 4, -5, 10].find((v, i, arr) &#x3D;&gt; v &lt; 0)&#x2F;&#x2F; -5</td></tr></tbody></table><p>find方法的回调函数可以接受三个参数，依次为当前的值、当前的位置和原数组</p><p><code>arr.findIndex(callback, thisArg)</code><br>该方法与 arr.find() 类似，对数组中的成员依次执行 callback 函数，直至照吃第一个返回值为 true 的成员，然后返回该成员的索引。如果没有符合条件的成员，则返回 -1。</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>123456</td><td>[1, 5, 10, 15].findIndex((v, i , arr)&#x3D;&gt;{    return v &gt; 9})&#x2F;&#x2F;2</td></tr></tbody></table><p><code>arr.entries()</code><br><code>arr.keys()</code><br><code>arr.values()</code></p><p>这三个方法都返回一个新的Array Iterator对象，可以用<code>for...of</code>循环进行遍历，区别是<code>keys()</code>是对键名的遍历、<code>values()</code>是对键值的遍历，<code>entries()</code>是对键值对的遍历。</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>123456789101112131415161718192021</td><td>for (let index of [‘a’, ‘b’].keys()) { console.log(index); }&#x2F;&#x2F; 0&#x2F;&#x2F; 1 for (let elem of [‘a’, ‘b’].values()) { console.log(elem) ;}&#x2F;&#x2F; ‘a’&#x2F;&#x2F; ‘b’ for (let [index, elem] of [‘a’, ‘b’].entries()) { console.log(index, elem);}&#x2F;&#x2F; 0 “a”&#x2F;&#x2F; 1 “b” var arr &#x3D; [“a”, “b”;var iterator &#x3D; arr.entries(); &#x2F;&#x2F; undefined console.log(iterator); &#x2F;&#x2F; Array Iterator {} console.log(iterator.next().value);  &#x2F;&#x2F; [0, “a”]console.log(iterator.next().value);  &#x2F;&#x2F; [1, “b”]</td></tr></tbody></table><h4 id="归并方法-reduce-reduceRight"><a href="#归并方法-reduce-reduceRight" class="headerlink" title="归并方法 reduce, reduceRight"></a><a href="#reduce-reduceright"></a>归并方法 reduce, reduceRight</h4><p><code>arr.reduce(callback, initialValue)</code><br><code>arr.reduceRight(callback, initialValue)</code></p><p>这个两个方法都会迭代数组所有的项，然后返回一个最终值。reduce()方法从数组的第一项开始，逐个遍历到最后，而reduceRight()则从数组的最后一项开始，向前遍历到第一项。它们接受两个参数，callback 每一项上调用的函数，callback 被调用时传入四个参数：上一次调用回调返回的值、正在处理的元素、正在处理的元素的索引值（如果提供了 initialValue ，从0开始；否则从1开始）、原数组。initialValue 是可选项，作为归并基础的初始值，其值用于第一次调用 callback 的第一个参数。</p><hr><h2 id="数组常见问题练习"><a href="#数组常见问题练习" class="headerlink" title="数组常见问题练习"></a><a href="#_9"></a>数组常见问题练习</h2><h3 id="数组合并"><a href="#数组合并" class="headerlink" title="数组合并"></a><a href="#_10"></a>数组合并</h3><h4 id="多个一维数组合并"><a href="#多个一维数组合并" class="headerlink" title="多个一维数组合并"></a><a href="#_11"></a>多个一维数组合并</h4><p>如有两个一维数组，要将他们合并成一个数组:</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>123456</td><td>var arr1 &#x3D; [1, 2]var arr2 &#x3D; [3, 4] &#x2F;&#x2F; &#x3D;&gt; [1,2,3,4]</td></tr></tbody></table><p><code>Array.prototype.concat()方法</code></p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>123</td><td>var arr &#x3D; arr1.concat(arr2) &#x2F;&#x2F;[1, 2, 3, 4]</td></tr></tbody></table><p><code>for循环和Array.prototype.push()</code></p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>12345678</td><td>function flation(arr1, arr2) {    for (var i &#x3D; 0; i &lt; arr2.length; i++) {        arr1.push(arr2[i])    }    return arr1}</td></tr></tbody></table><p><code>reduce()或reduceRight()方法</code></p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>123456789</td><td>function flatten(arr1, arr2) {    return arr2.reduce(function (prev, curr) {        prev.push(curr)        return prev    }, arr1)}</td></tr></tbody></table><h4 id="多维（复合）数组合并成一维数组"><a href="#多维（复合）数组合并成一维数组" class="headerlink" title="多维（复合）数组合并成一维数组"></a><a href="#_12"></a>多维（复合）数组合并成一维数组</h4><p>例如有这么一组多维数组，要把它拍平成1维数组：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>12345</td><td>var myArray &#x3D; [[1, 2], [3, 4, 5], [6, 7, 8, 9], [11,12,[12,13,[14]]], 10, 11]; &#x2F;&#x2F; &#x3D;&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 12, 13, 14, 10, 11]</td></tr></tbody></table><p><code>Array.prototype.push()方法</code></p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>1234567891011121314151617</td><td>function flatten(arr, result) {    if (!result) {        result &#x3D; []    }    for (var i &#x3D; 0; i &lt; arr.length; i++) {        if(arr[i].constructor &#x3D;&#x3D; Array) {            flatten(arr[i], r)        } else {            result.push(arr[i])        }    }    return result}flatten([[1, 2], [3, 4, 5], [6, 7, 8, 9], [11,12,[12,13,[14]]], 10, 11])&#x2F;&#x2F;[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 12, 13, 14, 10, 11]</td></tr></tbody></table><p><code>Array.prototype.concat()方法</code></p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>123456789101112</td><td>&#x2F;&#x2F;省略对二维以上数组的判断function flatten(arr) {    var result &#x3D; []    for (var i &#x3D; 0; i &lt; arr.length; i++) {        result &#x3D; result.concat(arr[i])    }    return result}flatten([[1, 2],[3, 4, 5], [6, 7, 8, 9]]);&#x2F;&#x2F;[1, 2, 3, 4, 5, 6, 7, 8, 9]flatten([[1, 2],[3, 4, 5], [6, 7, 8, 9],10,11]);&#x2F;&#x2F;[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]</td></tr></tbody></table><p>可以通过Function.prototype.apply()方法，让其变得更简单:</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>123456</td><td>&#x2F;&#x2F;省略对二维以上数组的判断function flatten(arr) {    return Array.prototype.concat.apply([], arr)}</td></tr></tbody></table><p>还可以将上面方法做个精简：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>123456</td><td>&#x2F;&#x2F;省略对二维以上数组的判断function flatten(arr) {    return [].concat.apply([], arr)}</td></tr></tbody></table><p>在 ES6 中，还可以这样写：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>123456</td><td>&#x2F;&#x2F;省略对二维以上数组的判断function flatten(arr) {    return [].concat(…arr)}</td></tr></tbody></table><p>如果要处理三维或更多维数组，则需要加一些判断：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>12345678</td><td>function flatten(arr) {    arr &#x3D; [].concat.apply([], arr)    return arr.some(Array.isArray) ? flatten(arr) : arr}flatten([[1, 2], [3, 4, 5], [6, 7, 8, 9], [11,12,[12,13,[14]]], 10, 11])&#x2F;&#x2F;[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 12, 13, 14, 10, 11]</td></tr></tbody></table><p>或者：<br>function flatten(arr) {<br>var isArray &#x3D; Object.prototype.toString.call(arr) &#x3D;&#x3D; ‘[object Array]’;</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>123456789</td><td>if (isArray &amp;&amp; arr.length &gt; 0) {    var head &#x3D; arr[0]    var tail &#x3D; arr.slice(1)    return flatten(head).concat(flatten(tail));} else {    return [].concat(arr)}</td></tr></tbody></table><p>}</p><p><code>使用join()和split()</code><br>利用数组实例的<code>join()</code>方法和字符串实例的<code>split()</code>方法，也可以将多维数组拍平：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>1234567</td><td>function flatten(arr) {    return arr.join(‘,’).split(‘,’)}flatten([[1, 2], [3, 4, 5], [6, 7, 8, 9], [11,12,[12,13,[14]]], 10, 11])&#x2F;&#x2F;[“1”, “2”, “3”, “4”, “5”, “6”, “7”, “8”, “9”, “11”, “12”, “12”, “13”, “14”, “10”, “11”]</td></tr></tbody></table><p>这种方法的缺点在于返回的数组内全是字符串，如果不需要校验内容类型的话，可以使用这种方法。</p><hr><h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a><a href="#_13"></a>数组去重</h3><h4 id="双重循环去重"><a href="#双重循环去重" class="headerlink" title="双重循环去重"></a><a href="#_14"></a>双重循环去重</h4><p>思路：</p><ul><li>构建一个空数组来存放去重后的数组</li><li>对原数组做循环遍历，每次从数组中取出一个元素与结果数组做对比</li><li>如果原数组取出的元素与结果数组元素相同，则跳出循环；反之则将其存放到结果数组</li></ul><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>123456789101112131415161718192021</td><td>function unique(arr) {    var result &#x3D; [arr[0]]    for (var i &#x3D; 1; i &lt; arr.length; i++) {        var repeat &#x3D; false        for (var j &#x3D; 0; j &lt; result.length; j++) {            if (arr[i] &#x3D;&#x3D; result[j]) {                repeat &#x3D; true                break;            }        }        if (!repeat) {            result.push(arr[i])        }    }    return result} unique([1, 2, 3, 4, 3, 2, ‘a’, ‘b’, ‘a’]);&#x2F;&#x2F;[1, 2, 3, 4, “a”, “b”]</td></tr></tbody></table><p>这种方法也可采用<code>forEach()</code>方法和<code>indexOf()</code>方法模拟实现：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>12345678910111213</td><td>function unique(arr) {    var result &#x3D; [arr[0]]    arr.forEach(function(v) {        if (result.indexOf(v) &#x3D;&#x3D; -1) {  &#x2F;&#x2F;这里 indexOf()也可替换为es7的includes()            result.push(v)        }    })    return result}unique([1, 2, 3, 4, 3, 2, ‘a’, ‘b’, ‘a’]);&#x2F;&#x2F;[1, 2, 3, 4, “a”, “b”]</td></tr></tbody></table><h4 id="排序遍历去重"><a href="#排序遍历去重" class="headerlink" title="排序遍历去重"></a><a href="#_15"></a>排序遍历去重</h4><p>思路：</p><ul><li>构建一个空数组来存放去重后的数组</li><li>用<code>sort()</code>方法对原数组做一个排序，排完序后对数组做遍历，检查数组中第 i 个元素与结果数组中最后一个元素是否相同，如果不同，则放到结果数组中。</li></ul><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>12345678910111213</td><td>function unique(arr) {    arr.sort();    var result &#x3D; []    for (var i &#x3D; 0; i &lt; arr.length; i++) {        if (arr[i] !&#x3D;&#x3D; result[result.length - 1]) {            result.push(arr[i])        }    }    return result}unique([1, 2, 3, 4, 3, 2, ‘a’, ‘b’, ‘a’]);</td></tr></tbody></table><p>这种方法有两个特色：</p><ul><li>去重后的数组会做排序，主要是因为原数在去重前做了排序</li><li>去重后的数组，与数字相同的数字字符无法区分，比如‘1’和1</li></ul><h4 id="对象键值对法"><a href="#对象键值对法" class="headerlink" title="对象键值对法"></a><a href="#_16"></a>对象键值对法</h4><p>思路：</p><ul><li>创建一个 js 对象及新数组</li><li>遍历原数组，每次取出一个元素与 js 对象的键作对比</li><li>如果不包含，将存入对象的元素的值推入到结果数组中，并将 object 对象中该属性名的值设为1</li></ul><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>123456789101112131415</td><td>function unique(arr) {    var result &#x3D; []    var object &#x3D; {}    for (var i &#x3D; 0; i &lt; arr.length; i++) {        if (!object[typeof(arr[i]) + arr[i]]) {  &#x2F;&#x2F;键名里加入typeof(arr[i])是为了区别不同类型的值，如1和`1`            result.push(arr[i])            object[typeof(arr[i]) + arr[i]] &#x3D; 1        }    }    return result}unique([1, 2, 3, 4, 3, 2, ‘1’, ‘a’, ‘b’, ‘a’]);&#x2F;&#x2F;[1, 2, 3, 4, “a”, “b”]</td></tr></tbody></table><p>这种方法比较耗内存，但运行下来耗时最少，是较为优秀的方案。</p><h4 id="使用-ES6-的-Set-和-Map-方法"><a href="#使用-ES6-的-Set-和-Map-方法" class="headerlink" title="使用 ES6 的 Set 和 Map 方法"></a><a href="#es6-set-map"></a>使用 ES6 的 Set 和 Map 方法</h4><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>123456789101112131415</td><td>&#x2F;&#x2F;借助 Map 数据结构function unique(arr) {    const seen &#x3D; new Map()    return arr.filter((v)&#x3D;&gt; !seen.has(v) &amp;&amp; seen.set(v, 1));} &#x2F;&#x2F;借助 Set 数据结构function unique(arr) {    return Array.from(new Set(arr)) &#x2F;&#x2F;或 return […new Set(arr)]} unique([1, 2, 3, 4, 3, 2, ‘1’, ‘a’, ‘b’, ‘a’]);&#x2F;&#x2F;[1, 2, 3, 4, “1”, “a”, “b”]</td></tr></tbody></table><hr><h3 id="数组随机排序"><a href="#数组随机排序" class="headerlink" title="数组随机排序"></a><a href="#_17"></a>数组随机排序</h3><h4 id="递归的方法"><a href="#递归的方法" class="headerlink" title="递归的方法"></a><a href="#_18"></a>递归的方法</h4><p>思路：<br>不断从原数组中随机取一个元素放进新数组，同时删除原数组中该值，递归重复至全部取出。</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>1234567891011121314151617</td><td>function randomSort(arr, newArr) {    var newArr &#x3D; newArr || []    if (arr.length &#x3D;&#x3D; 1) {        newArr.push(arr[0])        return newArr; &#x2F;&#x2F; 相当于递归退出    }     var random &#x3D; Math.ceil(Math.random() * arr.length) - 1    newArr.push(arr[random])    arr.splice(random, 1)     return randomSort(arr, newArr)}randomSort([1, 2, 3, 4, 5, 6, 7]); &#x2F;&#x2F;[2, 3, 1, 5, 6, 7, 4]randomSort([1, 2, 3, 4, 5, 6, 7]); &#x2F;&#x2F;[3, 4, 2, 5, 1, 6, 7]</td></tr></tbody></table><h4 id="使用数组-sort-方法对数组元素随机排序（效果不佳）"><a href="#使用数组-sort-方法对数组元素随机排序（效果不佳）" class="headerlink" title="使用数组 sort 方法对数组元素随机排序（效果不佳）"></a><a href="#sort"></a>使用数组 sort 方法对数组元素随机排序（效果不佳）</h4><p>思路：<br>使用<code>srot()</code>每次比较时返回一个随机值，让数组内元素依次前后随机排序</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>1234567891011</td><td>Array.prototype.shuffle &#x3D; function(n) {    var len &#x3D; this.length, num &#x3D; n ? Math.min(n, len) : len, arr &#x3D; this.slice(0)    arr.sort(function(a, b){        return Math.random() - 0.5    })    return arr.slice(0, num)}[1, 2, 3, 4, 5, 6, 7].shuffle()&#x2F;&#x2F;[1, 4, 2, 5, 6, 3, 7]</td></tr></tbody></table><p>这个方法虽然实现了随机排序，但由于<code>sort()</code>方法是依次比较的，所以每个元素被随机到原位置后面的概率会越来越低。</p><h4 id="随机交换数组内的元素-原理from-underscore-js）"><a href="#随机交换数组内的元素-原理from-underscore-js）" class="headerlink" title="随机交换数组内的元素 (原理from underscore.js）"></a><a href="#from-underscorejs"></a>随机交换数组内的元素 (原理from underscore.js）</h4><p>思路：<br>遍历数组，每次从i位置后元素随机挑一个放到i位置，将原i位置元素放至被挑元素原位置</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>1234567891011121314</td><td>Array.prototype.shuffle &#x3D; function() {    var len &#x3D; this.length,        arr &#x3D; this.slice(0),        temp, index;    for (var i &#x3D; 0; i &lt; len; i++) {        index &#x3D; i + Math.floor(Math.random() * (len - i))        temp &#x3D; arr[i]        arr[i] &#x3D; arr[index]        arr[index] &#x3D; temp    }    return arr.slice(0)}</td></tr></tbody></table><h4 id="随机从原数组抽取一个元素-加入到新数组"><a href="#随机从原数组抽取一个元素-加入到新数组" class="headerlink" title="随机从原数组抽取一个元素,加入到新数组"></a><a href="#_19"></a>随机从原数组抽取一个元素,加入到新数组</h4><p>思路：<br>遍历数组，每次从数组中随机挑一个元素（随机数最大值为原数组剩余长度），将该元素拿出来放入新数组。</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>12345678910111213141516</td><td>Array.prototype.shuffle &#x3D; function() {    var len &#x3D; this.length,        arr &#x3D; this.slice(0),        result &#x3D; [],        index;    for (var i &#x3D; 0; i &lt; len; i++) {        index &#x3D; Math.floor(Math.random() * (len - i))        console.log(index)        result.push(arr.splice(index, 1)[0])    }    return result}[1, 2, 3, 4, 5, 6, 7].shuffle()&#x2F;&#x2F;[5, 3, 2, 1, 7, 4, 6]</td></tr></tbody></table><hr><h3 id="取数组中最大值最小值"><a href="#取数组中最大值最小值" class="headerlink" title="取数组中最大值最小值"></a><a href="#_20"></a>取数组中最大值最小值</h3><h4 id="遍历比较方法"><a href="#遍历比较方法" class="headerlink" title="遍历比较方法"></a><a href="#_21"></a>遍历比较方法</h4><p>思路：</p><ul><li>设一个变量存放最大值，将数组中第一个值赋值给该变量</li><li>遍历数组与最大值变量比较，如果大于最大值，则将该值赋值最大值变量</li><li>遍历结束后，变量里储存的就是数组里的最大值</li></ul><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>12345678910</td><td>Array.prototype.max &#x3D; function() {    var max &#x3D; this[0]    this.forEach(function(v) {        if (v &gt; max) {max &#x3D; v}    })    return max}[1,45,23,3,6,2,7,234,56].max() &#x2F;&#x2F; 234</td></tr></tbody></table><h4 id="归并比较方法"><a href="#归并比较方法" class="headerlink" title="归并比较方法"></a><a href="#_22"></a>归并比较方法</h4><p>思路：</p><ul><li>使用数组实例的 reduce(function(prev, curv, index, arr)) 方法</li><li>依次比较回调函数中参数 prev 与 curv 的大小，返回大的那个</li></ul><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>12345678</td><td>Array.prototype.max &#x3D; function() {    return this.reduce(function(prev, curv) {        return prev &gt; curv ? prev : curv    })}[1,45,23,3,6,2,7,234,56].max() &#x2F;&#x2F; 234</td></tr></tbody></table><h4 id="利用-Math-max-与-Math-min-方法"><a href="#利用-Math-max-与-Math-min-方法" class="headerlink" title="利用 Math.max() 与 Math.min() 方法"></a><a href="#mathmax-mathmin"></a>利用 Math.max() 与 Math.min() 方法</h4><p>思路：<br>将数组转换成参数传进<code>Math.max()</code>或<code>Math.min()</code>。</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>123456</td><td>Array.prototype.max &#x3D; function() {    return Math.max.apply({},this) &#x2F;&#x2F;或 return Math.max(…this)}[1,45,23,3,6,2,7,234,56].max() &#x2F;&#x2F; 234</td></tr></tbody></table><hr><h3 id="将一个数按大小顺序插入数组并返回索引值"><a href="#将一个数按大小顺序插入数组并返回索引值" class="headerlink" title="将一个数按大小顺序插入数组并返回索引值"></a><a href="#_23"></a>将一个数按大小顺序插入数组并返回索引值</h3><p>任务：<br>构建一个函数where(arr, num)，函数接受两个参数，一个是数组arr，一个是要插进数组的数字num，函数将num按大小顺序插进arr，并返回num的索引值。例如：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>12345</td><td>where([1,2,3,4], 1.5) &#x2F;&#x2F;1where([20,3,5],19) &#x2F;&#x2F;2where([40,60],50) &#x2F;&#x2F;1</td></tr></tbody></table><h4 id="使用-push-sort-indexOf-方法"><a href="#使用-push-sort-indexOf-方法" class="headerlink" title="使用 push + sort + indexOf 方法"></a><a href="#push-sort-indexof"></a>使用 push + sort + indexOf 方法</h4><p>思路：</p><ul><li>通过<code>push()</code>或<code>unshift()</code>方法将 num 插入 arr</li><li>使用<code>sort()</code>对 arr 进行排序</li><li>使用<code>indexOf()</code>找出 num 在 arr 中的 index（或使用for、forEach、some循环）</li><li>返回 index</li></ul><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>123456789101112</td><td>function where(arr, num) {    arr.push(num)    arr.sort(function(a,b){        return a - b    })     return arr.indexOf(num)}var a &#x3D; [1,2,3,4]where(a, 1,5) &#x2F;&#x2F;1, a &#x3D; [1,1.5,2,3,4]</td></tr></tbody></table><p>或者：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>12345678910111213141516171819</td><td>function where(arr, num) {    arr.push(num)    arr.sort(function(a,b){        return a - b    })     var index;    arr.some(function(v,i) {        if(v &#x3D;&#x3D;&#x3D; num) {            index &#x3D; i            return true        }    })    return index}var a &#x3D; [1,2,3,4]where(a, 1,5) &#x2F;&#x2F;1, a &#x3D; [1,1.5,2,3,4]</td></tr></tbody></table><h4 id="使用-sort-findIndex-splice-方法"><a href="#使用-sort-findIndex-splice-方法" class="headerlink" title="使用 sort + findIndex + splice 方法"></a><a href="#sort-findindex-splice"></a>使用 sort + findIndex + splice 方法</h4><p>思路：</p><ul><li>使用<code>sort()</code>对 arr 进行排序</li><li>使用 findIndex() 找出 arr 中第一个大于 num 的元素的位置</li><li>使用 <code>splice()</code> 将 num 插入该元素前</li></ul><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>1234567891011</td><td>function where(arr, num) {    arr.sort((a,b) &#x3D;&gt; a-b)    const index &#x3D; arr.findIndex(v &#x3D;&gt; v &gt; num)    arr.splice(index,0,num)    return index} var a &#x3D; [1,2,3,4]where(a, 1,5) &#x2F;&#x2F;1, a &#x3D; [1,1.5,2,3,4]</td></tr></tbody></table><hr><h3 id="从数组中寻找元素并删除元素"><a href="#从数组中寻找元素并删除元素" class="headerlink" title="从数组中寻找元素并删除元素"></a><a href="#_24"></a>从数组中寻找元素并删除元素</h3><p>任务：<br>构建一个函数destroyer(arr, item…)，传入数组与要删除的指定值，返回删除指定值后的数组，例如：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>123</td><td>destroyer([1,2,3,4,1,3,2],1,2) &#x2F;&#x2F;[3,4,3]</td></tr></tbody></table><h4 id="arguments-indexOf-filter-遍历判断法"><a href="#arguments-indexOf-filter-遍历判断法" class="headerlink" title="arguments + indexOf + filter 遍历判断法"></a><a href="#arguments-indexof-filter"></a>arguments + indexOf + filter 遍历判断法</h4><p>思路：</p><ul><li>通过 arguements 对象分别获取到数组 arr 和指定要删除的元素，将指定元素转换成数组 removeArgs</li><li>使用<code>filter()</code>筛选出 arr 内与 removeArgs 内不相同的元素，筛选规则通过<code>indexOf()</code>方法判断</li></ul><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>123456789101112131415161718</td><td>function destroyer(para) {    var arr &#x3D; arguments[0]    var removeArgs &#x3D; []     for(var i &#x3D; 1; i &lt; arguments.length; i++) {        removeArgs.push(arguments[i])    }     var isFalse &#x3D; function(v) {        return removeArgs.indexOf(v) &#x3D;&#x3D;&#x3D; -1    }     return arr.filter(isFalse)} destroyer([1,2,3,4,1,3,2],1,2) &#x2F;&#x2F;[3,4,3]</td></tr></tbody></table><h4 id="slice-或解构运算符-es6-set-filter-方法"><a href="#slice-或解构运算符-es6-set-filter-方法" class="headerlink" title="slice(或解构运算符) + es6 set + filter 方法"></a><a href="#slice-es6-set-filter"></a>slice(或解构运算符) + es6 set + filter 方法</h4><p>思路：</p><ul><li>利用<code>call()</code>对 arguments 使用数组的<code>slice()</code>分别获取到原数组和指定值</li><li>将指定值传进 new Set 对象</li><li>使用<code>filter()</code>筛选出 arr 内与 set 对象内不相同的元素，筛选规则通过 set 对象的<code>has()</code>方法判断</li></ul><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>1234567</td><td>function destroyer(para) {    var removeArgs &#x3D; new Set(Array.prototype.slice.call(arguments, 1))    return para.filter(v &#x3D;&gt; !removeArgs.has(v))}destroyer([1,2,3,4,1,3,2],1,2) &#x2F;&#x2F;[3,4,3]</td></tr></tbody></table><p>也可以写成：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>1234567</td><td>function destroyer(arr, …items) {    var removeArgs &#x3D; new Set(items)    return arr.filter(v &#x3D;&gt; !removeArgs.has(v))}destroyer([1,2,3,4,1,3,2],1,2) &#x2F;&#x2F;[3,4,3]</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解析gsb代码</title>
      <link href="/2025/02/15/jie-xi-gsb-dai-ma/"/>
      <url>/2025/02/15/jie-xi-gsb-dai-ma/</url>
      
        <content type="html"><![CDATA[<h3 id="码海无涯系列，写给自己的注释"><a href="#码海无涯系列，写给自己的注释" class="headerlink" title="码海无涯系列，写给自己的注释"></a>码海无涯系列，写给自己的注释</h3><h1 id="解析gsb代码"><a href="#解析gsb代码" class="headerlink" title="解析gsb代码"></a>解析gsb代码</h1><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 以本站 url 来看，不需要配合使用 带查询参数的 nginx 伪静态代码：rewrite /gsb/(.*) /gsb.html?file=$1 last;</span><span class="token comment">// 只需要使用 rewrite /gsb/(.*) /gsb.html last;</span>    <span class="token keyword">function</span> <span class="token function">getQueryString</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 从下面的用法中看出，传值字符串“id”,并连接为正则 : (^|&amp;)id=([^&amp;]*)(&amp;|$)</span>        <span class="token comment">// 该正则意思为：^: 匹配字符串的开头。|: 或的意思，表示匹配前面的或后面的。&amp;: 匹配&amp;符号。整体的意思是：匹配字符串的开头或者一个&amp;符号，表示"id"参数可能出现在字符串的开头或其他参数之后。</span>        <span class="token comment">// id=:直接匹配字符串"id="</span>        <span class="token comment">// ([^&amp;]*):</span>        <span class="token comment">// (): 捕获组，用于提取匹配到的子字符串。</span>        <span class="token comment">// []: 字符类，表示匹配中括号内的任意一个字符。</span>        <span class="token comment">// ^: 在字符类中表示取反，即匹配除了中括号内字符的所有字符。</span>        <span class="token comment">// &amp;: 匹配&amp;符号。</span>        <span class="token comment">// *: 匹配前面的子表达式零次或多次。</span>        <span class="token comment">// 整体的意思是：匹配0个或多个非&amp;字符，也就是匹配"id"参数的值。</span>                <span class="token comment">// &amp;|$:</span>        <span class="token comment">// &amp;: 匹配&amp;符号。</span>        <span class="token comment">// |: 或的意思。</span>        <span class="token comment">// $: 匹配字符串的结尾。</span>        <span class="token comment">// 整体的意思是：匹配一个&amp;符号或字符串的结尾，表示"id"参数可能是最后一个参数或后面还有其他参数</span>        <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'(^|&amp;)'</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'=([^&amp;]*)(&amp;|$)'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'reg是'</span><span class="token operator">+</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 声明 r 是：从URL中获取的参数,并匹配上方的正则</span>        <span class="token comment">// 从本站点的 URL来看(主域名/gsb/数字.html)，该函数是没用的，因为没有参数，所以变量r是undefined或null</span>        <span class="token comment">// 该函数适用于查找带有“id”的字符串，</span>        <span class="token keyword">var</span> r <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'r是'</span><span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// unescape()，该方法解码escape()的编码，已废弃，且这里没有使用过escape编码，属实难蚌</span>            <span class="token keyword">return</span> <span class="token function">unescape</span><span class="token punctuation">(</span>r<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>            <span class="token comment">// 声明 pageId为 当前 URL 的路径名+一个空，+""实在是多余的</span>    <span class="token comment">// 从本站点的 URL来看(主域名/gsb/数字.html)，pageId是：/gsb/数字.html</span>    <span class="token keyword">var</span> pageId <span class="token operator">=</span> location<span class="token punctuation">.</span>pathname <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'pageId是'</span> <span class="token operator">+</span> pageId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 没用的代码</span>    <span class="token keyword">var</span> demoId <span class="token operator">=</span> <span class="token function">getQueryString</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'demoId是'</span> <span class="token operator">+</span> demoId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 没用的代码</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>demoId <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> demoId <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        pageId <span class="token operator">=</span> demoId<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 把 pageId 值传入本行代码，返回一个这里用了ByName, 比较少用的方法，且写法有问题，应该写成document.getElementsByName(pageId)[0].style.display = 'block';</span>        <span class="token comment">//  getElementsByName() 返回的是一个节点列表</span>        <span class="token comment">// 如果要保留该节点的其他样式，这应写为：如果需要保留其他样式document.getElementsByName(pageId)[0].style.setProperty('display', 'block');</span>    document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span>pageId<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 码海无涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> CSS </tag>
            
            <tag> 码海无涯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS点击获取DOM节点</title>
      <link href="/2024/12/08/js-dian-ji-huo-qu-dom-jie-dian/"/>
      <url>/2024/12/08/js-dian-ji-huo-qu-dom-jie-dian/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>style<span class="token operator">></span>@<span class="token keyword">import</span> <span class="token function">url</span><span class="token punctuation">(</span><span class="token string">"https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;700&amp;display=swap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">margin</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>box<span class="token operator">-</span>sizing<span class="token operator">:</span> border<span class="token operator">-</span>box<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>body <span class="token punctuation">&#123;</span><span class="token literal-property property">height</span><span class="token operator">:</span> 100vh<span class="token punctuation">;</span><span class="token literal-property property">display</span><span class="token operator">:</span> flex<span class="token punctuation">;</span>flex<span class="token operator">-</span>direction<span class="token operator">:</span> column<span class="token punctuation">;</span>justify<span class="token operator">-</span>content<span class="token operator">:</span> center<span class="token punctuation">;</span>align<span class="token operator">-</span>items<span class="token operator">:</span> center<span class="token punctuation">;</span><span class="token literal-property property">color</span><span class="token operator">:</span> #<span class="token number">303030</span><span class="token punctuation">;</span><span class="token literal-property property">background</span><span class="token operator">:</span> #f0f0f0<span class="token punctuation">;</span>font<span class="token operator">-</span>family<span class="token operator">:</span> <span class="token string">"Montserrat"</span><span class="token punctuation">,</span> sans<span class="token operator">-</span>serif<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>selector <span class="token punctuation">&#123;</span>margin<span class="token operator">-</span>bottom<span class="token operator">:</span> 30px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>article <span class="token punctuation">&#123;</span><span class="token literal-property property">width</span><span class="token operator">:</span> 250px<span class="token punctuation">;</span><span class="token literal-property property">background</span><span class="token operator">:</span> #fefefe<span class="token punctuation">;</span>border<span class="token operator">-</span>radius<span class="token operator">:</span> 5px<span class="token punctuation">;</span><span class="token literal-property property">overflow</span><span class="token operator">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>figure <span class="token punctuation">&#123;</span><span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span><span class="token literal-property property">height</span><span class="token operator">:</span> 150px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>figure img <span class="token punctuation">&#123;</span><span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span><span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>object<span class="token operator">-</span>fit<span class="token operator">:</span> cover<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>article<span class="token operator">-</span>body <span class="token punctuation">&#123;</span><span class="token literal-property property">padding</span><span class="token operator">:</span> 15px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>article<span class="token operator">-</span>title <span class="token punctuation">&#123;</span>text<span class="token operator">-</span>transform<span class="token operator">:</span> uppercase<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>article<span class="token operator">-</span>text <span class="token punctuation">&#123;</span><span class="token literal-property property">margin</span><span class="token operator">:</span> 15px <span class="token number">0</span> 30px<span class="token punctuation">;</span>font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">.</span>85rem<span class="token punctuation">;</span>line<span class="token operator">-</span>height<span class="token operator">:</span> <span class="token number">1.5</span><span class="token punctuation">;</span>letter<span class="token operator">-</span>spacing<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">.</span>25px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>button <span class="token punctuation">&#123;</span><span class="token literal-property property">appearance</span><span class="token operator">:</span> none<span class="token punctuation">;</span><span class="token literal-property property">outline</span><span class="token operator">:</span> none<span class="token punctuation">;</span><span class="token literal-property property">border</span><span class="token operator">:</span> none<span class="token punctuation">;</span><span class="token literal-property property">padding</span><span class="token operator">:</span> 8px 12px<span class="token punctuation">;</span><span class="token literal-property property">background</span><span class="token operator">:</span> blueviolet<span class="token punctuation">;</span><span class="token literal-property property">color</span><span class="token operator">:</span> #fefefe<span class="token punctuation">;</span>font<span class="token operator">-</span>family<span class="token operator">:</span> <span class="token string">"Montserrat"</span><span class="token punctuation">,</span> sans<span class="token operator">-</span>serif<span class="token punctuation">;</span>font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">.</span>75rem<span class="token punctuation">;</span>font<span class="token operator">-</span>weight<span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">;</span>text<span class="token operator">-</span>transform<span class="token operator">:</span> uppercase<span class="token punctuation">;</span>letter<span class="token operator">-</span>spacing<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">.</span>3px<span class="token punctuation">;</span>border<span class="token operator">-</span>radius<span class="token operator">:</span> 3px<span class="token punctuation">;</span><span class="token literal-property property">cursor</span><span class="token operator">:</span> pointer<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"selector"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>article<span class="token operator">></span><span class="token operator">&lt;</span>figure <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"figure"</span><span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"https://images.unsplash.com/photo-1547082299-de196ea013d6?ixid=MXwxMjA3fDB8MHxzZWFyY2h8MTd8fGNvbXB1dGVyfGVufDB8fDB8&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=500&amp;q=60"</span>alt<span class="token operator">=</span><span class="token string">"Article-Image"</span><span class="token operator">></span><span class="token operator">&lt;</span>figcaption <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"figure-caption"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>figcaption<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>figure<span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"article-body"</span><span class="token operator">></span><span class="token operator">&lt;</span>h2 <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"article-title"</span><span class="token operator">></span><span class="token constant">TITLE</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"article-text"</span><span class="token operator">></span>Lorem ipsum dolor sit amet consectetur adipisicing elit<span class="token punctuation">.</span> Iure nemo incidunt<span class="token punctuation">,</span> similiqueblanditiis <span class="token keyword">in</span> quidem<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn"</span> type<span class="token operator">=</span><span class="token string">"button"</span><span class="token operator">></span><span class="token constant">READ</span> <span class="token constant">MORE</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>article<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">function</span> <span class="token function">generateSelector</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">let</span> index<span class="token punctuation">,</span> pathSelector<span class="token punctuation">,</span> localName<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">==</span> <span class="token string">"null"</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token string">"not an dom reference"</span><span class="token punctuation">;</span><span class="token comment">// call getIndex function</span>index <span class="token operator">=</span> <span class="token function">getIndex</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>tagName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// selector path</span>pathSelector <span class="token operator">=</span> context<span class="token punctuation">.</span>localName <span class="token operator">+</span> <span class="token punctuation">(</span>pathSelector <span class="token operator">?</span> <span class="token string">">"</span> <span class="token operator">+</span> pathSelector <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>context <span class="token operator">=</span> context<span class="token punctuation">.</span>parentNode<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// selector path for nth of type</span>pathSelector <span class="token operator">=</span> pathSelector <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">:nth-of-type(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>index<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token keyword">return</span> pathSelector<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// get index for nth of type element</span><span class="token keyword">function</span> <span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">let</span> tagName <span class="token operator">=</span> node<span class="token punctuation">.</span>tagName<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>previousSibling<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>node <span class="token operator">=</span> node<span class="token punctuation">.</span>previousSibling<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span>tagName<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> node<span class="token punctuation">.</span>tagName<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// load document</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"DOMContentLoaded"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token comment">// click on element to get output</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">let</span> selector <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".selector"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// selector output</span><span class="token keyword">let</span> output <span class="token operator">=</span> <span class="token function">generateSelector</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>selector<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;strong>Selector:&lt;/strong> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>output<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token comment">// element that you select</span><span class="token keyword">let</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Selected Element:"</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo常用命令详解及使用方法</title>
      <link href="/2024/11/24/hexo-chang-yong-ming-ling-xiang-jie-ji-shi-yong-fang-fa/"/>
      <url>/2024/11/24/hexo-chang-yong-ming-ling-xiang-jie-ji-shi-yong-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo常用命令详解及使用方法"><a href="#Hexo常用命令详解及使用方法" class="headerlink" title="Hexo常用命令详解及使用方法"></a>Hexo常用命令详解及使用方法</h1><p>Hexo是基于Node.js的静态网站生成框架，使用Hexo可以快速创建个人博客，Hexo常用命令有助于日常博客管理，码笔记分享Hexo常用命令详解及使用方法：</p><h2 id="Hexo常用命令详解及使用方法-1"><a href="#Hexo常用命令详解及使用方法-1" class="headerlink" title="Hexo常用命令详解及使用方法"></a>Hexo常用命令详解及使用方法</h2><h3 id="hexo-init"><a href="#hexo-init" class="headerlink" title="hexo init"></a>hexo init</h3><ul><li><code>hexo init</code>命令用于初始化本地文件夹为网站的根目录</li></ul><p>语法：</p><pre class="line-numbers language-none"><code class="language-none">$ hexo init [folder]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数说明：</p><blockquote><p>folder 可选参数，用以指定初始化目录的路径，若无指定则默认为当前目录</p></blockquote><h3 id="hexo-new"><a href="#hexo-new" class="headerlink" title="hexo new"></a>hexo new</h3><ul><li><code>hexo new</code>命令用于新建文章，可以简写为<code>hexo n</code></li></ul><p>语法：</p><pre class="line-numbers language-none"><code class="language-none">$ hexo new [layout] &lt;title&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数说明：</p><blockquote><p>layout：可选参数，用以指定文章类型，若无指定则默认由配置文件中的 default_layout选项决定<br>title：必填参数，用以指定文章标题，如果参数值中含有空格，则需要使用双引号包围</p></blockquote><h3 id="hexo-generate"><a href="#hexo-generate" class="headerlink" title="hexo generate"></a>hexo generate</h3><ul><li><code>hexo generate</code>命令用于生成静态文件，可以简写为 <code>hexo g</code></li></ul><p>语法：</p><pre class="line-numbers language-none"><code class="language-none">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数说明：</p><blockquote><p>-d 选项，指定生成后部署<br>-w选项，监视文件变动<br>-b选项，生成过程中如果发生任何未处理的异常则抛出异常<br>-f选项，强制重新生成文件<br>-c选项，最大同时生成文件的数量，默认无限制</p></blockquote><h3 id="hexo-publish"><a href="#hexo-publish" class="headerlink" title="hexo publish"></a>hexo publish</h3><p>语法：</p><pre class="line-numbers language-none"><code class="language-none">$ hexo publish [layout] &lt;filename&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发表草稿。</p><h3 id="hexo-server"><a href="#hexo-server" class="headerlink" title="hexo server"></a>hexo server</h3><ul><li><code>hexo server</code>命令用于启动本地服务器，一般可以简写为<code>hexo s</code></li></ul><p>启动服务器，默认情况下，访问网址为： http:&#x2F;&#x2F;localhost:4000&#x2F;<br>参数说明：</p><blockquote><p>-p选项，重设端口<br>-s选项，只使用静态文件<br>-l选项，启动日记记录，使用覆盖记录格式</p></blockquote><h3 id="hexo-deploy"><a href="#hexo-deploy" class="headerlink" title="hexo deploy"></a>hexo deploy</h3><ul><li><code>hexo deploy</code>命令用于部署网站，简写为<code>hexo d</code></li></ul><p>语法：</p><pre class="line-numbers language-none"><code class="language-none">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数说明</p><blockquote><p>-g选项，部署之前预先生成静态文件</p></blockquote><h3 id="hexo-render"><a href="#hexo-render" class="headerlink" title="hexo render"></a>hexo render</h3><ul><li><code>hexo render</code>用户渲染文件</li></ul><p>语法：</p><pre class="line-numbers language-none"><code class="language-none">$ hexo render &lt;file1&gt; [file2] ...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数说明：</p><blockquote><p>-o选项，设置输出路径</p></blockquote><h3 id="hexo-migrate"><a href="#hexo-migrate" class="headerlink" title="hexo migrate"></a>hexo migrate</h3><ul><li><code>hexo migrate</code>命令用于从其他博客系统 迁移内容。</li></ul><p>语法：</p><pre class="line-numbers language-none"><code class="language-none">$ hexo migrate &lt;type&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="hexo-clean"><a href="#hexo-clean" class="headerlink" title="hexo clean"></a>hexo clean</h3><ul><li><code>hexo clean</code>命令用于清除缓存文件（db.json）和已生成的静态文件（public）。</li></ul><p>例如：在更换主题后，如果发现站点更改不生效，可以运行该命令。</p><h3 id="hexo-list"><a href="#hexo-list" class="headerlink" title="hexo list"></a>hexo list</h3><ul><li><code>hexo list</code>命令用于列出网站资料</li></ul><h3 id="hexo-version"><a href="#hexo-version" class="headerlink" title="hexo version"></a>hexo version</h3><ul><li><code>hexo version</code>命令显示hexo版本</li></ul><h2 id="Option（选项）"><a href="#Option（选项）" class="headerlink" title="Option（选项）"></a>Option（选项）</h2><h3 id="hexo-–safe"><a href="#hexo-–safe" class="headerlink" title="hexo –safe"></a>hexo –safe</h3><ul><li><code>hexo --safe</code>命令表示安全模式，用于禁用加载插件和脚本，安装新插件遭遇问题时，可以尝试以安全模式重新执行</li></ul><h3 id="hexo-–debug"><a href="#hexo-–debug" class="headerlink" title="hexo –debug"></a>hexo –debug</h3><ul><li><code>hexo --debug</code>命令进入调试模式，在终端中显示调试信息并记录到debug.log</li></ul><h3 id="hexo-–silent"><a href="#hexo-–silent" class="headerlink" title="hexo –silent"></a>hexo –silent</h3><ul><li><code>hexo --silent</code>简洁模式，隐藏终端信息。</li></ul><h3 id="hexo-–draft"><a href="#hexo-–draft" class="headerlink" title="hexo –draft"></a>hexo –draft</h3><ul><li><code>hexo --draft</code>命令，显示source&#x2F;_drafts文件夹中的草稿文章</li></ul><h3 id="hexo-–cwd"><a href="#hexo-–cwd" class="headerlink" title="hexo –cwd"></a>hexo –cwd</h3><ul><li><code>hexo --cwd</code>自定义当前工作目录（Current working directory）的路径。</li></ul><p>语法：</p><pre class="line-numbers language-none"><code class="language-none">$ hexo --cwd &#x2F;path&#x2F;to&#x2F;cwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新大霹雳·直捣炼魔狱·封底·傲笑红尘·像</title>
      <link href="/2024/11/24/xin-da-pi-li-zhi-dao-lian-mo-yu-feng-di-ao-xiao-hong-chen-xiang/"/>
      <url>/2024/11/24/xin-da-pi-li-zhi-dao-lian-mo-yu-feng-di-ao-xiao-hong-chen-xiang/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/5soros/aoXiaoHongChen1/refs/heads/main/50beec1f96413db6aaf5aa5499741cb4.jfif" alt="郑问·绘制" title="傲笑红尘持剑像"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 傲笑红尘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>unicode-and-javascript/</title>
      <link href="/2024/10/22/unicode-yu-javascript/"/>
      <url>/2024/10/22/unicode-yu-javascript/</url>
      
        <content type="html"><![CDATA[<h1 id="ES5-中的字符操作"><a href="#ES5-中的字符操作" class="headerlink" title="ES5 中的字符操作"></a>ES5 中的字符操作</h1><p>es5 中提供了一些跟字符相关的操作，在某些需要精细化处理字符串的场所可能有帮助哦哦哦哦哦哦。</p><h2 id="字符转义"><a href="#字符转义" class="headerlink" title="字符转义"></a><a href="#%E5%AD%97%E7%AC%A6%E8%BD%AC%E4%B9%89" title="字符转义"></a>字符转义</h2><p>可以使用<code>\u</code>来转义各种十六进制数为相应字符：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>&#96;&#96;&#96;</td><td></td></tr><tr><td>1</td><td></td></tr><tr><td>2</td><td></td></tr><tr><td>3</td><td></td></tr><tr><td>4</td><td></td></tr><tr><td>&#96;&#96;&#96;</td><td>&#96;&#96;&#96;</td></tr><tr><td>‘\u0041’; &#x2F;&#x2F; A</td><td></td></tr><tr><td>‘\u0061’; &#x2F;&#x2F; a</td><td></td></tr><tr><td>‘\u4E25’; &#x2F;&#x2F; 严</td><td></td></tr><tr><td>‘\u2603’; &#x2F;&#x2F; ☃</td><td></td></tr></tbody></table><pre class="line-numbers language-|" data-language="|"><code class="language-|">## [](#fromCharCode、charCodeAt、charAt、length &quot;fromCharCode、charCodeAt、charAt、length&quot;)fromCharCode、charCodeAt、charAt、length1. &#96;String.fromCharcode&#96; - 可以基于『代码点』创建字符串，暂时可以把『代码点』理解为就是一串十六进制数   |             |                                                                             |   | ----------- | --------------------------------------------------------------------------- |   | &#96;&#96;&#96;   1   2   &#96;&#96;&#96; | &#96;&#96;&#96;   String.fromCharCode(0x0041); &#x2F;&#x2F; A   String.fromCharCode(0x4e25); &#x2F;&#x2F; 严   &#96;&#96;&#96; |2. &#96;String.prototype.charAt(position)&#96; 获取字符串在特定位置的字符   |             |                                                       |   | ----------- | ----------------------------------------------------- |   | &#96;&#96;&#96;   1   2   &#96;&#96;&#96; | &#96;&#96;&#96;   &#39;ABCDE&#39;.charAt(2); &#x2F;&#x2F; C   &#39;万几皮&#39;.charAt(2); &#x2F;&#x2F; 皮   &#96;&#96;&#96; |3. &#96;String.prototype.charCodeAt(position)&#96;，与&#96;charAt&#96;类似，只不过是获取在特定位置的那个字符的『代码点』。同时可以很容易看出来这个方法是&#96;fromCharCode&#96;的反向操作。   |                   |                                                                                                                                                               |   | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- |   | &#96;&#96;&#96;   1   2   3   4   5   &#96;&#96;&#96; | &#96;&#96;&#96;   &#39;ABCDE&#39;.charCodeAt(2).toString(16); &#x2F;&#x2F; 0x0043   &#39;万几皮&#39;.charCodeAt(2).toString(16); &#x2F;&#x2F; 0x76AE   &#x2F;&#x2F; 验证反向操作   String.fromCharCode(&#39;万几皮&#39;.charCodeAt(2)); &#x2F;&#x2F; &quot;皮&quot;   &#96;&#96;&#96; |4. &#96;length&#96;属性很熟悉了，就是计算长度呗   |             |                                                 |   | ----------- | ----------------------------------------------- |   | &#96;&#96;&#96;   1   2   &#96;&#96;&#96; | &#96;&#96;&#96;   &#39;ABCDE&#39;.length; &#x2F;&#x2F; 5   &#39;万几皮&#39;.length; &#x2F;&#x2F; 3   &#96;&#96;&#96; |# [](#遇到-Unicode-字符时遇到的问题 &quot;遇到 Unicode 字符时遇到的问题&quot;)遇到 Unicode 字符时遇到的问题到目前为准都没什么问题，配合&#96;String.prototype&#96;上的各种工具方法，可以处理各种各样常见字符串操作。不过随着&#96;emoji&#96;表情的盛行，慢慢就会发现已有的工具出现各种各样的问题。## [](#fromCharCode、charCodeAt-的反向操作 &quot;fromCharCode、charCodeAt 的反向操作&quot;)fromCharCode、charCodeAt 的反向操作先看看上面的反向操作还能不能工作：|           |                                                         || --------- | ------------------------------------------------------- || &#96;&#96;&#96;1&#96;&#96;&#96; | &#96;&#96;&#96;String.fromCharCode(&#39;💩&#39;.charCodeAt(0)); &#x2F;&#x2F; &quot;�&quot;&#96;&#96;&#96; |结果是乱码？？？那么再看看&#96;length&#96;：|           |                           || --------- | ------------------------- || &#96;&#96;&#96;1&#96;&#96;&#96; | &#96;&#96;&#96;&#39;💩&#39;.length; &#x2F;&#x2F; 2&#96;&#96;&#96; |因吹丝停，看来遇到了一些奇怪的问题，如果继续尝试，可以发现一些其他的『BUG』：## [](#翻转字符串 &quot;翻转字符串&quot;)翻转字符串翻转字符串可能是一个比较常见的字符串操作，通常可能有一个如下的工具函数：|                           |                                                                                                                                                || ------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------- || &#96;&#96;&#96;123456789&#96;&#96;&#96; | &#96;&#96;&#96;function reverse(str) &#123;  return str    .split(&#39;&#39;)    .reverse()    .join(&#39;&#39;);&#125;reverse(&#39;abc&#39;); &#x2F;&#x2F; &#39;cba&#39;reverse(&#39;万几皮&#39;); &#x2F;&#x2F; &quot;皮几万&quot;&#96;&#96;&#96; |如果用来操作表情呢？|             |                                || ----------- | ------------------------------ || &#96;&#96;&#96;12&#96;&#96;&#96; | &#96;&#96;&#96;reverse(&#39;💩&#39;);(&#39;��&#39;);&#96;&#96;&#96; |感觉好像表情被拆散成了 2 个奇怪的字符。在正则匹配时，也有奇怪的事情发生## [](#正则匹配 &quot;正则匹配&quot;)正则匹配### [](#范围匹配 &quot;范围匹配&quot;)范围匹配正则表达式中经常会用到范围匹配：|             |                                                             || ----------- | ----------------------------------------------------------- || &#96;&#96;&#96;12&#96;&#96;&#96; | &#96;&#96;&#96;&#x2F;[a-c]&#x2F;.test(&#39;a&#39;) &#x2F;&#x2F; true&#x2F;[我-皮]&#x2F;.test(&#39;皮&#39;) &#x2F;&#x2F; true&#96;&#96;&#96; |但是这种方法在遇到表情时可能会出问题：|             |                                                                                                                          || ----------- | ------------------------------------------------------------------------------------------------------------------------ || &#96;&#96;&#96;12&#96;&#96;&#96; | &#96;&#96;&#96;&#x2F;[💩-💫]&#x2F;;&#x2F;&#x2F; Uncaught SyntaxError: Invalid regular expression: &#x2F;[💩-💫]&#x2F;: Range out of order in character class&#96;&#96;&#96; |囧，竟然直接就报错了。。### [](#数量匹配 &quot;数量匹配&quot;)数量匹配正则中可以用一些量词来匹配某个选项多次,如&#96;*&#96;,&#96;+&#96;, &#96;?&#96;, &#96;&#123;n&#125;&#96;, &#96;&#123;n,&#125;&#96;, &#96;&#123;n,m&#125;&#96;，这些在处理『常见普通』字符时没问题：|             |                                                           || ----------- | --------------------------------------------------------- || &#96;&#96;&#96;12&#96;&#96;&#96; | &#96;&#96;&#96;&#x2F;a&#123;2&#125;&#x2F;.test(&#39;aa&#39;) &#x2F;&#x2F;true&#x2F;皮&#123;2&#125;&#x2F;.test(&#39;皮皮&#39;) &#x2F;&#x2F;true&#96;&#96;&#96; |不出意料，遇到表情也会出问题：|           |                                        || --------- | -------------------------------------- || &#96;&#96;&#96;1&#96;&#96;&#96; | &#96;&#96;&#96;&#x2F;💩&#123;2&#125;&#x2F;.test(&#39;💩💩&#39;); &#x2F;&#x2F; false&#96;&#96;&#96; |种种奇怪的现象都表明，js 在处理 emoji 时有问题，而这种现象在普通英文字母和汉字上不会存在，而脑海里跟 emoji 最相关的就是 Unicode 了，看来有必要了解下 Unicode。那 Unicode 到底是个啥？# [](#Unicode-简介 &quot;Unicode 简介&quot;)Unicode 简介Unicode 是一个字符集（注意不是编码方式，时不时听到有人说 Unicode 编码，实际上是不正确的说法），它把目前世界上所有字符包含在内了。每个符号都与一个称为代码点（&#96;Code Point&#96;）的十六进制数对应，代码点通常有一个&#96;U+&#96;前缀，例如：|               |                                                  || ------------- | ------------------------------------------------ || &#96;&#96;&#96;123&#96;&#96;&#96; | &#96;&#96;&#96;U+0041 &#x3D;&gt;  AU+0061 &#x3D;&gt;   aU+2603 &#x3D;&gt;   ☃&#96;&#96;&#96; |[codepoints](https:&#x2F;&#x2F;codepoints.net&#x2F;)上可以浏览各种各样的 Unicode 字符，我们 💩 先生的代码点是&#96;U+1F4A9&#96;\~\~\~Code Point 的取值范围是&#96;U+0000&#96;\~&#96;U+10FFFF&#96;，大约有 110 万个。 为了好组织，所有&#96;Code Point&#96;被分为了 17 个&#96;Plane&#96;，每个&#96;Plane&#96;中大约包含 65K 个&#96;Code Point&#96;。 见[维基百科](https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Unicode)[![](https:&#x2F;&#x2F;hellogithub2014.github.io&#x2F;images&#x2F;Unicode&#x2F;Unicode-Panel.png)](https:&#x2F;&#x2F;hellogithub2014.github.io&#x2F;images&#x2F;Unicode&#x2F;Unicode-Panel.png)其中第一个&#96;Plane&#96;（U+0000\~ U+FFFF）被称为&#96;BMP&#96;（&#96;Basic Multilingual Plane&#96;）,包含了几乎所有的常用字符。剩下的其他&#96;Plane&#96;（U+10000\~ U+10FFFF）被称为&#96;supplementary planes（SMP）&#96;或者 &#96;astral planes&#96;，对应的字符通常称为&#96;SMP字符&#96;。另： 汉字的 Unicode 码点范围[可以参照这里](http:&#x2F;&#x2F;www.qqxiuzi.cn&#x2F;zh&#x2F;hanzi-unicode-bianma.php)关于 Unicode 先介绍这么多，我们关心的是，这个跟上面遇到的那些 BUG 有什么关系呢？这就要从 js 内部对字符的表示说起了。# [](#js-内部的字符表示 &quot;js 内部的字符表示&quot;)js 内部的字符表示上面说到 Unicode 只是字符集，在计算机内部不会直接存储字符集中的字符，而是会通过某种编码把它转换为一个个字节。对于大部分常见的字符，都是用 2 个字节表示的；而对于 emoji 表情，可能有人已经猜到了，是用 4 个字节表示的。更具体的来说： 对于&#96;SMP字符&#96;，JavaScript 实际上把它拆成了上下两半（&#96;H&#96;、&#96;L&#96;）分别来表示，&#96;H&#96; 和 &#96;L&#96;都是 2 个字节的。H、L 的计算公式：|             |                                                                                               || ----------- | --------------------------------------------------------------------------------------------- || &#96;&#96;&#96;12&#96;&#96;&#96; | &#96;&#96;&#96;H &#x3D; Math.floor((C - 0x10000) &#x2F; 0x400) + 0xd800;L &#x3D; ((C - 0x10000) % 0x400) + 0xdc00;&#96;&#96;&#96; |因为 &#96;SMP字符&#96; 的范围是&#96;U+010000 → U+10FFFF&#96;，故&#96;H&#96;的范围就是 &#96;0xD800&#96;\~&#96;0xDBFF&#96;， 一共 2^10 个字符\&#96;L&#96;的范围就是 &#96;0xDC00&#96; \~ &#96;0xDFFF&#96;，一共 2^10 个字符貌似很巧合的是：因为&#96;SMP字符&#96;的范围是&#96;U+10000&#96;\~&#96;U+10FFFF&#96;,一共 2^20 个字符，所以 H 和 L 结合起来，正巧能表示全部的&#96;SMP字符&#96;。而 BMP 中&#96;U+D800&#96;到&#96;U+DFFF&#96;是一个空段，里面不对应任何字符。例如对于”💩”(0x1F4A9)，通过上面公式计算可以得到&#96;H &#x3D; 0xD83D&#96;、&#96;L &#x3D; 0xDCA9&#96;，也就是说 js 内部会使用&#96;0xD83D&#96;和&#96;0xDCA9&#96;一共 4 个字节来表示它。同时，对于 BMP 区间的代码点，js 中会直接将码点转为十六进制形式的 2 字节：|           |                           || --------- | ------------------------- || &#96;&#96;&#96;1&#96;&#96;&#96; | &#96;&#96;&#96;U+4E25  &#x3D;&gt; 0x4E25&#96;&#96;&#96; |我们上面碰到的所有&#96;SMP字符&#96;BUG 都是因为 H、L 导致，理解了这个也就知道该如何解决了。 不过在想办法解决它之前，我们来正面回答一下，**js 内部是使用什么编码方式处理字符的？**## [](#js-中的字符编码 &quot;js 中的字符编码&quot;)js 中的字符编码好吧，这块的知识是从[阮老师的这篇博客](http:&#x2F;&#x2F;www.ruanyifeng.com&#x2F;blog&#x2F;2014&#x2F;12&#x2F;unicode.html)了解到的，我直接说结论吧。js 使用的其实是&#96;UCS-2&#96;编码，由于这种编码被整合进了&#96;UTF-16&#96;编码，也可以认为 js 使用的是&#96;UTF-16&#96;编码处理字符。不过在细节上这两种编码还是有一些区别的：**UTF-16 编码对于基本平面的字符占用 2 个字节，对于辅助平面的字符占用 4 个字节；** 也就是说：对于”💩”，&#96;UTF-16&#96;会认为它是一个字符，占用 4 个字节。**而 UCS-2 认为所有字符都是 2 个字节**，而对于辅助平面的字符例如 💩，就比较尴尬了，UCS-2 认为它是 2 个字符（H 和 L），每个字符占 2 个字节。### [](#UTF-16-编码 &quot;UTF-16 编码&quot;)UTF-16 编码再稍微说一下&#96;UTF-16&#96;编码，知道了 H、L，理解&#96;UTF-16&#96;就很容易了。上面提到它是一种变长的编码，结果可能是 2 个字节，也可能是 4 个字节。具体来说：1. 如果是 BMP 字符，那么其代码点就是编码结果，如&#96;U+4E25 &#x3D;&gt; 0x4E25&#96;2. 如果是 SMP 字符，那么计算 H、L，H 和 L 拼凑起来的 4 个字节，就是最终结果，如&#96;0x1F4A9&#96;的结果就是&#96;0xD83DDCA9&#96;# [](#es5-中处理SMP字符 &quot;es5 中处理SMP字符&quot;)es5 中处理&#96;SMP字符&#96;1. **length**：💩 的&#96;length&#96;为 2 应该可以理解了，实际上它是 H、L 两个字符，可以看出&#96;length&#96;的结果并不是肉眼所看到的字符个数。2. **&#96;charCodeAt&#96;**： 如果猜测的没错，对于 💩，可以分别得出&#96;charCodeAt(0)&#96;和&#96;charCodeAt(1)&#96;，它们的结果正好就是 H 和 L：   |             |                                                                                               |   | ----------- | --------------------------------------------------------------------------------------------- |   | &#96;&#96;&#96;   1   2   &#96;&#96;&#96; | &#96;&#96;&#96;   &#39;💩&#39;.charCodeAt(0).toString(16); &#x2F;&#x2F; 0xD83D   &#39;💩&#39;.charCodeAt(1).toString(16); &#x2F;&#x2F; 0xDCA9   &#96;&#96;&#96; |3. **&#96;fromCharcode&#96;** - 只能处理位于 BMP 区间(&#96;U+0000&#96;\~&#96;U+FFFF&#96;)的&#96;BMP&#96;字符,会直接截断&#96;SMP字符&#96;的高位字节:   |             |                                                                                                     |   | ----------- | --------------------------------------------------------------------------------------------------- |   | &#96;&#96;&#96;   1   2   &#96;&#96;&#96; | &#96;&#96;&#96;   String.fromCharCode(0x0041); &#x2F;&#x2F; A   String.fromCharCode(0x1f4a9); &#x2F;&#x2F; &#39;&#39;  U+F4A9, not U+1F4A9   &#96;&#96;&#96; |   解决的办法是根据上面计算 &#96;H、L&#96; 的公式先计算出 &#96;H、L&#96;,然后再传入&#96;String.fromCharCode&#96;：   |           |                                                      |   | --------- | ---------------------------------------------------- |   | &#96;&#96;&#96;   1   &#96;&#96;&#96; | &#96;&#96;&#96;   String.fromCharCode(0xd83d, 0xdca9); &#x2F;&#x2F; &quot;💩&quot;   &#96;&#96;&#96; |4. **数量匹配&#96;SMP字符&#96;**: 匹配失败的原因是 &#96;SMP字符&#96;被打散成了 H、L   |           |                                                         |   | --------- | ------------------------------------------------------- |   | &#96;&#96;&#96;   1   &#96;&#96;&#96; | &#96;&#96;&#96;   &#x2F;💩&#123;2&#125;&#x2F;   &#x3D;&gt; &#x2F;\uD83D\uDCA9&#123;2&#125;&#x2F;  &#x2F;&#x2F; 其实匹配的是 H+L*2   &#96;&#96;&#96; |   一个可行的方案是直接采用括号包裹对应的&#96;&lt;H，L&gt;&#96;来写正则   |           |                                                   |   | --------- | ------------------------------------------------- |   | &#96;&#96;&#96;   1   &#96;&#96;&#96; | &#96;&#96;&#96;   &#x2F;(\uD83D\uDCA9)&#123;2&#125;&#x2F;.test(&#39;💩💩&#39;); &#x2F;&#x2F; true   &#96;&#96;&#96; |5. **范围匹配&#96;SMP字符&#96;**： 报错的原因也是&#96;H、L&#96;：   |           |                                                       |   | --------- | ----------------------------------------------------- |   | &#96;&#96;&#96;   1   &#96;&#96;&#96; | &#96;&#96;&#96;   &#x2F;[💩-💫]&#x2F;  &#x3D;&gt;   &#x2F;[\uD83D\uDCA9-\uD83D\uDCAB]&#x2F;   &#96;&#96;&#96; |   上面的&#96;\uDCA9-\uD83D&#96;左边的值比右边大，导致报错。一个很挫的解决方案是提供他们的 H、L 公共范围并精简表达式：   |             |                                                                                               |   | ----------- | --------------------------------------------------------------------------------------------- |   | &#96;&#96;&#96;   1   2   &#96;&#96;&#96; | &#96;&#96;&#96;   &#x2F;\uD83D[\uDCA9-\uDCAB]&#x2F;.test(&#39;💩&#39;) &#x2F;&#x2F; true   &#x2F;\uD83D[\uDCA9-\uDCAB]&#x2F;.test(&#39;💫&#39;) &#x2F;&#x2F; true   &#96;&#96;&#96; |   这种方法的缺点也很明显，对于两个跨度很大的&#96;SMP&#96;字符，需要精心的分段，稍不留神就会出错：   |                   |                                                                                                                        |   | ----------------- | ---------------------------------------------------------------------------------------------------------------------- |   | &#96;&#96;&#96;   1   2   3   4   5   &#96;&#96;&#96; | &#96;&#96;&#96;   &#x2F;[𐄑-💫]&#x2F;   &#x3D;&gt;   &#x2F;\uD800[\uDD11-\uDFFF]|[\uD801-\uD83C][\uDC00-\uDFFF]|\uD83D[\uDC00-\uDCAB]&#x2F;.test(&#39;💪&#39;) &#x2F;&#x2F; true   &#96;&#96;&#96; |6. **&#96;reverse&#96;函数**：遇到&#96;SMP字符&#96;会直接把 H、L 颠倒，而每个独立的 H、L 都是『乱码』，只有二者结合在一起才有意义。如果要解决问题，需要知道在碰到 H 的时候，下一个字符会是 L，不要把二者颠倒就行。   不过[esrever](https:&#x2F;&#x2F;github.com&#x2F;mathiasbynens&#x2F;esrever)提供了一个更巧妙的思路：先将 H、L 颠倒一次，然后再执行一次普通的 reverse 即可：   |                                       |                                                                                                                                                                                                                                                                                                                          |   | ------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |   | &#96;&#96;&#96;   1   2   3   4   5   6   7   8   9   10   11   12   13   &#96;&#96;&#96; | &#96;&#96;&#96;   const regexSurrogatePair &#x3D; &#x2F;([\uD800-\uDBFF])([\uDC00-\uDFFF])&#x2F;g;   function reverse(string) &#123;     const tempStr &#x3D; string.replace(regexSurrogatePair, &#39;$2$1&#39;);     return tempStr       .split(&#39;&#39;)       .reverse()       .join(&#39;&#39;);   &#125;   console.log(reverse(&#39;abcd&#39;)); &#x2F;&#x2F; dcba   console.log(reverse(&#39;💩万几皮&#39;)); &#x2F;&#x2F; 皮几万💩​​​​​   &#96;&#96;&#96; |# [](#ES6-中如何解决-Unicode-问题 &quot;ES6 中如何解决 Unicode 问题&quot;)ES6 中如何解决 Unicode 问题在 es5 中处理 SMP 字符需要时刻记住 H、L 的存在，既麻烦又容易出错。好在 es6 中新增了一系列特性来专门处理 SMP 字符，下面逐一说明。## [](#字符转义-1 &quot;字符转义&quot;)字符转义es5 中的&#96;\u&#96;字符转义不能正确处理 SMP 字符，例如 😄(&#96;U+1F604, H&#x3D;0xD83D L&#x3D;0xDE04&#96;)：|           |                                             || --------- | ------------------------------------------- || &#96;&#96;&#96;1&#96;&#96;&#96; | &#96;&#96;&#96;&#39;\u1F604&#39;; &#x2F;&#x2F; &quot;ὠ4&quot;   &#39;\u1F60&#39; + &#39;4&#39;&#96;&#96;&#96; |除非使用 H、L 的形式：|           |                               || --------- | ----------------------------- || &#96;&#96;&#96;1&#96;&#96;&#96; | &#96;&#96;&#96;&#39;\uD83D\uDE04&#39;; &#x2F;&#x2F; 😄&#96;&#96;&#96; |es6 中提供了更好的方法，使用&#96;&#123;&#125;&#96;包裹代码点即可：|           |                            || --------- | -------------------------- || &#96;&#96;&#96;1&#96;&#96;&#96; | &#96;&#96;&#96;&#39;\u&#123;1f604&#125;&#39;; &#x2F;&#x2F; 😄&#96;&#96;&#96; |## [](#codePointAt &quot;codePointAt&quot;)codePointAt&#96;charCodeAt&#96;只能正确获取 BMP 字符的代码点，对于 SMP 字符只能获取 H 或 L；es6 中新增的&#96;codePointAt&#96;,他能统一处理好 BMP 以及 SMP 字符：|               |                                                                                                                                                || ------------- | ---------------------------------------------------------------------------------------------------------------------------------------------- || &#96;&#96;&#96;123&#96;&#96;&#96; | &#96;&#96;&#96;&#39;😄&#39;.codePointAt(0).toString(16); &#x2F;&#x2F; 0x1f604&#39;abc&#39;.codePointAt(0).toString(16); &#x2F;&#x2F; 0x0061&#39;呵呵哒&#39;.codePointAt(2).toString(16); &#x2F;&#x2F; 0x54D2&#96;&#96;&#96; |## [](#fromCodePoint &quot;fromCodePoint&quot;)fromCodePoint同样的，&#96;fromCharcode&#96;也只能正确处理 BMP 字符； es6 新增的&#96;fromCodePoint&#96;解决了这个问题：|               |                                                                                                                    || ------------- | ------------------------------------------------------------------------------------------------------------------ || &#96;&#96;&#96;123&#96;&#96;&#96; | &#96;&#96;&#96;String.fromCodePoint(0x1f604); &#x2F;&#x2F; 😄String.fromCodePoint(0x0061); &#x2F;&#x2F; aString.fromCodePoint(0x54d2); &#x2F;&#x2F; 哒&#96;&#96;&#96; |## [](#正则匹配-1 &quot;正则匹配&quot;)正则匹配ES6 对正则表达式添加了**&#96;u&#96;**修饰符，含义为“Unicode 模式”，用来正确处理大于&#96;U+FFFF&#96;的 SMP 字符。也就是说：我们可以直接用&#96;u&#96;修饰符加上原始的代码点或字符就能正确匹配所有的 Unicode 字符了。### [](#单字符匹配 &quot;单字符匹配&quot;)单字符匹配若没有&#96;u&#96;修饰符，即使使用 es6 中的字符转义也不能正确匹配 SMP 字符：|           |                                          || --------- | ---------------------------------------- || &#96;&#96;&#96;1&#96;&#96;&#96; | &#96;&#96;&#96;&#x2F;\u&#123;1f604&#125;&#x2F;.test(&#39;😄&#39;); &#x2F;&#x2F; false&#96;&#96;&#96; |由于 H、L 的存在，即使&#96;.&#96;点号也不能匹配 SMP 字符：|           |                                              || --------- | -------------------------------------------- || &#96;&#96;&#96;1&#96;&#96;&#96; | &#96;&#96;&#96;&#x2F;foo.bar&#x2F;.test(&#39;foo😄bar&#39;); &#x2F;&#x2F; false&#96;&#96;&#96; |使用&#96;u&#96;修饰符可以处理这个问题：|             |                                                                               || ----------- | ----------------------------------------------------------------------------- || &#96;&#96;&#96;12&#96;&#96;&#96; | &#96;&#96;&#96;&#x2F;\u&#123;1f604&#125;&#x2F;u.test(&#39;😄&#39;); &#x2F;&#x2F; true&#x2F;foo.bar&#x2F;u.test(&#39;foo😄bar&#39;); &#x2F;&#x2F; true&#96;&#96;&#96; |### [](#范围匹配-1 &quot;范围匹配&quot;)范围匹配上面已经提到过，在 es5 中 SMP 范围匹配会直接报错：|           |                                                                                                                             || --------- | --------------------------------------------------------------------------------------------------------------------------- || &#96;&#96;&#96;1&#96;&#96;&#96; | &#96;&#96;&#96;&#x2F;[💩-💫]&#x2F;; &#x2F;&#x2F; &#x2F;&#x2F; Uncaught SyntaxError: Invalid regular expression: &#x2F;[💩-💫]&#x2F;: Range out of order in character class&#96;&#96;&#96; |&#96;u&#96;在这里扮演了救世主：|                       |                                                                                                                                                                                                                || --------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- || &#96;&#96;&#96;1234567&#96;&#96;&#96; | &#96;&#96;&#96;&#x2F;&#x2F; 💩 0x1f4a9 &#x3D;&gt; H&#x3D;0xD83D ,L&#x3D;0xDCA9&#x2F;&#x2F; 💪 0x1f4aa &#x3D;&gt; H&#x3D;0xD83D ,L&#x3D;0xDCAA&#x2F;&#x2F; 💫 0x1f4ab &#x3D;&gt; H&#x3D;0xD83D ,L&#x3D;0xDCAB&#x2F;[💩-💫]&#x2F;u.test(&#39;💩&#39;) &#x2F;&#x2F; true&#x2F;[💩-💫]&#x2F;u.test(&#39;💪&#39;) &#x2F;&#x2F; true&#x2F;[💩-💫]&#x2F;u.test(&#39;💫&#39;) &#x2F;&#x2F; true&#96;&#96;&#96; |直接使用 H、L 的形式来写正则也不会报错了：|               |                                                                                                                                                               || ------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- || &#96;&#96;&#96;123&#96;&#96;&#96; | &#96;&#96;&#96;&#x2F;[\uD83D\uDCA9-\uD83D\uDCAB]&#x2F;u.test(&#39;💩&#39;) &#x2F;&#x2F; true&#x2F;[\uD83D\uDCA9-\uD83D\uDCAB]&#x2F;u.test(&#39;💪&#39;) &#x2F;&#x2F; true&#x2F;[\uD83D\uDCA9-\uD83D\uDCAB]&#x2F;u.test(&#39;💫&#39;) &#x2F;&#x2F; true&#96;&#96;&#96; |### [](#数量匹配-1 &quot;数量匹配&quot;)数量匹配复习一下 es5 在数量匹配 SMP 时的问题：|           |                                        || --------- | -------------------------------------- || &#96;&#96;&#96;1&#96;&#96;&#96; | &#96;&#96;&#96;&#x2F;😄&#123;2&#125;&#x2F;.test(&#39;😄😄&#39;); &#x2F;&#x2F; false&#96;&#96;&#96; |继续看看&#96;u&#96;的作用：|               |                                                                                                                                 || ------------- | ------------------------------------------------------------------------------------------------------------------------------- || &#96;&#96;&#96;123&#96;&#96;&#96; | &#96;&#96;&#96;&#x2F;😄&#123;2&#125;&#x2F;u.test(&#39;😄😄&#39;) &#x2F;&#x2F; true&#x2F;\u&#123;1f604&#125;&#123;2&#125;&#x2F;u.test(&#39;😄😄&#39;) &#x2F;&#x2F; true&#x2F;\uD83D\uDE04&#123;2&#125;&#x2F;u.test(&#39;😄😄&#39;) &#x2F;&#x2F; true ， 注意这里没有使用括号&#96;&#96;&#96; |## [](#表单校验中的-pattern &quot;表单校验中的 pattern&quot;)表单校验中的 pattern在表单校验中，&#96;input&#96;元素有一个规则属性是&#96;pattern&#96;，可以给它设置一个正则表达式，若表单项的值匹配了&#96;pattern&#96;，会默认添加一个&#96;valid&#96;的伪类，反之添加&#96;invalid&#96;伪类。|                         |                                                                                            || ----------------------- | ------------------------------------------------------------------------------------------ || &#96;&#96;&#96;12345678&#96;&#96;&#96; | &#96;&#96;&#96;&lt;style&gt;  :invalid &#123;    color: red;  &#125;  :valid &#123;    color: green;  &#125;&lt;&#x2F;style&gt;&#96;&#96;&#96; ||                     |                                                                                                                                                                            || ------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------- || &#96;&#96;&#96;123456&#96;&#96;&#96; | &#96;&#96;&#96;&lt;form action&#x3D;&quot;&quot;&gt;  &lt;input type&#x3D;&quot;text&quot; pattern&#x3D;&quot;\d+&quot; value&#x3D;&quot;123&quot; &#x2F;&gt;  &lt;!-- 界面上显示绿色 --&gt;  &lt;input type&#x3D;&quot;text&quot; pattern&#x3D;&quot;\d+&quot; value&#x3D;&quot;abc&quot; &#x2F;&gt;  &lt;!-- 界面上显示红色 --&gt;&lt;&#x2F;form&gt;&#96;&#96;&#96; |幸运的是，不需要我们做什么 hack 操作，&#96;u&#96;修饰符已经默认附加在了 pattern 上：|                     |                                                                                                                                                                                         || ------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- || &#96;&#96;&#96;123456&#96;&#96;&#96; | &#96;&#96;&#96;&lt;form action&#x3D;&quot;&quot; class&#x3D;&quot;form&quot;&gt;  &lt;input type&#x3D;&quot;text&quot; pattern&#x3D;&quot;😄&#123;2&#125;&quot; value&#x3D;&quot;😄😄&quot; &#x2F;&gt;  &lt;!-- green --&gt;  &lt;input type&#x3D;&quot;text&quot; pattern&#x3D;&quot;💩-💫&quot; value&#x3D;&quot;💫&quot; &#x2F;&gt;  &lt;!-- green --&gt;&lt;&#x2F;form&gt;&#96;&#96;&#96; |## [](#兼容性 &quot;兼容性&quot;)兼容性&#96;u&#96;修饰符的兼容性参考[test-RegExp\_y\_and\_u\_flags](http:&#x2F;&#x2F;kangax.github.io&#x2F;compat-table&#x2F;es6&#x2F;#test-RegExp_y_and_u_flags)[![](https:&#x2F;&#x2F;hellogithub2014.github.io&#x2F;images&#x2F;Unicode&#x2F;u-flag-compatiable.png)](https:&#x2F;&#x2F;hellogithub2014.github.io&#x2F;images&#x2F;Unicode&#x2F;u-flag-compatiable.png)## [](#Array-from &quot;Array.from&quot;)Array.from可能有时候需要计算字符串中的『字数』(即肉眼见到的字符数)，例如界面提示用户输入了多少字。如上所述，这个时候不能简单的使用&#96;length&#96;属性，因为对于一个&#96;SMP&#96;字符它会返回 2.在 es5 中我们可以这么做：|                         |                                                                                                                                                                                                                            || ----------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- || &#96;&#96;&#96;12345678&#96;&#96;&#96; | &#96;&#96;&#96;var regexSMP &#x3D; &#x2F;[\uD800-\uDBFF][\uDC00-\uDFFF]&#x2F;g;&#x2F;&#x2F; 将每个SMP字符转换成一个BMP字符，然后直接计算最终结果的length即可。function countSymbols(string) &#123;  return string.replace(regexSMP, &#39;_&#39;).length;&#125;countSymbols(&#39;😄你好阿，test©&#39;); &#x2F;&#x2F; 10&#96;&#96;&#96; |es6 中借助&#96;Array.from&#96;或者扩散运算符&#96;...&#96;可以更简便，他会帮助我们处理好 Unicode 字符：|                                 |                                                                                                                                                                                                                           || ------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- || &#96;&#96;&#96;1234567891011&#96;&#96;&#96; | &#96;&#96;&#96;function countSymbols2(string) &#123;  return Array.from(string).length;&#125;countSymbols2(&#39;😄你好阿，test©&#39;); &#x2F;&#x2F; 10function countSymbols3(string) &#123;  return [...string].length;&#125;countSymbols3(&#39;😄你好阿，test©&#39;); &#x2F;&#x2F; 10&#96;&#96;&#96; |同样&#96;reverse&#96;函数也能用&#96;Array.from&#96;：|                     |                                                                                                                                           || ------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- || &#96;&#96;&#96;123456&#96;&#96;&#96; | &#96;&#96;&#96;function reverse2(string) &#123;  return Array.from(string)    .reverse()    .join(&#39;&#39;);&#125;reverse2(&#39;😄你好阿，test©&#39;); &#x2F;&#x2F; &quot;©tset，阿好你😄&quot;&#96;&#96;&#96; |# [](#参考 &quot;参考&quot;)参考1. [javascript-unicode](https:&#x2F;&#x2F;mathiasbynens.be&#x2F;notes&#x2F;javascript-unicode)2. [谈谈 Unicode 编码](http:&#x2F;&#x2F;pcedu.pconline.com.cn&#x2F;empolder&#x2F;gj&#x2F;other&#x2F;0505&#x2F;616631_all.html#content_page_1)3. [Unicode 与 JavaScript 详解](http:&#x2F;&#x2F;www.ruanyifeng.com&#x2F;blog&#x2F;2014&#x2F;12&#x2F;unicode.html)4. [wiki unicode](https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Unicode)5. [The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets](https:&#x2F;&#x2F;www.joelonsoftware.com&#x2F;2003&#x2F;10&#x2F;08&#x2F;the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses&#x2F;)6. [Unicode-aware regular expressions in ES2015](https:&#x2F;&#x2F;mathiasbynens.be&#x2F;notes&#x2F;es6-unicode-regex)7. [es6 字符串的扩展](http:&#x2F;&#x2F;es6.ruanyifeng.com&#x2F;#docs&#x2F;string)8. [es6 正则的扩展](http:&#x2F;&#x2F;es6.ruanyifeng.com&#x2F;#docs&#x2F;regex)9. [ASCII，Unicode 和 UTF-8](http:&#x2F;&#x2F;www.ruanyifeng.com&#x2F;blog&#x2F;2007&#x2F;10&#x2F;ascii_unicode_and_utf-8.html)# 为什么有些字符的 length 不是 1？谈谈 JavaScript 中的字符串编码原文：https:&#x2F;&#x2F;juejin.cn&#x2F;post&#x2F;7084062127677243428## 由 String.fromCodePoint 与 String.fromCharCode 谈起&#96;String.fromCodePoint&#96; 与 &#96;String.fromCharCode&#96; 这两个方法名称相似。如果你之前未使用过，让我们来先看 MDN 上的介绍。&gt; [String.fromCodePoint](https:&#x2F;&#x2F;link.juejin.cn?target&#x3D;https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FString%2FfromCodePoint &quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;zh-CN&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Reference&#x2F;Global_Objects&#x2F;String&#x2F;fromCodePoint&quot;)&gt;&gt; String.fromCodePoint() 静态方法返回使用指定的代码点序列创建的字符串。&gt; [String.fromCodePoint](https:&#x2F;&#x2F;link.juejin.cn?target&#x3D;https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FString%2FfromCharCode &quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;zh-CN&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Reference&#x2F;Global_Objects&#x2F;String&#x2F;fromCharCode&quot;)&gt;&gt; 静态 String.fromCharCode() 方法返回由指定的 UTF-16 代码单元序列创建的字符串。读完以上介绍，你的困惑可能又多了一些。「代码点」，「UTF-16 代码单元序列」分别指的是什么意思？为了更好地理解这些概念，让我们从 Unicode 编码谈起。## Unicode 编码Unicode 编码给全世界上所有的字符分配了唯一的数字编号，即 code point（下文统一称代码点）。Unicode 字符共计 110 多万，一个 unsigned int32 来表示完全够了。| 字符 | 代码点    || -- | ------ || a  | 97     || 金  | 37329  || 😝 | 128541 |通过调用字符串的 &#96;codePointAt&#96; 方法可以获取指定位置字符的代码点，调用 &#96;String.fromCodePoint&#96; 可以将代码点转为字符，&#96;codePointAt&#96; 与 &#96;fromCodePoint&#96; 可以归为一类。&#96;&#96;&#96;jsjs复制代码&quot;😝&quot;.codePointAt(0); &#x2F;&#x2F; 128541String.fromCodePoint(128541); &#x2F;&#x2F; &#39;😝&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="UTF-8-与-UTF-16"><a href="#UTF-8-与-UTF-16" class="headerlink" title="UTF-8 与 UTF-16"></a>UTF-8 与 UTF-16</h3><p>Unicode 编码只是定义了代码点，但并未规定二进制数据存储的格式。用四个字节来存储最方便，但是过于浪费存储空间。实践中，往往采用变长编码，比如 UTF-8 与 UTF-16 格式来存储数据。</p><p>UTF-8 编码占用字节数 1 - 4，UTF-16 编码占用字节数为 2 或者 4。借助 Node 中的 <code>Buffer</code> 对象可以观察字符对应二进制数据。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">js复制代码Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"😝"</span><span class="token punctuation">,</span> <span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0xf0, 0x9f, 0x98, 0x9d]</span>Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"😝"</span><span class="token punctuation">,</span> <span class="token string">"utf16le"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0x3d, 0xd8, 0x1d, 0xde]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JavaScript-字符的缺陷"><a href="#JavaScript-字符的缺陷" class="headerlink" title="JavaScript 字符的缺陷"></a>JavaScript 字符的缺陷</h2><p>JavaScript 虽然遵循 Unicode 编码，但采用的是废弃的 UCS-2 编码格式。该方案的缺陷是对于 4 个<strong>字节</strong>的字符，比如 emoji 表情，会拆分 2 个<strong>字符</strong>，即 2 个 UTF-16 字符。获取字符的长度与调用 <code>charCodeAt</code> 方法可看出这一点。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">js复制代码<span class="token string">"😝"</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 2</span><span class="token string">"😝"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['\uD83D', '\uDE1D']</span><span class="token string">"😝"</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 55357 === 0xD83D</span><span class="token string">"😝"</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 56861 === 0xDE1D</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将编码数转成 16 进制数，加上 <code>\u</code> 也可用以表示该字符。使用 <code>String.fromCharCode</code> 可以将单元序列转成字符。<code>fromCharCode</code> 与 <code>charCodeAt</code> 可以归为一组。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">js复制代码String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">55357</span><span class="token punctuation">,</span> <span class="token number">56861</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// '😝'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>经过上面的介绍，我们发现对于由一个 UTF-16 代码单元构成的字符，<code>charCodeAt</code> 与 <code>codePointAt</code> 的结果一致。</p><h2 id="ES6-的改进"><a href="#ES6-的改进" class="headerlink" title="ES6 的改进"></a>ES6 的改进</h2><p>日常开发中，字符串的操作是如此常见。我们想用更好的方式来处理字符串。好在 ES6 改进了字符串的操作。使用 <code>for...of</code> 来遍历字符串，使用 <code>Array.from</code> 来准确的计算字符串长度。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">js复制代码<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> ch <span class="token keyword">of</span> <span class="token string">"😝"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"😝"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于 4 字节的字符，也支持了 Unicode 码表示。「😝」的这几种写法是等效。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">js复制代码<span class="token string">"😝"</span> <span class="token operator">===</span> <span class="token string">"\uD83D\uDE1D"</span><span class="token punctuation">;</span><span class="token string">"😝"</span> <span class="token operator">===</span> <span class="token string">"\u&#123;1F61D&#125;"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Buffer-与字符串的转换"><a href="#Buffer-与字符串的转换" class="headerlink" title="Buffer 与字符串的转换"></a>Buffer 与字符串的转换</h2><p>前文中提到，字符在存储占据的空间是不一样的。在 Buffer 拼接时，尤其要注意避免隐式地调用 <code>toString</code>。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">js复制代码<span class="token keyword">const</span> buf <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"😝"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4 字节</span>buf<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> buf<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// '���'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码片段的结果跟预期完全不一致。在调用 <code>toString</code> 时，Buffer 并不完整，错误地被转化成 <a href="https://link.juejin.cn/?target=https://www.fileformat.info/info/unicode/char/fffd/index.htm" title="https://www.fileformat.info/info/unicode/char/fffd/index.htm"><strong>� (Unicode replacement character)</strong></a>。正确的方式使用 <code>Buffer.concat</code> 或者 <code>StringDecoder</code> 来去实现拼接。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">js复制代码<span class="token comment">// 1</span>Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>buf<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> buf<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> StringDecoder <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"string_decoder"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> decoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringDecoder</span><span class="token punctuation">(</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>decoder<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>decoder<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// '😝'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原文：<a href="https://hellogithub2014.github.io/2018/08/23/unicode-and-javascript/">https://hellogithub2014.github.io/2018/08/23/unicode-and-javascript/</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p><code>String.fromCodePoint</code> 与 <code>codePointAt</code> 归为一组，处理的是 Unicode 编码中的代码点。</p></li><li><p><code>String.fromCharCode</code> 与 <code>charCodeAt</code> 归为一组，处理的是 UTF-16 代码单元序列。部分字符由两个 UTF-16 代码单元序列构成。</p></li><li><p>尽量使用 ES6 的新方法来处理字符串。</p></li><li><p>Buffer 与字符串转化时，需要注意保证 Buffer 的完整性。</p></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://link.juejin.cn/?target=https://es6.ruanyifeng.com/%23docs/string" title="https://es6.ruanyifeng.com/#docs/string">字符串的扩展</a></li><li><a href="https://link.juejin.cn/?target=https://nodejs.org/dist/latest-v14.x/docs/api/buffer.html%23buffer_buffers_and_character_encodings" title="https://nodejs.org/dist/latest-v14.x/docs/api/buffer.html#buffer_buffers_and_character_encodings">Node 中的 Buffer 对象</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何判断元素是否在可视区域内</title>
      <link href="/2024/04/25/ru-he-pan-duan-yuan-su-shi-fou-zai-ke-shi-qu-yu-nei/"/>
      <url>/2024/04/25/ru-he-pan-duan-yuan-su-shi-fou-zai-ke-shi-qu-yu-nei/</url>
      
        <content type="html"><![CDATA[<h1 id="如何判断元素是否在可视区域内呢？然后搞一些事情"><a href="#如何判断元素是否在可视区域内呢？然后搞一些事情" class="headerlink" title="如何判断元素是否在可视区域内呢？然后搞一些事情"></a>如何判断元素是否在可视区域内呢？然后搞一些事情</h1><p>在学习判断元素是否在可视区域时，我们首先的了解一些元素的位置值和大小值。</p><h2 id="元素的位置信息和大小"><a href="#元素的位置信息和大小" class="headerlink" title="元素的位置信息和大小"></a>元素的位置信息和大小</h2><p>大部分属性都是对应的，所以下面都只写一个。</p><ul><li><p><code>clientWidth</code>：元素内容区宽度加上左右内边距宽度，即<code>clientWidth = content + padding</code></p></li><li><p><code>offsetTop</code>，元素的上外边框至包含元素的上内边框之间的像素距离。 <em>&#x2F;&#x2F; 元素的偏移量不会随着滚动条的滚动而发生改变。并且是相对于定位父元素的位置计算的。如果没有定位的父元素就获取的是到窗口的距离，从元素的外边框计算到父元素的内边框</em></p></li><li><p><code>document.documentElement.scrollHeight</code>： 获取浏览器窗口的总高度 <strong>。包括滚动条的隐藏高度。</strong>,如果没有滚动条，则他就等于<code>document.documentElement.clientWidth</code>。</p></li><li><p><code>document.documentElement.clientWidth</code>：获取视口宽度。就是浏览器窗口的宽度。</p></li><li><p><code>getBoundingClientRect()</code>返回元素的大小及其相对于视口的位置。 <strong>这里获取的大小包括边框，内容和内边距。</strong> <strong>获取相对于视口的位置时，都是视口到外边框的距离。</strong></p></li><li><p>document.documentElement.scrollTop：获取滚动条滚动的高度。<strong>这个值是可以设置的。</strong></p></li></ul><p>了解了上面的一些属性，我们就可以学习第一种判断方法了</p><h2 id="通过元素的位置信息和滚动条滚动的高度来判断了"><a href="#通过元素的位置信息和滚动条滚动的高度来判断了" class="headerlink" title="通过元素的位置信息和滚动条滚动的高度来判断了"></a>通过元素的位置信息和滚动条滚动的高度来判断了</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">js复制代码<span class="token keyword">function</span> <span class="token function">isContain</span><span class="token punctuation">(</span><span class="token parameter">dom</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获取可视窗口的盖度。</span>    <span class="token keyword">const</span> screenHeight <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>    <span class="token comment">// 获取滚动条滚动的高度</span>    <span class="token keyword">const</span> scrollTop <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>    <span class="token comment">// 获取元素偏移的高度。就是距离可视窗口的偏移量。</span>    <span class="token keyword">const</span> offsetTop <span class="token operator">=</span> dom<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>    <span class="token keyword">return</span> offsetTop <span class="token operator">-</span> scrollTop <span class="token operator">&lt;=</span> screenHeight<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="通过getBoundingClientRect方法来获取元素的位置信息，然后加以判断-这种方法是我之前没有见过的"><a href="#通过getBoundingClientRect方法来获取元素的位置信息，然后加以判断-这种方法是我之前没有见过的" class="headerlink" title="通过getBoundingClientRect方法来获取元素的位置信息，然后加以判断(这种方法是我之前没有见过的)"></a>通过getBoundingClientRect方法来获取元素的位置信息，然后加以判断(这种方法是我之前没有见过的)</h2><p>首先来介绍一下getBoundingClientRect方法。</p><p>他是dom对象的一个方法。返回一个DOMRect对象。该对象拥有<code>left</code>, <code>top</code>, <code>right</code>, <code>bottom</code>, <code>x</code>, <code>y</code>, <code>width</code>, 和 <code>height</code>属性。</p><p>当页面发生滚动的时候，<code>top</code>, <code>left</code>, <code>right</code>, <code>bottom</code>属性值都会随之改变。</p><blockquote><p>top：就是元素上外边框到视口顶端距离。</p><p>left：就是元素左外边框到视口左端距离。</p><p>bottom：就是元素下外边框到视口顶端距离。</p><p>right：就是元素右外边框到视口左端距离。 如果想要判断子元素是否在可视区域内，只需要：</p></blockquote><ul><li>top 大于等于 0</li><li>left 大于等于 0</li><li>bottom 小于等于视窗高度</li><li>right 小于等于视窗宽度</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">js复制代码    <span class="token keyword">function</span> <span class="token function">isContain</span><span class="token punctuation">(</span><span class="token parameter">dom</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> totalHeight <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>      <span class="token keyword">const</span> totalWidth <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>      <span class="token comment">// 当滚动条滚动时，top, left, bottom, right时刻会发生改变。</span>      <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> top<span class="token punctuation">,</span> right<span class="token punctuation">,</span> bottom<span class="token punctuation">,</span> left <span class="token punctuation">&#125;</span> <span class="token operator">=</span> dom<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>top <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> left <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">&lt;=</span> totalWidth <span class="token operator">&amp;&amp;</span> bottom <span class="token operator">&lt;=</span> totalHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="通过webAPI，Intersection-Observer来实现监听。"><a href="#通过webAPI，Intersection-Observer来实现监听。" class="headerlink" title="通过webAPI，Intersection Observer来实现监听。"></a>通过webAPI，Intersection Observer来实现监听。</h2><blockquote><p>详细讲解，可以参考mdn：<a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/API/Intersection_Observer_API" title="https://developer.mozilla.org/zh-CN/docs/Web/API/Intersection_Observer_API">developer.mozilla.org&#x2F;zh-CN&#x2F;docs&#x2F;…</a> Intersection Observer API 会注册一个回调函数，每当被监视的元素进入或者退出另外一个元素时(或者 viewport)，或者两个元素的相交部分大小发生变化时，该回调方法会被触发执行。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">js复制代码<span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token comment">// 用于检查目标的可见性。必须是目标元素的祖先节点。</span>    <span class="token literal-property property">rootMargin</span><span class="token operator">:</span> <span class="token string">"上右下左"</span> <span class="token comment">// 给祖先节点设置margin，等同于css中的margin。用来扩展或缩小`rootBounds`这个矩形的大小，从而影响`intersectionRect`交叉区域的大小。</span>    <span class="token literal-property property">threshold</span><span class="token operator">:</span> <span class="token comment">//表示当子元素和父元素覆盖多少时触发回调函数。</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entries</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 当满足条件是搞一些事情</span>    <span class="token comment">// 这里通过判断entries[0].isIntersecting来判断是否在可视区域</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span>observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>dom<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="下面就是三种方法判断的例子了"><a href="#下面就是三种方法判断的例子了" class="headerlink" title="下面就是三种方法判断的例子了"></a>下面就是三种方法判断的例子了</h2><p>该例子就是如果子元素没有显示在当前可是窗口中时，窗口的背景颜色显示为绿色，反之显示为蓝色。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">html复制代码  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.div</span> <span class="token punctuation">&#123;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 2000px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">p</span> <span class="token punctuation">&#123;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>      <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我出现啦<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 通过元素位置关系方法--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">function</span> <span class="token function">isContain</span><span class="token punctuation">(</span><span class="token parameter">dom</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 获取可视窗口的盖度。</span>      <span class="token keyword">const</span> screenHeight <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>      <span class="token comment">// 获取滚动条滚动的高度</span>      <span class="token keyword">const</span> scrollTop <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>      <span class="token comment">// 获取元素偏移的高度。就是距离可视窗口的偏移量。</span>      <span class="token keyword">const</span> offsetTop <span class="token operator">=</span> dom<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>      <span class="token keyword">return</span> offsetTop <span class="token operator">-</span> scrollTop <span class="token operator">&lt;=</span> screenHeight<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span><span class="token function-variable function">onscroll</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isContain</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'blue'</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'green'</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 通过 getBoundingClientRect方法--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">// 只有当子元素全部出现在父元素中时，才会返回true。</span>    <span class="token keyword">function</span> <span class="token function">isContain</span><span class="token punctuation">(</span><span class="token parameter">dom</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> totalHeight <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>      <span class="token keyword">const</span> totalWidth <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>      <span class="token comment">// 当滚动条滚动时，top, left, bottom, right时刻会发生改变。</span>      <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> top<span class="token punctuation">,</span> right<span class="token punctuation">,</span> bottom<span class="token punctuation">,</span> left <span class="token punctuation">&#125;</span> <span class="token operator">=</span> dom<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> right<span class="token punctuation">,</span> bottom<span class="token punctuation">,</span> left<span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>top <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> left <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">&lt;=</span> totalWidth <span class="token operator">&amp;&amp;</span> bottom <span class="token operator">&lt;=</span> totalHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span><span class="token function-variable function">onscroll</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isContain</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'blue'</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'green'</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>     <span class="token comment">&lt;!-- 通过new IntersectionObserver();  --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entries</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>entries<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isIntersecting<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">"blue"</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">"green"</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">threshold</span><span class="token operator">:</span> <span class="token number">.2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span>    observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>位运算符在JS中的妙用</title>
      <link href="/2024/04/25/wei-yun-suan-fu-zai-js-zhong-de-miao-yong/"/>
      <url>/2024/04/25/wei-yun-suan-fu-zai-js-zhong-de-miao-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="位运算符在JS中的妙用"><a href="#位运算符在JS中的妙用" class="headerlink" title="位运算符在JS中的妙用"></a>位运算符在JS中的妙用</h1><p><a href="https://juejin.cn/post/6844903568906911752">singcl</a></p><blockquote><ul><li>所有 <code>JavaScript</code> 数字存储为根为10的64（8比特）浮点数。<code>JavaScrip</code>t不是类型语言。与许多其他编程语言不同，<code>JavaScript</code>不定义不同类型的数字，比如整数、短、长、浮点等等。</li><li>整数精度（不使用小数点或指数计数法）最多为15位。小数精度的最大位数是17，但是浮点运算并不总是100% 准确。</li><li>位运算直接对二进制位进行计算，位运算直接处理每一个比特位，是非常底层的运算，好处是速度极快，缺点是很不直观，许多场合不能够使用。</li><li>位运算只对整数起作用，如果一个运算数不是整数，会自动转为整数后再运行。</li><li>在<code>JavaScript</code>内部，数值都是以64位浮点数的形式储存，但是做位运算的时候，是以32位带符号的整数进行运算的，并且返回值也是一个32位带符号的整数。</li></ul></blockquote><h2 id="JS中常用的7个位运算符"><a href="#JS中常用的7个位运算符" class="headerlink" title="JS中常用的7个位运算符"></a>JS中常用的7个位运算符</h2><h3 id="1-按位与-AND"><a href="#1-按位与-AND" class="headerlink" title="1. 按位与(AND) &amp;"></a>1. 按位与(AND) <code>&amp;</code></h3><p><code>&amp;</code>以特定的方式组合操作二进制数中对应的位，如果对应的位都为1，那么结果就是1， 如果任意一个位是0 则结果就是0。</p><pre class="line-numbers language-none"><code class="language-none">复制代码&#x2F;&#x2F; 1的二进制表示为: 00000000 00000000 00000000 00000001&#x2F;&#x2F; 3的二进制表示为: 00000000 00000000 00000000 00000011&#x2F;&#x2F; -----------------------------&#x2F;&#x2F; 1的二进制表示为: 00000000 00000000 00000000 00000001console.log(1 &amp; 3)     &#x2F;&#x2F; 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-按位或-OR"><a href="#2-按位或-OR" class="headerlink" title="2. 按位或(OR) |"></a>2. 按位或(OR) <code>|</code></h3><p><code>|</code> 运算符跟 <code>&amp;</code> 的区别在于如果对应的位中任一个操作数为1 那么结果就是1。</p><pre class="line-numbers language-none"><code class="language-none">复制代码&#x2F;&#x2F; 1的二进制表示为: 00000000 00000000 00000000 00000001&#x2F;&#x2F; 3的二进制表示为: 00000000 00000000 00000000 00000011&#x2F;&#x2F; -----------------------------&#x2F;&#x2F; 3的二进制表示为: 00000000 00000000 00000000 00000011console.log(1 | 3)     &#x2F;&#x2F; 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-按位异或-XOR"><a href="#3-按位异或-XOR" class="headerlink" title="3. 按位异或(XOR) ^"></a>3. 按位异或(XOR) <code>^</code></h3><p><code>^</code> 如果对应两个操作位有且仅有一个1时结果为1，其他都是0。</p><pre class="line-numbers language-none"><code class="language-none">复制代码&#x2F;&#x2F; 1的二进制表示为: 00000000 00000000 00000000 00000001&#x2F;&#x2F; 3的二进制表示为: 00000000 00000000 00000000 00000011&#x2F;&#x2F; -----------------------------&#x2F;&#x2F; 2的二进制表示为: 00000000 00000000 00000000 00000010console.log(1 ^ 3)     &#x2F;&#x2F; 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-按位非-NOT"><a href="#4-按位非-NOT" class="headerlink" title="4. 按位非(NOT) ~"></a>4. 按位非(NOT) <code>~</code></h3><p><code>~</code> 运算符是对位求反，1变0, 0变1，也就是求二进制的反码。</p><pre class="line-numbers language-none"><code class="language-none">复制代码&#x2F;&#x2F; 1的二进制表示为: 00000000 00000000 00000000 00000001&#x2F;&#x2F; 3的二进制表示为: 00000000 00000000 00000000 00000011&#x2F;&#x2F; -----------------------------&#x2F;&#x2F; 1反码二进制表示: 11111111 11111111 11111111 11111110&#x2F;&#x2F; 由于第一位（符号位）是1，所以这个数是一个负数。JavaScript 内部采用补码形式表示负数，即需要将这个数减去1，再取一次反，然后加上负号，才能得到这个负数对应的10进制值。&#x2F;&#x2F; -----------------------------&#x2F;&#x2F; 1的反码减1：     11111111 11111111 11111111 11111101&#x2F;&#x2F; 反码取反：       00000000 00000000 00000000 00000010&#x2F;&#x2F; 表示为10进制加负号：-2console.log(~ 1)     &#x2F;&#x2F; -2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>简单记忆：一个数与自身的取反值相加等于-1</strong>。</li></ul><h3 id="5-左移（Left-shift）"><a href="#5-左移（Left-shift）" class="headerlink" title="5. 左移（Left shift）&lt;&lt;"></a>5. 左移（Left shift）<code>&lt;&lt;</code></h3><p><code>&lt;&lt;</code>运算符使指定值的二进制数所有位都左移指定次数，其移动规则：<strong>丢弃高位，低位补0</strong>即按二进制形式把所有的数字向左移动对应的位数，高位移出(舍弃)，低位的空位补零。</p><pre class="line-numbers language-none"><code class="language-none">复制代码&#x2F;&#x2F; 1的二进制表示为: 00000000 00000000 00000000 00000001&#x2F;&#x2F; -----------------------------&#x2F;&#x2F; 2的二进制表示为: 00000000 00000000 00000000 00000010console.log(1 &lt;&lt; 1)     &#x2F;&#x2F; 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-有符号右移"><a href="#6-有符号右移" class="headerlink" title="6. 有符号右移&gt;&gt;"></a>6. 有符号右移<code>&gt;&gt;</code></h3><p><code>&gt;&gt;</code>该操作符会将指定操作数的二进制位向右移动指定的位数。<strong>向右被移出的位被丢弃，拷贝最左侧的位以填充左侧</strong>。由于新的最左侧的位总是和以前相同，符号位没有被改变。所以被称作“符号传播”。</p><pre class="line-numbers language-none"><code class="language-none">复制代码&#x2F;&#x2F; 1的二进制表示为: 00000000 00000000 00000000 00000001&#x2F;&#x2F; -----------------------------&#x2F;&#x2F; 0的二进制表示为: 00000000 00000000 00000000 00000000console.log(1 &gt;&gt; 1)     &#x2F;&#x2F; 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-无符号右移"><a href="#7-无符号右移" class="headerlink" title="7. 无符号右移&gt;&gt;&gt;"></a>7. 无符号右移<code>&gt;&gt;&gt;</code></h3><p><code>&gt;&gt;&gt;</code>该操作符会将第一个操作数向右移动指定的位数。向右被移出的位被丢弃，左侧用0填充。因为符号位变成了 0，所以结果总是非负的。（译注：即便右移 0 个比特，结果也是非负的。）</p><p>对于非负数，有符号右移和无符号右移总是返回相同的结果。例如， <code>9 &gt;&gt;&gt; 2</code> 得到 <code>2 和 9 &gt;&gt; 2</code> 相同。</p><h2 id="位运算符在js中的妙用"><a href="#位运算符在js中的妙用" class="headerlink" title="位运算符在js中的妙用"></a>位运算符在js中的妙用</h2><ol><li>使用&amp;运算符判断一个数的奇偶</li></ol><pre class="line-numbers language-none"><code class="language-none">复制代码&#x2F;&#x2F; 偶数 &amp; 1 &#x3D; 0&#x2F;&#x2F; 奇数 &amp; 1 &#x3D; 1console.log(2 &amp; 1)    &#x2F;&#x2F; 0console.log(3 &amp; 1)    &#x2F;&#x2F; 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>使用<code>~, &gt;&gt;, &lt;&lt;, &gt;&gt;&gt;, |</code>来取整</li></ol><pre class="line-numbers language-none"><code class="language-none">复制代码console.log(~~ 6.83)    &#x2F;&#x2F; 6console.log(6.83 &gt;&gt; 0)  &#x2F;&#x2F; 6console.log(6.83 &lt;&lt; 0)  &#x2F;&#x2F; 6console.log(6.83 | 0)   &#x2F;&#x2F; 6&#x2F;&#x2F; &gt;&gt;&gt;不可对负数取整console.log(6.83 &gt;&gt;&gt; 0)   &#x2F;&#x2F; 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>使用<code>^</code>来完成值交换</li></ol><pre class="line-numbers language-none"><code class="language-none">复制代码var a &#x3D; 5var b &#x3D; 8a ^&#x3D; bb ^&#x3D; aa ^&#x3D; bconsole.log(a)   &#x2F;&#x2F; 8console.log(b)   &#x2F;&#x2F; 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>使用<code>&amp;, &gt;&gt;, |</code>来完成rgb值和16进制颜色值之间的转换</li></ol><pre class="line-numbers language-none"><code class="language-none">复制代码&#x2F;** * 16进制颜色值转RGB * @param  &#123;String&#125; hex 16进制颜色字符串 * @return &#123;String&#125;     RGB颜色字符串 *&#x2F;  function hexToRGB(hex) &#123;    var hexx &#x3D; hex.replace(&#39;#&#39;, &#39;0x&#39;)    var r &#x3D; hexx &gt;&gt; 16    var g &#x3D; hexx &gt;&gt; 8 &amp; 0xff    var b &#x3D; hexx &amp; 0xff    return &#96;rgb($&#123;r&#125;, $&#123;g&#125;, $&#123;b&#125;)&#96;&#125;&#x2F;** * RGB颜色转16进制颜色 * @param  &#123;String&#125; rgb RGB进制颜色字符串 * @return &#123;String&#125;     16进制颜色字符串 *&#x2F;function RGBToHex(rgb) &#123;    var rgbArr &#x3D; rgb.split(&#x2F;[^\d]+&#x2F;)    var color &#x3D; rgbArr[1]&lt;&lt;16 | rgbArr[2]&lt;&lt;8 | rgbArr[3]    return &#39;#&#39;+ color.toString(16)&#125;&#x2F;&#x2F; -------------------------------------------------hexToRGB(&#39;#ffffff&#39;)               &#x2F;&#x2F; &#39;rgb(255,255,255)&#39;RGBToHex(&#39;rgb(255,255,255)&#39;)      &#x2F;&#x2F; &#39;#ffffff&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li>https:&#x2F;&#x2F;developer.mozilla.org&#x2F;zh-CN&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Reference&#x2F;Operators&#x2F;Bitwise_Operators</li><li>http:&#x2F;&#x2F;javascript.ruanyifeng.com&#x2F;grammar&#x2F;operator.html</li><li>http:&#x2F;&#x2F;www.w3school.com.cn&#x2F;js&#x2F;js_obj_number.asp</li></ol>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS方法大全</title>
      <link href="/2024/04/19/js-fang-fa-da-quan/"/>
      <url>/2024/04/19/js-fang-fa-da-quan/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-方法大全"><a href="#JavaScript-方法大全" class="headerlink" title="JavaScript 方法大全"></a>JavaScript 方法大全</h1><p><a href="https://juejin.cn/user/783303009380040/posts">Shrimpsss</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文针对JavaScript常用的数组与字符串对象方法进行总结</p><h2 id="一、增删查改"><a href="#一、增删查改" class="headerlink" title="一、增删查改"></a>一、增删查改</h2><h3 id="1-1-push"><a href="#1-1-push" class="headerlink" title="1.1 push"></a>1.1 push</h3><blockquote><p><code>push()</code> 方法将一个或多个元素添加到数组的末尾，并返回新数组的长度。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element1<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">,</span> elementN<span class="token punctuation">)</span><span class="token operator">*</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">@params</span><span class="token template-punctuation string">`</span></span>：数组要新增的元素（任意数据类型，一次可添加多个，用逗号隔开）<span class="token operator">*</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">@return</span><span class="token template-punctuation string">`</span></span>：返回数组新增元素后的长度<span class="token operator">*</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">是否改变原数组</span><span class="token template-punctuation string">`</span></span>：改变<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123678</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-unshift"><a href="#1-2-unshift" class="headerlink" title="1.2 unshift"></a>1.2 unshift</h3><blockquote><p><code>unshift()</code> 方法将一个或多个元素添加到数组的开头，并返回该数组的新长度。此方法更改数组的长度。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>element1<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">,</span> elementN<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><code>@params</code>：数组要新增的元素（任意数据类型，一次可添加多个，用逗号隔开）</li><li><code>@return</code>：返回数组新增元素后的长度</li><li><code>是否改变原数组</code>：改变</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 78 123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-pop"><a href="#1-3-pop" class="headerlink" title="1.3 pop"></a>1.3 pop</h3><blockquote><p><code>pop()</code> 方法从数组中删除最后一个元素，并返回该元素的值。此方法更改数组的长度。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><code>@params</code>：无</li><li><code>@return</code>：返回数组被删除的元素</li><li><code>是否改变原数组</code>：改变</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1, 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-shift"><a href="#1-4-shift" class="headerlink" title="1.4 shift"></a>1.4 shift</h3><blockquote><p><code>shift()</code> 方法从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">js复制代码<span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><code>@params</code>：无</li><li><code>@return</code>：返回数组被删除的元素</li><li><code>是否改变原数组</code>：改变</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2, 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-5-splice"><a href="#1-5-splice" class="headerlink" title="1.5 splice"></a>1.5 splice</h3><blockquote><p><code>splice()</code> 方法</p><ol><li>通过删除或替换现有元素</li><li>或者原地添加新的元素来修改数组</li><li>并以数组形式返回被修改的内容。此方法会改变原数组。</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基础语法</span>array<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> howmany<span class="token punctuation">,</span> item1<span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>itemX<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><code>@params</code>：不限参数，第一个参数是 <strong>必选</strong> 规定从何处添加&#x2F;删除元素（数组的下标，代表从第n个元素起），第二个参数 <strong>可选</strong> 表示要删除（或被替代，取决于第三个参数是否有值）的元素个数，第三个参数 <strong>可选</strong><br>起，表示要添加（或替代）的元素</li><li><code>@return</code>：返回值是一个数组，里面是删除项</li><li><code>是否改变原数组</code>：改变</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 删除</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 只传第一个参数，表示删除从下标为 1 的元素起，到最后一个元素</span><span class="token keyword">var</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 1 ]</span><span class="token comment">// arr.splice(0)：可以清空数组，把原始数组中的内容基于新数组储存起来（有点类似于数组克隆）</span><span class="token comment">// arr.splice(arr.length-1)：删除最后一项</span><span class="token comment">// arr.splice(0, 1)：删除第一项</span><span class="token comment">// 增加</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 第二个参数为0，表示不删除，之后的参数表示插进数组，下标从1开始，之前的元素往后挪</span><span class="token keyword">var</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// []</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 8,9,2,3]</span><span class="token comment">// 改（替代）</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 第二个参数为1，表示替代掉下标为1的元素</span><span class="token keyword">var</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1,8,9,3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、截取拼接"><a href="#二、截取拼接" class="headerlink" title="二、截取拼接"></a>二、截取拼接</h2><h3 id="2-1-slice-startIndex-endIndex"><a href="#2-1-slice-startIndex-endIndex" class="headerlink" title="2.1 slice [startIndex, endIndex)"></a>2.1 slice [startIndex, endIndex)</h3><blockquote><p><code>slice()</code> 方法返回一个新的数组对象，这一对象是一个由 begin 和 end 决定的原数组的浅拷贝。原始数组不会被改变。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">[</span>begin<span class="token punctuation">[</span><span class="token punctuation">,</span> end<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><p><strong>注意：复制的数组包含 start 下标元素，不包含 end 下标元素</strong></p><ul><li><code>@params</code>：第一个参数start表示起始下标与第二个参数end表示结束下标，起始 start 必传，end 不传默认复制到数组结束位置，可使用负值从数组的尾部选取元素。</li><li><code>@return</code>：返回复制的子数组</li><li><code>是否改变原数组</code>：不改变</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 3, 6]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 6, 7, 8]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-concat"><a href="#2-2-concat" class="headerlink" title="2.2 concat"></a>2.2 concat</h3><blockquote><p><code>concat()</code> 方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基础语法</span><span class="token keyword">var</span> new_array <span class="token operator">=</span> old_array<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>value1<span class="token punctuation">[</span><span class="token punctuation">,</span> value2<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">[</span><span class="token punctuation">,</span> valueN<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><code>@params</code>：多个任意项，可以是数组，可以是单个项</li><li><code>@return</code>：返回合并后的新数组</li><li><code>是否改变原数组</code>：不改变</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 1, 0, 0]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3];</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、查找判断"><a href="#三、查找判断" class="headerlink" title="三、查找判断"></a>三、查找判断</h2><h3 id="3-1-includes"><a href="#3-1-includes" class="headerlink" title="3.1 includes"></a>3.1 includes</h3><blockquote><p><code>includes()</code> 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回 false。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>valueToFind<span class="token punctuation">[</span><span class="token punctuation">,</span> fromIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><code>@params</code>：参数一必选，表示要查询的元素，参数二可选，表示从指定位置查起（若为负数，从后查起，负数超过数组长度，则置为 0）</li><li><code>@return</code>：返回布尔值</li><li><code>是否改变原数组</code>：不改变</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3]</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-find"><a href="#3-2-find" class="headerlink" title="3.2 find"></a>3.2 find</h3><blockquote><p><code>find()</code> 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">javascript复制代码<span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><code>@params</code>：<code>[函数]</code> thisAr表示执行回调时this指向的对象</li><li><code>@return</code>：第一个满足条件的元素或 undefined</li><li><code>是否改变原数组</code>：不改变</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> found <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> item <span class="token operator">></span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>found<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [5, 12, 8, 130, 44];</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-findIndex"><a href="#3-3-findIndex" class="headerlink" title="3.3 findIndex"></a>3.3 findIndex</h3><blockquote><p><code>findIndex()</code> 方法返回数组中满足提供的测试函数的第一个元素的索引。若没有找到对应元素则返回 -1。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>callback<span class="token punctuation">[</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><code>@params</code>：函数，thisAr表示执行回调时this指向的对象</li><li><code>@return</code>：第一个满足条件的索引或 -1</li><li><code>是否改变原数组</code>：不改变</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> found <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">element</span> <span class="token operator">=></span> element <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>found<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [5, 12, 8, 130, 44];</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-indexOf"><a href="#3-4-indexOf" class="headerlink" title="3.4 indexOf"></a>3.4 indexOf</h3><blockquote><p><code>indexOf()</code> 方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回 -1。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>searchElement<span class="token punctuation">[</span><span class="token punctuation">,</span> fromIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><code>@params</code>：参数一必传，表示要查询的元素，参数二可选，表示从指定位置查起</li><li><code>@return</code>：如若检索项存在，返回其下标，没有就返回 -1</li><li><code>是否改变原数组</code>：不改变</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-5-lastIndexOf"><a href="#3-5-lastIndexOf" class="headerlink" title="3.5 lastIndexOf"></a>3.5 lastIndexOf</h3><blockquote><p><code>lastIndexOf()</code> 方法返回指定元素（也即有效的 JavaScript 值或变量）在数组中的最后一个的索引，如果不存在则返回 -1。从数组的后面向前查找，从 <code>fromIndex</code> 处开始。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>searchElement<span class="token punctuation">[</span><span class="token punctuation">,</span> fromIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><code>@params</code>：参数一必传，表示要查询的元素，参数二可选，表示从指定位置查起</li><li><code>@return</code>：如若检索项存在，返回其下标，没有就返回 -1</li><li><code>是否改变原数组</code>：不改变</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-1-sort"><a href="#4-1-sort" class="headerlink" title="4.1 sort"></a>4.1 sort</h3><blockquote><p><code>sort()</code> 方法用原地算法对数组的元素进行排序，并返回数组。排序不一定是稳定的。默认排序顺序是根据字符串 Unicode 码点。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">[</span>compareFunction<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><p><code>@params</code>：<code>[函数]</code> <strong>可选</strong></p></li><li><p><code>@return</code>：排序后的数组</p></li><li><p><code>是否改变原数组</code>：改变</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> res1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span> <span class="token comment">// [1,3,9,2,5,3,7,4,5]</span><span class="token keyword">var</span> res2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> b <span class="token operator">-</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span> <span class="token comment">// [9,7,5,5,4,3,3,2,1]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// 留给你们自己思考 (●'◡'●)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-reverse"><a href="#4-2-reverse" class="headerlink" title="4.2 reverse"></a>4.2 reverse</h3><blockquote><p><code>reverse()</code> 方法将数组中元素的位置颠倒，并返回该数组。数组的第一个元素会变成最后一个，数组的最后一个元素变成第一个。该方法会改变原数组。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><code>@params</code>：无</li><li><code>@return</code>：倒转排序后的数组</li><li><code>是否改变原数组</code>：改变</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [5, 4, 3, 3, 2, 1]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// 留给你们自己思考 (●'◡'●)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、转字符串"><a href="#五、转字符串" class="headerlink" title="五、转字符串"></a>五、转字符串</h2><h3 id="5-1-join"><a href="#5-1-join" class="headerlink" title="5.1 join"></a>5.1 join</h3><blockquote><p><code>join()</code> 方法将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串。如果数组只有一个项目，那么将返回该项目而不使用分隔符。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">[</span>separator<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><code>@params</code>：指定的分隔符 （字符串得加””包裹 不然会报语法错误）</li><li><code>@return</code>：转换后的字符串</li><li><code>是否改变原数组</code>：不改变</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1-3-9 (type:string)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 3, 9];</span><span class="token comment">// 以+分隔</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1+3+9 (type:string)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-toString"><a href="#5-2-toString" class="headerlink" title="5.2 toString"></a>5.2 toString</h3><blockquote><p><code>toString()</code> 返回一个字符串，表示指定的数组及其元素。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><code>@params</code>：无</li><li><code>@return</code>：转换后的字符串</li><li><code>是否改变原数组</code>：不改变</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1,2,3,3,4,5 (type:string)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 3, 4, 5];</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、遍历映射"><a href="#六、遍历映射" class="headerlink" title="六、遍历映射"></a>六、遍历映射</h2><h3 id="6-1-for"><a href="#6-1-for" class="headerlink" title="6.1 for"></a>6.1 for</h3><blockquote><p>for 循环性能最佳，内部可以阻塞</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 长度一般尽量先用赋值于变量，提升性能</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>asas<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// ... continue; // 打断当次循环，进入下次循环 break; // 直接打断循环，跳出循环 &#125; ``` ### 6.2 forEach></span>    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">forEach()</span><span class="token template-punctuation string">`</span></span> 方法对数组的每个元素执行一次给定的函数。    <span class="token operator">></span>    <span class="token operator">></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">javascript        > // 基础语法    > arr.forEach(function(currentValue, index, arr), thisvalue)        * </span><span class="token template-punctuation string">`</span></span>@params<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">：</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">[</span>函数 必传<span class="token punctuation">]</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> 第一个参数是 **必选** 表示数组的下标，从第n个元素起，第二个参数 **可选** 表示要删除（或被替代，取决于第三个参数是否有值）的元素个数，第三个参数 **可选**    表示要添加（或替代）的元素 第四个参数 **可选** 表示传递给函数的值一般用 "this" 值。_如果这个参数为空， "undefined" 会传递给 "this" 值_    * </span><span class="token template-punctuation string">`</span></span>@<span class="token keyword">return</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">：无/undefined    * </span><span class="token template-punctuation string">`</span></span>是否改变原数组`：改变    <span class="token operator">**</span>注意：除了抛出异常以外，没有办法中止或跳出 <span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 循环，即<span class="token keyword">break</span>、<span class="token keyword">continue</span>、async<span class="token operator">/</span><span class="token keyword">await</span>都无效<span class="token operator">**</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array1<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">element</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// expected output: "a"</span><span class="token comment">// expected output: "b"</span><span class="token comment">// expected output: "c"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>### 6.3 map&gt; `map()` 方法创建一个新数组，其结果是该数组中的每个元素是调用一次提供的函数后的返回值。&gt;&gt; <pre class="line-numbers language-c" data-language="c"><code class="language-c">c复制代码<span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span>element<span class="token punctuation">[</span><span class="token punctuation">,</span> index<span class="token punctuation">[</span><span class="token punctuation">,</span> array<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>* `@params`：`[函数 必传]` 第一个参数是 **必选** 表示当前元素的值，第二个参数 **可选** 表示当前元素的索引值，第三个参数 **可选** 表示当前元素属于的数组对象， 第四个参数 **可选**表示对象作为该执行回调时使用，传递给函数，用作 &quot;this&quot; 的值。 _如果省略了 thisValue，或者传入 null、undefined，那么回调函数的 this 为全局对象_。* `@return`：新的数组* `是否改变原数组`：不改变(数组中全是基本类别) 改变(数组中元素是引用类型)<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> map1 <span class="token operator">=</span> array1<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 8, 18, 20]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>### 6.4 filter&gt; `filter()` 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。&gt;&gt; <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">   <span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> thisValue<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>* `@params`：`[函数 必传]` 第一个参数是 **必选** 表示当前元素的值，第二个参数 **可选** 表示当前元素的索引值，第三个参数 **可选** 起，表示当前元素属于的数组对象， 第四个参数 **可选**表示对象作为该执行回调时使用，传递给函数，用作 &quot;this&quot; 的值。如果省略了 thisValue ，_&quot;this&quot; 的值为 &quot;undefined&quot;_* `@return`：满足条件的元素组成的新数组* `是否改变原数组`：不改变<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> res <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=></span> num <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 6, 10 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>### 6.5 every&gt; `every()` 方法测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。&gt;&gt; <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">   <span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> thisValue<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>* `@params`：`[函数 必传]` 第一个参数 **必选** 表示当前元素的值，第二个参数 **可选** 表示当前元素的索引值，第三个参数 **可选** 表示当前元素属于的数组对象， 第四个参数 **可选**表示对象作为该执行回调时使用，传递给函数，用作 &quot;this&quot; 的值。 _如果省略了 thisValue ，&quot;this&quot; 的值为 &quot;undefined&quot;_* `@return`：Boolean 值* `是否改变原数组`：不改变<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">let</span> arrs <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> item <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrs<span class="token punctuation">)</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>### 6.6 some&gt; `some()` 测试一个数组内的是不是至少有一个元素是否都能通过某个指定函数的测试。它返回一个布尔值。&gt;&gt; <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span>element<span class="token punctuation">[</span><span class="token punctuation">,</span> index<span class="token punctuation">[</span><span class="token punctuation">,</span> array<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>* `@params`：`[函数 必传]` 第一个参数是 **必选** 表示当前元素的值，第二个参数 **可选** 表示当前元素的索引值，第三个参数 **可选** 表示当前元素属于的数组对象， 第四个参数 **可选**表示对象作为该执行回调时使用，传递给函数，用作 &quot;this&quot; 的值。 _如果省略了 thisValue ，&quot;this&quot; 的值为 &quot;undefined&quot;_* `@return`：Boolean 值* `是否改变原数组`：不改变<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">let</span> arrs <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> item <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrs<span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>### 6.7 reduce&gt; `reduce()` 方法对数组中的每个元素执行一个由您提供的 `reducer` 函数(升序执行)，将其结果汇总为单个返回值。&gt;&gt; <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span>accumulator<span class="token punctuation">,</span> currentValue<span class="token punctuation">[</span><span class="token punctuation">,</span> index<span class="token punctuation">[</span><span class="token punctuation">,</span> array<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">,</span> initialValue<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>* `@params`：`[函数 必传]` 第一个参数 **必选** 表示_初始值_, 或者计算结束后的返回值，第二个参数 **可选** 表示当前元素，第三个参数 **可选** 表示当前元素的索引， 第四个参数 **可选**表示元素所属的数组对象，第五个参数 **可选** 表示传递给函数的初始值* `@return`：函数累计处理的结果* `是否改变原数组`：不改变<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**常用三种reduce写法*/</span><span class="token comment">// 1. 数组求和</span><span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> accumulator <span class="token operator">+</span> currentValue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6 (type:number)</span><span class="token comment">// 2. 数组去重</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> current</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ?</span><span class="token comment">// 3. 数组扁平化</span><span class="token keyword">let</span> flat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>prev<span class="token punctuation">,</span> <span class="token operator">...</span>cur<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flat<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 5, 6, 7, 8]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>### 6.8 reduceRight&gt; `reduceRight()` 方法接受一个函数作为累加器（accumulator）和数组的每个值（从右到左）将其减少为单个值。&gt;&gt; <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">   <span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">reduceRight</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">total<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> currentIndex<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> initialValue<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>* `@params`：`[函数 必传]` 第一个参数 **必选** 表示_初始值_, 或者计算结束后的返回值，第二个参数 **可选** 表示当前元素，第三个参数 **可选** 表示当前元素的索引， 第四个参数 **可选**表示元素所属的数组对象，第五个参数 **可选** 表示传递给函数的初始值* `@return`：函数累计处理的结果* `是否改变原数组`：不改变<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduceRight</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token operator">=></span> accumulator<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [4, 5, 2, 3, 0, 1]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>## 七、获取键值### 7.2 keys&gt; `keys()` 方法返回一个包含数组中每个索引键的 `Array Iterator` 对象。&gt;&gt; <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> iterator <span class="token operator">=</span> array1<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回一个迭代器对象</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> iterator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 1 2</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>### 7.3 values&gt; `values()` 方法返回一个新的 `Array Iterator` 对象，该对象包含数组每个索引的值。&gt;&gt; <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> iterator <span class="token operator">=</span> array1<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回一个迭代器对象</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> iterator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a b c</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>## 八、其他方法### 8.1 fill&gt; `fill()` 方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。不包括终止索引。&gt;&gt; <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>value<span class="token punctuation">[</span>start<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>* `@params`：第一个参数 **必选** 表示填充的值，第二个参数 **可选** 表示开始填充位置，第三个参数 **可选** 表示停止填充位置* `@return`：指定位置被填充为固定值的原数组* `是否改变原数组`：改变<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// arr = [0, 0, 0, 0]</span><span class="token comment">// 多用于创建指定长度的空数组填充</span><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>arr1<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// arr1 = [1, 1, 1]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>### 8.2 flat&gt; `flat()` 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。不改变原数组。_数组扁平化_&gt;&gt; <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基础语法</span><span class="token keyword">var</span> newArray <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>depth<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>* `@params`：可选深度\[类型为数字]* `@return`：函数累计处理的结果* `是否改变原数组`：不改变<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 扁平化数组</span><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>newArr1 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4]</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>newArr2 <span class="token operator">=</span> arr2<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 5, 6]</span><span class="token comment">//使用 Infinity，可展开任意深度的嵌套数组</span><span class="token keyword">let</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>newArr3 <span class="token operator">=</span> arr3<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">,</span> newArr3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span><span class="token comment">// 去除空项</span><span class="token keyword">let</span> arr4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>newArr4 <span class="token operator">=</span> arr4<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 留给你们自己思考 (●'◡'●)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>### 8.4 copyWithin&gt; `copyWithin()` 方法浅复制数组的一部分到同一数组中的另一个位置，并返回它，不会改变原数组的长度。&gt;&gt; <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">sql</span>复制代码arr<span class="token punctuation">.</span>copyWithin<span class="token punctuation">(</span>target<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword">start</span><span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword">end</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>* `@params`：第一个参数 **必选** 表示复制到指定目标索引位置，第二个参数 **可选** 表示元素复制得起始位置，第三个参数 **可选** 表示停止复制的索引位置。_如果为负值，表示倒数。_* `@return`：改变后的数组，长度不变* `是否改变原数组`：改变<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (5) ['d', 'b', 'c', 'd', 'e']</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 留给你们自己思考 (●'◡'●)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token comment">// (5) ['d', 'd', 'e', 'd', 'e']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS常识</title>
      <link href="/2024/04/19/js-chang-shi/"/>
      <url>/2024/04/19/js-chang-shi/</url>
      
        <content type="html"><![CDATA[<pre><code>1.document.write(&quot;&quot;); 输出语句</code></pre><p>　　2.JS中的注释为&#x2F;&#x2F; 和&#x2F;* *&#x2F;<br>　　3.传统的HTML文档顺序是:document-&gt;html-&gt;(head,body)<br>　　4.一个浏览器窗口中的DOM顺序是:window-&gt;(navigator,screen,history,location,document)<br>　　5.得到表单中元素的名称和值:document.getElementById(“表单中元素的ID号”).name(或value)<br>　　6.一个小写转大写的JS: document.getElementById(“output”).value &#x3D; document.getElementById(“input”).value.toUpperCase();<br>　　7.JS中的值类型:String,Number,Boolean,Null,Object,Function<br>　　8.JS中的字符型转换成数值型:parseInt(),parseFloat()<br>　　9.JS中的数字转换成字符型:(“”+变量)<br>　　10.JS中的取字符串长度是:(length)<br>　　11.JS中的字符与字符相连接使用+号.<br>　　12.JS中的比较操作符有:&#x3D;&#x3D;等于,!&#x3D;不等于,&gt;,&gt;&#x3D;,&lt;.&lt;&#x3D;<br>　　13.JS中声明变量一般使用 let 来进行声明<br>　　14.JS中的判断语句结构:if(condition){}else{}<br>　　15.JS中的循环结构:for([initial e­xpression];[condition];[upadte e­xpression]) {inside loop}<br>　　16.循环中止的命令是:break<br>　　17.JS中的函数定义:function functionName([parameter],…){statement[s]}<br>　　18.当文件中出现多个form表单时.可以用document.forms[0],document.forms[1]来代替.<br>　　19.窗口:打开窗口window.open(), 关闭一个窗口:window.close(), 窗口本身:self<br>　　20.状态栏的设置:window.status&#x3D;”字符”;<br>　　21.弹出提示信息:window.alert(“字符”);<br>　　22.弹出确认框:window.confirm();<br>　　23.弹出输入提示框:window.prompt();<br>　　24.指定当前显示链接的位置:window.kk&#x3D;”URL”<br>　　25.取出窗体中的所有表单的数量:document.forms.length<br>　　26.关闭文档的输出流:document.close();<br>　　27.字符串追加连接符:+&#x3D;<br>　　28.创建一个文档元素:document.createElement(),document.createTextNode()<br>　　29.得到元素的方法:document.getElementById()<br>　　30.设置表单中所有文本型的成员的值为空:<br>　　var form &#x3D; window.document.forms[0]<br>　　for (var i &#x3D; 0; i&lt;form.elements.length;i++){<br>　　 if (form.elements[i].type &#x3D;&#x3D; “text”){<br>　　 form.elements[i].value &#x3D; “”;<br>　　 }<br>　　}<br>　　31.复选按钮在JS中判断是否选中:document.forms[0].checkThis.checked (checked属性代表为是否选中返回TRUE或FALSE)<br>　　32.单选按钮组(单选按钮的名称必须相同):取单选按钮组的长度document.forms[0].groupName.length<br>　　33.单选按钮组判断是否被选中也是用checked.<br>　　34.下拉列表框的值:document.forms[0].selectName.options[n].value (n有时用下拉列表框名称加上.selectedIndex来确定被选中的值)<br>　　35.字符串的定义:var myString &#x3D; new String(“This is lightsword”);<br>　　36.字符串转成大写:string.toUpperCase(); 字符串转成小写:string.toLowerCase();<br>　　37.返回字符串2在字符串1中出现的位置:String1.indexOf(“String2”)!&#x3D;-1则说明没找到.<br>　　38.取字符串中指定位置的一个字符:StringA.charAt(9);<br>　　39.取出字符串中指定起点和终点的子字符串:stringA.substring(2,6);<br>　　40.数学函数:Math.PI(返回圆周率),Math.SQRT2(返回开方),Math.max(value1,value2)返回两个数中的最在值,Math.pow(value1,10)返回value1的十次方,Math.round(value1)四舍五入函数,Math.floor(Math.random()*(n+1))返回随机数<br>　　41.定义日期型变量:var today &#x3D; new Date();<br>　　42.日期函数列表:dateObj.getTime()得到时间,dateObj.getYear()得到年份,dateObj.getFullYear()得到四位的年份,dateObj.getMonth()得到月份,dateObj.getDate()得到日,dateObj.getDay()得到日期几,dateObj.getHours()得到小时,dateObj.getMinutes()得到分,dateObj.getSeconds()得到秒,dateObj.setTime(value)设置时间,dateObj.setYear(val)设置年,dateObj.setMonth(val)设置月,dateObj.setDate(val)设置日,dateObj.setDay(val)设置星期几,dateObj.setHours设置小时,dateObj.setMinutes(val)设置分,dateObj.setSeconds(val)设置秒 [注意:此日期时间从0开始计]<br>　　43.FRAME的表示方式: [window.]frames[n].ObjFuncVarName,frames[“frameName”].ObjFuncVarName,frameName.ObjFuncVarName<br>　　44.parent代表父亲对象,top代表最顶端对象<br>　　45.打开子窗口的父窗口为:opener<br>　　46.表示当前所属的位置:this<br>　　47.当在超链接中调用JS函数时用:(Javascript:)来开头后面加函数名<br>　　48.在老的浏览器中不执行此JS:<!-- //--><br>　　49.引用一个文件式的JS:<script type="text/Javascript" src="aaa.js"></script><br>　　50.指定在不支持脚本的浏览器显示的HTML:<noscript></noscript><br>　　51.当超链和ONCLICK事件都有时,则老版本的浏览器转向a.html,否则转向b.html.例:<a href="a.html" onclick="kk='b.html';return false">dfsadf</a><br>　　52.JS的内建对象有:Array,Boolean,Date,Error,EvalError,Function,Math,Number,Object,RangeError,ReferenceError,RegExp,String,SyntaxError,TypeError,URIError<br>　　53.JS中的换行:\n<br>　　54.窗口全屏大小:<script>function fullScreen(){ this.moveTo(0,0);this.outerWidth=screen.availWidth;this.outerHeight=screen.availHeight;}window.maximize=fullScreen;</script><br>　　55.JS中的all代表其下层的全部元素<a href="http://bizhi.knowsky.com/">http://bizhi.knowsky.com/</a><br>　　56.JS中的焦点顺序:document.getElementByid(“表单元素”).tabIndex &#x3D; 1<br>　　57.innerHTML的值是表单元素的值:如<p id="para">“how are <em>you</em>“</p>,则innerHTML的值就是:how are <em>you</em><br>　　58.innerTEXT的值和上面的一样,只不过不会把<em>这种标记显示出来.<br>　　59.contentEditable可设置元素是否可被修改,isContentEditable返回是否可修改的状态.<br>　　60.isDisabled判断是否为禁止状态.disabled设置禁止状态<br>　　61.length取得长度,返回整型数值<br>　　62.addBehavior()是一种JS调用的外部函数文件其扩展名为.htc<br>　　63.window.focus()使当前的窗口在所有窗口之前.<br>　　64.blur()指失去焦点.与FOCUS()相反.<br>　　65.select()指元素为选中状态.<br>　　66.防止用户对文本框中输入文本:onfocus&#x3D;”this.blur()”<br>　　67.取出该元素在页面中出现的数量:document.all.tags(“div(或其它HTML标记符)”).length<br>　　68.JS中分为两种窗体输出:模态和非模态.window.showModaldialog(),window.showModeless()<br>　　69.状态栏文字的设置:window.status&#x3D;’文字’,默认的状态栏文字设置:window.defaultStatus &#x3D; ‘文字.’;<br>　　70.添加到收藏夹:external.AddFavorite(“<a href="http://www.xrss.cn","jaskdlf/">http://www.xrss.cn&quot;,&quot;jaskdlf</a>“);<br>　　71.JS中遇到脚本错误时不做任何操作:window.onerror &#x3D; doNothing; 指定错误句柄的语法为:window.onerror &#x3D; handleError;<br>　　72.JS中指定当前打开窗口的父窗口:window.opener,支持opener.opener…的多重继续.<br>　　73.JS中的self指的是当前的窗口<br>　　74.JS中状态栏显示内容:window.status&#x3D;”内容”<br>　　75.JS中的top指的是框架集中最顶层的框架<br>　　76.JS中关闭当前的窗口:window.close();<br>　　77.JS中提出是否确认的框:if(confirm(“Are you sure?”)){alert(“ok”);}else{alert(“Not Ok”);}<br>　　78.JS中的窗口重定向:window.navigate(“<a href="http://www.sina.com.cn/">http://www.sina.com.cn</a>“);<br>　　79.JS中的打印:window.print()<br>　　80.JS中的提示输入框:window.prompt(“message”,”defaultReply”);<br>　　81.JS中的窗口滚动条:window.scroll(x,y)<br>　　82.JS中的窗口滚动到位置:window.scrollby<br>　　83.JS中设置时间间隔:setInterval(“expr”,msecDelay)或setInterval(funcRef,msecDelay)或setTimeout<br>　　84.JS中的模态显示在IE4+行,在NN中不行:showModalDialog(“URL”[,arguments][,features]);<br>　　85.JS中的退出之前使用的句柄:function verifyClose(){event.returnValue&#x3D;”we really like you and hope you will stay longer.”;}} window.onbeforeunload&#x3D;verifyClose;<br>　　86.当窗体第一次调用时使用的文件句柄:onload()<br>　　87.当窗体关闭时调用的文件句柄:onunload()<br>　　88.window.location的属性: protocol(http:),hostname(<a href="http://www.example.com),port(80),host(www.example.com:80),pathname("/a/a.html"),hash("#giantGizmo",指跳转到相应的锚记),href(全部的信息)">www.example.com),port(80),host(www.example.com:80),pathname(&quot;/a/a.html&quot;),hash(&quot;#giantGizmo&quot;,指跳转到相应的锚记),href(全部的信息)</a><br>　　89.window.location.reload()刷新当前页面.<br>　　89-1.parent.location.reload()刷新父亲对象（用于框架）<br>　　89-2.opener.location.reload()刷新父窗口对象（用于单开窗口）<br>　　89-3.top.location.reload()刷新最顶端对象（用于多开窗口）<br>　　90.window.history.back()返回上一页,window.history.forward()返回下一页,window.history.go(返回第几页,也可以使用访问过的URL)<br>　　91.document.write()不换行的输出,document.writeln()换行输出<br>　　92.document.body.noWrap&#x3D;true;防止链接文字折行.<br>　　93.变量名.charAt(第几位),取该变量的第几位的字符.<br>　　94.”abc”.charCodeAt(第几个),返回第几个字符的ASCii码值.<br>　　95.字符串连接:string.concat(string2),或用+&#x3D;进行连接<br>　　96.变量.indexOf(“字符”,起始位置),返回第一个出现的位置(从0开始计算)<br>　　97.string.lastIndexOf(searchString[,startIndex])最后一次出现的位置.<br>　　98.string.match(regExpression),判断字符是否匹配.<br>　　99.string.replace(regExpression,replaceString)替换现有字符串.<br>　　100.string.split(分隔符)返回一个数组存储值.<br>　　101.string.substr(start[,length])取从第几位到指定长度的字符串.<br>　　102.string.toLowerCase()使字符串全部变为小写.<br>　　103.string.toUpperCase()使全部字符变为大写.<br>　　104.parseInt(string[,radix(代表进制)])强制转换成整型.<br>　　105.parseFloat(string[,radix])强制转换成浮点型.<br>　　106.isNaN(变量):测试是否为数值型.<br>　　107.定义常量的关键字:const,定义变量的关键字:var， let</p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js 常用简写技巧</title>
      <link href="/2024/04/19/js-chang-yong-jian-xie-ji-qiao/"/>
      <url>/2024/04/19/js-chang-yong-jian-xie-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h1 id="js-常用简写技巧（干货满满）"><a href="#js-常用简写技巧（干货满满）" class="headerlink" title="js 常用简写技巧（干货满满）"></a>js 常用简写技巧（干货满满）</h1><p><a href="https://juejin.cn/user/2450127265999335/posts">lwlcode</a></p><p>分享一些自己常用的js简写技巧，长期更新，会着重挑选一些实用的简写技巧，使自己的代码更简洁优雅~</p><blockquote><p>这里只会收集一些大多数人不知道的用法，但是确实能提高自己的编码技巧，像ES6那些基础的简写语法或者是三目运算符代替<code>if else</code>那些我觉得是基础，没必要写在这里浪费精力。</p></blockquote><p><strong>注意本篇内容涉及到的语法从ES6到ES11不等，具体使用需要考虑项目兼容性问题！</strong></p><p>另外推荐一个只用一行代码实现一个方法的实用网站<a href="https://link.juejin.cn/?target=https://1loc.dev/" title="https://1loc.dev/">1loc.dev</a>，<a href="https://link.juejin.cn/?target=https://github.com/phuocng/1loc" title="https://github.com/phuocng/1loc">github</a></p><h3 id="If-Else-用-或-运算符进行简化"><a href="#If-Else-用-或-运算符进行简化" class="headerlink" title="If-Else 用 || 或 ?? 运算符进行简化"></a>If-Else 用 || 或 ?? 运算符进行简化</h3><p>逻辑或操作符<code>||</code>，这里要注意的是<code>0</code>和<code>&#39;&#39;</code>也会认为是false</p><p>如果<code>||</code>前面的值是<code>0 &#39;&#39; false null undefined NaN</code>其中的任意一种，则直接返回<code>||</code>后面的值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> a <span class="token operator">=</span> obj <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 等价于 =>></span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> a<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span>obj <span class="token operator">===</span> <span class="token string">""</span> <span class="token operator">||</span>obj <span class="token operator">===</span> <span class="token boolean">false</span> <span class="token operator">||</span>obj <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span>obj <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span><span class="token function">isNaN</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>a <span class="token operator">=</span> obj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator" title="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator">空值合并操作符</a><code>??</code>如果没有定义左侧返回右侧。如果是，则返回左侧。</p><p>这种方法非常实用，有时候仅仅只是想判断一个字段有没有值，而不是把空字符串或者0也当做false处理</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> a <span class="token operator">=</span> obj <span class="token operator">??</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 等价于 =>></span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> a<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span>obj <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>a <span class="token operator">=</span> obj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入框非空的判断（有时候不想把0当成false可以用此方法。比如分数0也是个值，这种情况就不能认为是false）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">!==</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 等价于 ==></span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value <span class="token operator">??</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="includes的正确使用姿势"><a href="#includes的正确使用姿势" class="headerlink" title="includes的正确使用姿势"></a>includes的正确使用姿势</h3><p>在上面逻辑或操作符<code>||</code>代码段里有一个if判断比较长，这时候就可以用<code>includes</code>去简化代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span>obj <span class="token operator">===</span> <span class="token string">""</span> <span class="token operator">||</span>obj <span class="token operator">===</span> <span class="token boolean">false</span> <span class="token operator">||</span>obj <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span>obj <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token comment">// 使用includes简化</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="防止崩溃的可选链"><a href="#防止崩溃的可选链" class="headerlink" title="防止崩溃的可选链(?.)"></a>防止崩溃的可选链(?.)</h3><p><a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining" title="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining">可选链操作符</a><code>?.</code><br>如果访问未定义的属性，则会产生错误。这就是可选链的用武之地。 在未定义属性时使用可选链运算符，undefined将返回而不是错误。这可以防止你的代码崩溃。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> student <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"lwl"</span><span class="token punctuation">,</span><span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token string">"New York"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment">// 一层一层判断</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student <span class="token operator">&amp;&amp;</span> student<span class="token punctuation">.</span>address <span class="token operator">&amp;&amp;</span> student<span class="token punctuation">.</span>address<span class="token punctuation">.</span>ZIPCode<span class="token punctuation">)</span> <span class="token comment">// 输出：undefined</span><span class="token comment">// 使用可选链操作符</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student<span class="token operator">?.</span>address<span class="token operator">?.</span>ZIPCode<span class="token punctuation">)</span> <span class="token comment">// 输出：undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可选链运算符也可以用于方法调用。如果方法存在，它将被调用，否则将返回 <code>undefined</code>。例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello from foo!'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span>foo<span class="token operator">?.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 输出：'Hello from foo!'</span>obj<span class="token punctuation">.</span>bar<span class="token operator">?.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 输出：undefined，因为 bar 方法不存在</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样，数组也可以使用。例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 输出：1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 输出：undefined</span><span class="token comment">// 使用可选链运算符</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token operator">?.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 输出：1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token operator">?.</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 输出：undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token operator">?.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">?.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出：'1'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="逻辑空赋值"><a href="#逻辑空赋值" class="headerlink" title="逻辑空赋值(??&#x3D;)"></a>逻辑空赋值(??&#x3D;)</h3><p><a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment" title="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment">逻辑空赋值</a><code>??=</code><br>逻辑空赋值运算符<code>(x ??= y)</code>仅在 x 是 nullish (null 或 undefined) 时对其赋值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">50</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>duration <span class="token operator">??=</span> <span class="token number">10</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>duration<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// expected output: 50</span>a<span class="token punctuation">.</span>speed <span class="token operator">??=</span> <span class="token number">25</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>speed<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// expected output: 25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="快速生成1-10的数组"><a href="#快速生成1-10的数组" class="headerlink" title="快速生成1-10的数组"></a>快速生成1-10的数组</h3><p>生成0-9，利用了数组的下标值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 方法一</span><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment">// 方法二</span><span class="token keyword">const</span> arr2 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token operator">=></span> k<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成1-10，通过map的特性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=></span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="快速生成10个0的数组"><a href="#快速生成10个0的数组" class="headerlink" title="快速生成10个0的数组"></a>快速生成10个0的数组</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="快速生成10个-的数组（二维数组）"><a href="#快速生成10个-的数组（二维数组）" class="headerlink" title="快速生成10个[]的数组（二维数组）"></a>快速生成10个[]的数组（二维数组）</h3><p><strong>注意：</strong> 二维数组不能直接写成<code>new Array(10).fill([])</code>（也就是fill方法不能传引用类型的值，<code>[]</code>换成<code>new Array()</code>也不行）,因为<code>fill</code>里传入引用类型值会导致每一个数组都指向同一个地址，改变一个数据的时候其他数据也会随之改变，详见<a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/fill" title="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/fill">mdn</a>官方说明</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 错误写法</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 注意这是错误写法，不要这么写</span><span class="token comment">// 正确写法</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组降维"><a href="#数组降维" class="headerlink" title="数组降维"></a>数组降维</h3><p>你是否还在用递归给一个多维数组降维？如果是，那你应该知道一下es6的<br><a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat" title="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat">flat()</a> 方法。</p><p>如果不确定需要降维的数组有多深，可以传入最大值作为参数<code>Infinity</code>，默认值深度为1</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token keyword">const</span> flatArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span> <span class="token comment">// 输出 [1, 2, 3, 4, 5, 6]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>你是否在使用<code>map</code>的时候想要对数组降维？大概像这样：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">const</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> <span class="token punctuation">[</span>v<span class="token punctuation">,</span> v <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 [1, 2, 2, 4, 3, 6, 4, 8]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其实js也提供了更简便的方法，那就是<a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap" title="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap">flatMap()</a>，可以改成这样：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> <span class="token punctuation">[</span>v<span class="token punctuation">,</span> v <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Set集合实践：数组去重、交集、并集、差集"><a href="#Set集合实践：数组去重、交集、并集、差集" class="headerlink" title="Set集合实践：数组去重、交集、并集、差集"></a>Set集合实践：数组去重、交集、并集、差集</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 1.数组去重</span><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">let</span> result1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span> <span class="token comment">// [1, 3, 2, 4]</span><span class="token comment">// 2.交集</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token keyword">let</span> result2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span> <span class="token comment">// [3, 4]</span><span class="token comment">// 3.并集</span><span class="token keyword">let</span> result3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">,</span> <span class="token operator">...</span>arr2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result3<span class="token punctuation">)</span> <span class="token comment">// [1, 3, 2, 4, 7]</span><span class="token comment">// 4.差集</span><span class="token keyword">let</span> result4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result4<span class="token punctuation">)</span> <span class="token comment">// [1, 2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在没有第三个变量的情况下交换两个变量"><a href="#在没有第三个变量的情况下交换两个变量" class="headerlink" title="在没有第三个变量的情况下交换两个变量"></a>在没有第三个变量的情况下交换两个变量</h3><p>在 JavaScript 中，你可以使用解构从数组中拆分值。这可以应用于交换两个变量而无需第三个</p><p>比较简单，es6语法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 交换变量</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>y<span class="token punctuation">,</span> x<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="将对象的值收集到数组中"><a href="#将对象的值收集到数组中" class="headerlink" title="将对象的值收集到数组中"></a>将对象的值收集到数组中</h3><p>用于<code>Object.values()</code>将对象的所有值收集到一个新数组中</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Matt"</span><span class="token punctuation">,</span> <span class="token literal-property property">country</span><span class="token operator">:</span> <span class="token string">"Finland"</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">35</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// LONGER FORM</span><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> info<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>info<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// SHORTHAND</span><span class="token keyword">const</span> data <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="指数运算符（用的不多）"><a href="#指数运算符（用的不多）" class="headerlink" title="指数运算符（用的不多）"></a>指数运算符（用的不多）</h3><p>你<code>Math.pow()</code>习惯把一个数字提高到一个幂吗？你知道你也可以使用<code>**</code>运算符吗？</p><p>虽然可以简写，不过我还是建议写成<code>Math.pow()</code>方法，代码更有语义化。</p><p><strong>注意：<code>**</code>运算符要求操作数为数值类型，不过在js里也能正常运行。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 8</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 8</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 2</span><span class="token number">4</span> <span class="token operator">**</span> <span class="token number">0.5</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 2</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 0.1111111111111111</span><span class="token number">3</span> <span class="token operator">**</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 0.1111111111111111</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 8 (参数被自动转换为数字)</span><span class="token string">'2'</span> <span class="token operator">**</span> <span class="token string">'3'</span><span class="token punctuation">;</span> <span class="token comment">// js中输出: 8，其他语言可能报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Math-floor-简写（用的不多）"><a href="#Math-floor-简写（用的不多）" class="headerlink" title="Math.floor() 简写（用的不多）"></a>Math.floor() 简写（用的不多）</h3><p>向下取整<code>Math.floor()</code>并不是什么新鲜事。但是你知道你也可以使用<code>~~</code>运算符吗？</p><p>同上虽然可以简写，不过我还是建议写成<code>Math.floor()</code>方法，代码更有语义化。</p><p><strong>注意：对于正数而言两者都是直接去掉小数位，但对于负数来说<code>Math.floor()</code>是向下取整，<code>~~</code>依然是只去掉小数位，整数位不变。</strong> 请看下面输出结果：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 3</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">5.7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 5</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: -3</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 10</span><span class="token operator">~</span><span class="token operator">~</span><span class="token number">3.14</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 3</span><span class="token operator">~</span><span class="token operator">~</span><span class="token number">5.7</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 5</span><span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: -2</span><span class="token operator">~</span><span class="token operator">~</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符(,)"></a>逗号运算符(,)</h3><blockquote><p><strong>逗号</strong>（ <strong><code>,</code></strong><br>）运算符对它的每个操作数从左到右求值，并返回最后一个操作数的值。这让你可以创建一个复合表达式，其中多个表达式被评估，复合表达式的最终值是其成员表达式中最右边的值。这通常用于为 <a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for" title="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for"><code>for</code></a> 循环提供多个参数。</p></blockquote><p>这里只说一下函数return的时候用逗号运算符简化代码的技巧，其他用法请直接点击查看<a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Comma_operator" title="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Comma_operator">官方文档</a>。</p><p>举一个简单的例子：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 简化前</span><span class="token keyword">const</span> <span class="token function-variable function">result</span> <span class="token operator">=</span> <span class="token parameter">arr</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token keyword">return</span> arr<span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出：[1, 2, 'a']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码需要返回修改后的数组，不能直接<code>return arr.push(&#39;a&#39;)</code>，因为<code>push</code>的返回值是修改后数组的长度，这时候可以用逗号运算符简化成一行代码。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 简化后</span><span class="token keyword">const</span> <span class="token function-variable function">result</span> <span class="token operator">=</span> <span class="token parameter">arr</span> <span class="token operator">=></span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出：[1, 2, 'a']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Array-map-的简写"><a href="#Array-map-的简写" class="headerlink" title="Array.map()的简写"></a>Array.map()的简写</h3><p>比如想要拿到接口返回的特定字段的值，可以用解构赋值和对象的简写方法对map方法简写，详细解释请移步<a href="https://juejin.cn/post/7236655739090927672" title="https://juejin.cn/post/7236655739090927672">js map方法应用场景 处理对象数组</a>。</p><p>比如接口返回数据，此时如果只想要数据里的<code>id</code>和<code>name</code>，就可以用下面的简写方式。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 接口返回数据</span>res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span><span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span><span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token comment">// 第一种方法：箭头函数、 解构赋值</span><span class="token keyword">const</span> data <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>id<span class="token punctuation">,</span> name<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>id<span class="token punctuation">,</span> name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 第二种方法：箭头函数、返回对象（相对更容易理解）</span><span class="token keyword">const</span> data <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span> v<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> v<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文字排序"><a href="#文字排序" class="headerlink" title="文字排序"></a>文字排序</h3><p>我们知道数组方法<a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort" title="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort">sort()</a>默认是按照<code>UTF-16</code>码元值升序排序</p><blockquote></blockquote><p>我们可以使用<a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt" title="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt">charCodeAt()</a>方法获取<code>UTF-16</code>码元</p><p>对于中文或者其他语言按照拼音排序（字典顺序排序）则需要用到<a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare" title="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare">localeCompare()</a>方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token string">'赵五'</span><span class="token punctuation">,</span> <span class="token string">'王二'</span><span class="token punctuation">,</span> <span class="token string">'陈六'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 输出：['张三', '李四', '王二', '赵五', '陈六']</span><span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token string">'赵五'</span><span class="token punctuation">,</span> <span class="token string">'王二'</span><span class="token punctuation">,</span> <span class="token string">'陈六'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a<span class="token punctuation">.</span><span class="token function">localeCompare</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token string">'zh-Hans-CN'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 输出：['陈六', '李四', '王二', '张三', '赵五']</span><span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'Banana'</span><span class="token punctuation">,</span> <span class="token string">'cherry'</span><span class="token punctuation">,</span> <span class="token string">'Date'</span><span class="token punctuation">,</span> <span class="token string">'apricot'</span><span class="token punctuation">,</span> <span class="token string">'Banana'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 输出：['Banana', 'Banana', 'Date', 'apple', 'apricot', 'cherry']</span><span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'Banana'</span><span class="token punctuation">,</span> <span class="token string">'cherry'</span><span class="token punctuation">,</span> <span class="token string">'Date'</span><span class="token punctuation">,</span> <span class="token string">'apricot'</span><span class="token punctuation">,</span> <span class="token string">'Banana'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a<span class="token punctuation">.</span><span class="token function">localeCompare</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token string">'en'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 输出：['apple', 'apricot', 'Banana', 'Banana', 'cherry', 'Date']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>&#39;zh&#39;</code> 表示主语言标记，代表中文。</li><li><code>&#39;Hans&#39;</code> 是脚本子标记，表示简体汉字。</li><li><code>&#39;CN&#39;</code> 是区域子标记，表示中国。</li></ul><blockquote><p>如果您不提供<code>locales</code>参数（第二个参数），<code>localeCompare</code>方法通常会默认使用浏览器或操作系统的当前语言环境</p></blockquote><h3 id="at-方法获取数组最后一位值"><a href="#at-方法获取数组最后一位值" class="headerlink" title="at()方法获取数组最后一位值"></a>at()方法获取数组最后一位值</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 获取arr的最后一位值</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token comment">// 一般写法</span><span class="token keyword">const</span> last <span class="token operator">=</span> arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">// 二般写法</span><span class="token keyword">const</span> last <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment">// 终极写法</span><span class="token keyword">const</span> last <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h3><ul><li>2023-11-30 <a href="#heading-16" title="#heading-16">at()方法获取数组最后一位值</a>：新增内容</li><li>2023-11-1 <a href="#heading-15" title="#heading-15">文字排序</a>：新增内容</li><li>2023-9-7 <a href="#heading-8" title="#heading-8">Set集合实践：数组去重、交集、并集、差集</a>：补充交集、并集、差集的案例</li><li>2023-7-7 <a href="#heading-14" title="#heading-14">Array.map()的简写</a>：新增内容</li><li>2023-6-27 <a href="#heading-2" title="#heading-2">防止崩溃的可选链(?.)</a>：补充方法和数组的使用</li><li>2023-6-21 <a href="#heading-13" title="#heading-13">逗号运算符(,)</a>：新增内容</li><li>2023-6-16 <a href="#heading-11" title="#heading-11">指数运算符和Math.floor() 简写</a>：补充两者区别</li><li>2023-5-30 <a href="#heading-7" title="#heading-7">数组降维</a>：新增内容</li><li>2023-5-27 <a href="#heading-0" title="#heading-0">If-Else 用 || 或 ?? 运算符进行简化</a>：补充上NaN</li></ul>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习 CSS @media 媒体查询</title>
      <link href="/2024/04/19/xue-xi-css-media-mei-ti-cha-xun/"/>
      <url>/2024/04/19/xue-xi-css-media-mei-ti-cha-xun/</url>
      
        <content type="html"><![CDATA[<h1 id="学习-CSS-media-媒体查询"><a href="#学习-CSS-media-媒体查询" class="headerlink" title="学习 CSS @media 媒体查询"></a>学习 CSS @media 媒体查询</h1><p><a href="https://juejin.cn/post/6971013190524076069">https://juejin.cn/post/6971013190524076069</a></p><h2 id="属性简介"><a href="#属性简介" class="headerlink" title="属性简介"></a>属性简介</h2><ol><li>基于一个或多个 <strong>媒体查询</strong> 的结果来应用样式表的一部分。就是可以根据不同的媒体类型定义不同的样式。</li><li>当页面需要响应式布局时，<code>@media</code> 是非常有用的。因为浏览器重置大小时，页面也会根据浏览器的宽度和高度重新渲染页面，使<code>@media</code>重新计算是否加载样式。 样例：</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* screen 当设备是 电脑屏幕，平板电脑，智能手机等。并且 width > 900px 使用 .article 样式块 */</span><span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 900px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span><span class="token selector">.article</span> <span class="token punctuation">&#123;</span><span class="token property">padding</span><span class="token punctuation">:</span> 1rem 3rem<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><code>@media</code><br>规则可置于您代码的顶层或位于其它任何<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/At-rule#%E6%9D%A1%E4%BB%B6%E8%A7%84%E5%88%99%E7%BB%84" title="https://developer.mozilla.org/zh-CN/docs/Web/CSS/At-rule#%E6%9D%A1%E4%BB%B6%E8%A7%84%E5%88%99%E7%BB%84"><code>@条件规则组</code></a>内。</li></ol><h3 id="媒体类型"><a href="#媒体类型" class="headerlink" title="媒体类型"></a>媒体类型</h3><ul><li>描述了设备的类别。媒体类型是可选的，默认是<code>all</code>类型。</li></ul><ol><li><code>all</code> 所有设备上都加载。</li><li><code>print</code> 在打印预览模式下在屏幕上查看的分页材料和文档中加载。</li><li><code>screen</code> 电脑屏幕，平板电脑，智能手机等，中加载。</li><li><code>speech</code> 屏幕阅读器等发声设备中加载。</li></ol><ul><li><code>CSS2.1和媒体查询3</code>定义了几种其他媒体类型<code>（tty，tv，projection，handheld，braille，embossed，和aural）</code>，现在基本上已经弃用。</li></ul><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ul><li>逻辑运算符 <code>not</code>，<code>and</code>以及<code>only</code>可以被用于组成一个复杂的媒体查询。还可以通过用逗号分隔多个媒体查询来将它们合并为一个规则。</li></ul><ol><li><code>not</code> 用于<strong>媒体查询</strong>取反值，如果<strong>媒体查询</strong>返回 <code>false</code>，则返回 <code>true</code>。如果出现在以逗号分隔的查询列表中，它只会在当前范围中取反。如果使用<code>not</code>运算符，还必须指定媒体类型。</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 在 screen 类型 加载 */</span><span class="token atrule"><span class="token rule">@media</span> screen</span> <span class="token punctuation">&#123;</span><span class="token selector">.box</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 取反 */</span><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">not</span> screen</span> <span class="token punctuation">&#123;</span><span class="token selector">.box1</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c01d66f535e4f41ad67d7d1bac81471~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image.png"></p><ol start="2"><li><code>and</code> 用于将多个媒体特征组合到一个<strong>媒体查询</strong>中。它还用于将<strong>媒体功能</strong>与<strong>媒体类型</strong>连接起来。</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 在 screen 类型 大于560px 加载 */</span><span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 560px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span><span class="token selector">.box</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 在 screen 类型 大于560px 小于 700px 加载 */</span><span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 560px<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 700px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span><span class="token selector">.box1</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> burlywood<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0435e0a0996a47c8896883133c2fd1a3~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="1.gif"></p><ol start="3"><li><code>only</code> 是为了在不支持媒体查询的浏览器中不添加样式。浏览器处理以<code>only</code>开头的关键词时将会忽略<code>only</code>。</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen</span><span class="token punctuation">&#123;</span><span class="token selector">.box</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>// 浏览器中等同于<span class="token atrule"><span class="token rule">@media</span> screen</span><span class="token punctuation">&#123;</span><span class="token selector">.box</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><code>, （逗号)</code> 逗号用于将多个媒体查询组合成一个规则。逗号分隔列表中的每个查询都与其他查询分开处理。因此，如果列表中的任何查询为真，则整个媒体语句返回真。换句话说，列表的行为就像一个逻辑or运算符。</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 在 screen 类型 小于240px 或 大于240px 加载 */</span><span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 560px<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 240px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span><span class="token selector">.box</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 在 screen 类型 小于 240px 或 大于360px 小于 700px 加载 */</span><span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 240px<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 360px<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 700px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span><span class="token selector">.box1</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> burlywood<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3ae25e9689544dffa688a132e04503d8~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="1.gif"></p><h3 id="媒体功能-https-developer-mozilla-org-en-US-docs-Web-CSS-Media-Queries-Using-media-queries-media-features"><a href="#媒体功能-https-developer-mozilla-org-en-US-docs-Web-CSS-Media-Queries-Using-media-queries-media-features" class="headerlink" title="[媒体功能](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries#media_features"></a>[媒体功能](<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries#media_features">https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries#media_features</a></h3><p>“<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries#media_features">https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries#media_features</a>“)</p><ul><li>根据属性判断当前使用 <code>css</code> 所在的设备，或是浏览环境的具体特征。表达式是可选的，它负责判断这些特性或特征是否存在、值为多少。每条媒体特性表达式都必须用括号括起来。 常用媒体：</li></ul><ol><li><code>height</code> 输出设备中的页面可见区域高度。</li><li><code>width</code> 输出设备中的页面可见区域宽度。</li><li><code>max-aspect-ratio</code> 输出设备的屏幕可见宽度与高度的最大比率。</li><li><code>max-device-aspect-ratio</code> 输出设备的屏幕可见宽度与高度的最大比率。</li><li><code>max-device-height</code> 输出设备的屏幕可见的最大高度。</li><li><code>max-device-width</code> 输出设备的屏幕最大可见宽度。</li><li><code>max-height</code> 输出设备中的页面最大可见区域高度。</li><li><code>max-width</code> 输出设备中的页面最大可见区域宽度。</li><li><code>min-height</code> 输出设备中的页面最小可见区域高度。</li><li><code>min-width</code> 输出设备中的页面最小可见区域宽度。</li></ol><h2 id="其他加载方式"><a href="#其他加载方式" class="headerlink" title="其他加载方式"></a>其他加载方式</h2><h3 id="style标签上加载"><a href="#style标签上加载" class="headerlink" title="style标签上加载"></a><code>style</code>标签上加载</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style media="(min-width: 500px)">    .box</span> <span class="token punctuation">&#123;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token selector">&lt;/style>&lt;style media="(max-width: 500px">    .box</span> <span class="token punctuation">&#123;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> burlywood<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>根据<code>media属性</code>定义的<strong>媒体查询</strong>判断加载那个样式。</li></ul><h3 id="import-使用时加载"><a href="#import-使用时加载" class="headerlink" title="@import 使用时加载"></a>@import 使用时加载</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@import</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>./index.css<span class="token punctuation">)</span></span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span>350px<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token atrule"><span class="token rule">@import</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>./home.css<span class="token punctuation">)</span></span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span>750px<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>在加载最后添加<code>()</code>定义<strong>媒体查询</strong>判断加载那个样式。</li></ul><h3 id="标签"><a href="#标签" class="headerlink" title="&lt;picture&gt;标签"></a><code>&lt;picture&gt;</code>标签</h3><pre><code><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">html复制代码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>picture</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(min-width: 650px)<span class="token punctuation">"</span></span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo1.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(min-width: 465px)<span class="token punctuation">"</span></span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo2.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img_girl.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>picture</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>* 根据屏幕匹配的不同尺寸显示不同图片，如果没有匹配到或浏览器不支持 `picture` 属性则使用 `img` 元素：</code></pre>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS水平垂直居中</title>
      <link href="/2024/04/19/css-shui-ping-chui-zhi-ju-zhong/"/>
      <url>/2024/04/19/css-shui-ping-chui-zhi-ju-zhong/</url>
      
        <content type="html"><![CDATA[<h2 id="文本垂直居中"><a href="#文本垂直居中" class="headerlink" title="文本垂直居中"></a>文本垂直居中</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- css 样式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.text</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token property">line-height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- html 结构 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>文本垂直居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/afcb97e60c4f4a32877fc9a925816eb5~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image.png"></p><h2 id="元素垂直居中"><a href="#元素垂直居中" class="headerlink" title="元素垂直居中"></a>元素垂直居中</h2><h3 id="1-绝对性定位-利用-calc-计算偏移量"><a href="#1-绝对性定位-利用-calc-计算偏移量" class="headerlink" title="1.绝对性定位 利用 calc 计算偏移量"></a>1.绝对性定位 利用 calc 计算偏移量</h3><p>使用绝对性定位，已知盒子自身宽高，利用 calc 计算偏移量进行定位📌</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- css 样式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">body</span> <span class="token punctuation">&#123;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.calc</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>100% - 200px<span class="token punctuation">)</span>/2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>100% - 200px<span class="token punctuation">)</span>/2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> yellowgreen<span class="token punctuation">;</span>        <span class="token comment">/* 方便看效果 */</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- html 结构 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>calc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>元素垂直居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/86e23e9dfb36495b988e28fab0f69a2b~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image.png"></p><h3 id="2-绝对定位-利用-margin-auto-属性"><a href="#2-绝对定位-利用-margin-auto-属性" class="headerlink" title="2.绝对定位 利用 margin:auto 属性"></a>2.绝对定位 利用 margin:auto 属性</h3><p>使用绝对定位，利用 margin:auto 属性，对已知宽高的盒子进行自动偏移定位📌</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- css 样式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token comment">/* 绝对性定位 */</span>    <span class="token selector">.div</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- html 结构 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>margin: auto;元素垂直居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/381342739c4044efaf6a3f4e7af0e9a0~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image.png"></p><h3 id="3-绝对定位-利用-margin-负值属性"><a href="#3-绝对定位-利用-margin-负值属性" class="headerlink" title="3.绝对定位 利用 margin 负值属性"></a>3.绝对定位 利用 margin 负值属性</h3><p>使用绝对定位，利用 margin 负值属性，对已知宽高的盒子进行计算偏移量进行定位📌</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- css 样式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.div</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">margin-top</span><span class="token punctuation">:</span> -100px<span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> -100px<span class="token punctuation">;</span>        <span class="token comment">/*margin-left: -100px 0 0 -100px;*/</span>        <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- html 结构 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>margin: -100px;元素垂直居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fdf1b1c30cc844d48b19b3c430ce4b04~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image.png"></p><h3 id="4-绝对定位-利用-transform-属性"><a href="#4-绝对定位-利用-transform-属性" class="headerlink" title="4.绝对定位 利用 transform 属性"></a>4.绝对定位 利用 transform 属性</h3><p>使用绝对定位，利用 transform 属性，对未知宽高的盒子进行自动偏移定位📌</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- css 样式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.div</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token comment">/* 相对定位或绝对定位均可 */</span>        <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- html 结构 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>利用 transform 进行垂直居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/83ced57ffffe474e962bed9fd9464596~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image.png"></p><h3 id="5-Flex布局"><a href="#5-Flex布局" class="headerlink" title="5.Flex布局"></a>5.Flex布局</h3><p>使用Flex布局，利用 <code>align-items: center;</code> 与 <code>justify-content: center; </code>属性，对未知宽高的盒子进行自动偏移定位，<code>父元素需要设置高度</code>📌</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- css 样式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token comment">/* 利用 flex 布局 不需要盒子本身宽高 但需要父级盒子高度*/</span>    <span class="token selector">.container</span> <span class="token punctuation">&#123;</span>        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>        <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token comment">/* 垂直居中 */</span>        <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token comment">/* 水平居中 */</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>        <span class="token comment">/* 父元素高度需设置 */</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.container div</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token comment">/* 宽高可以不设置 */</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> greenyellow<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- html 结构 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>利用 flex 布局进行水平垂直居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9a82aa25499d4bc5994210256db2e819~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image.png"></p><h3 id="6-table-cell-布局"><a href="#6-table-cell-布局" class="headerlink" title="6.table-cell 布局"></a>6.table-cell 布局</h3><p>使用 table-cell 布局，利用 <code>display: table-cell;</code> 、 <code>vertical-align: middle; </code>与 <code>text-align: center;</code><br>属性，对未知宽高的盒子进行自动偏移定位，<code>父元素需要设置宽高</code>📌，适合有父元素元素的定位</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- css 样式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token comment">/* table-cell 不需要盒子本身宽高*/</span>    <span class="token selector">.table-cell</span> <span class="token punctuation">&#123;</span>        <span class="token property">display</span><span class="token punctuation">:</span> table-cell<span class="token punctuation">;</span>        <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.table-cell div</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- html 结构 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>table-cell<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>利用 table-cell 进行水平垂直居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c2f80adac5048a3967848c7a490bb2c~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12个可能你没见过，但非常实用的 HTML 标签</title>
      <link href="/2024/04/19/12-ge-ke-neng-ni-mei-jian-guo-dan-fei-chang-shi-yong-de-html-biao-qian/"/>
      <url>/2024/04/19/12-ge-ke-neng-ni-mei-jian-guo-dan-fei-chang-shi-yong-de-html-biao-qian/</url>
      
        <content type="html"><![CDATA[<h1 id="12个可能你没见过，但非常实用的-HTML-标签"><a href="#12个可能你没见过，但非常实用的-HTML-标签" class="headerlink" title="12个可能你没见过，但非常实用的 HTML 标签"></a>12个可能你没见过，但非常实用的 HTML 标签</h1><p><a href="https://juejin.cn/post/7232667260166029372">写bug写bug</a></p><p>关注</p><h2 id="一、center"><a href="#一、center" class="headerlink" title="一、center"></a>一、center</h2><p>让你实现水平居中，用这个标签就对了，标签名也非常得语义化</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span>零一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>效果如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6d9e43e84e2441f6be5d26d6bbe9e872~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="图片"></p><p>原理也很简单，其实就是这个标签自带了 <code>text-align: center</code> 的样式</p><h2 id="二、abbr"><a href="#二、abbr" class="headerlink" title="二、abbr"></a>二、abbr</h2><p>abbr 全称是 <strong>abbreviations</strong>，意思是缩写。应用场景也很简单，为一些文章中的缩写增加注释</p><p>以前在文章中对于缩写的解释经常会这么做：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">sql</span>复制代码DAU（Daily Active <span class="token keyword">User</span>），日活跃用户数 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>那我们用 <code>abbr</code> 标签呢？</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>abbr title<span class="token operator">=</span><span class="token string">"Daily Active User"</span><span class="token operator">></span>        <span class="token constant">DAU</span><span class="token operator">&lt;</span><span class="token operator">/</span>abbr<span class="token operator">></span><span class="token operator">&lt;</span>span<span class="token operator">></span>，日活跃用户数 <span class="token operator">...</span><span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>展示的效果如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8bd8a15640ac46aebc127cb9736a010c~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="图片"></p><p>这个标签就可以把全称隐藏掉，弱化信息量，让真正不知道该缩写的用户主动去获取缩写的具体意思，这个在 <code>markdown</code> 里经常会出现</p><h2 id="三、mark"><a href="#三、mark" class="headerlink" title="三、mark"></a>三、mark</h2><p><code>&lt;mark /&gt;</code> 在 markdown 中也是很常用的，用于将包裹的文本高亮展示</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">css复制代码&lt;mark>高亮文本&lt;/mark><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/802a1940f2a941bda735e8b30c228b45~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="图片"></p><p>如果全文统一高亮样式，可以专门对 mark 标签进行样式重置，这样就不用对你用的每个 <code>div</code> 加一个 <code>highlight</code> 的类名了，又不语义化，又徒增文档大小</p><h2 id="四、sup、sub"><a href="#四、sup、sub" class="headerlink" title="四、sup、sub"></a>四、sup、sub</h2><p><code>&lt;sup /&gt;</code>和<code>&lt;sub /&gt;</code>分别表示上标和下标，在 markdown 中出现得也很频繁，比如数学公式和引用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token number">3</span><span class="token operator">&lt;</span>sup<span class="token operator">></span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token operator">/</span>sup<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token number">4</span><span class="token operator">&lt;</span>sub<span class="token operator">></span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>sub<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c4056b93ee0545d6ba7bb82b76bc9ab9~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="图片"></p><p>上标和下标的样式原理也比较简单，主要就是利用了 <code>vertical-align</code> 的 <code>top</code> 和 <code>sub</code> 属性值，然后将字号缩小，不过有现成的标签，干嘛不用呢？</p><h2 id="五、figure"><a href="#五、figure" class="headerlink" title="五、figure"></a>五、figure</h2><p><code>figure</code> 是用于包裹其它标签的内容的，然后再利用另一个标签 <code>figcaption</code> ，可以对包裹的内容进行一个文本描述，例如：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figure</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> /media/cc0-images/elephant-660-480.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>大象<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figcaption</span><span class="token punctuation">></span></span>这是一张大象的照片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figcaption</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figure</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5d1e358999434cdaa0e543282f80056d~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="图片"></p><p>那要是图片挂了呢？</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/666ec236ee3b4684b010da78dd2136d2~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="图片"></p><p>再友好点处理，我们把 <code>img</code> 标签的 <code>alt</code> 属性去掉</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ecb11331b37443a7bc72d08ed4393e6b~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="图片"></p><p>漂亮，终于把我一直厌烦的图裂icon给干掉了，样式还巨好看</p><p>当然不止能包裹 <code>img</code> 标签，其它任何都是可以的</p><p>嘿嘿，给大家在本文来个实战👇，下面这个可以点击，样式也是利用了 <code>figure</code> 这个标签</p><p><a href="https://link.juejin.cn/?target=https://mp.weixin.qq.com/s?__biz=MzkxMjI3MTA1Mg==&mid=2247515122&idx=1&sn=b150e432c8045be68cbe54a9cba75c4d&chksm=c10d8851f67a0147e8d9c4bf041e4c922d7f5c9da423e0730d4ecfb085ed49be3f14e4492a5b&token=1941016612&lang=zh_CN&scene=21%23wechat_redirect" title="https://mp.weixin.qq.com/s?__biz=MzkxMjI3MTA1Mg==&amp;mid=2247515122&amp;idx=1&amp;sn=b150e432c8045be68cbe54a9cba75c4d&amp;chksm=c10d8851f67a0147e8d9c4bf041e4c922d7f5c9da423e0730d4ecfb085ed49be3f14e4492a5b&amp;token=1941016612&amp;lang=zh_CN&amp;scene=21#wechat_redirect"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9d073645fc764b549edd230d8a2fdf23~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="图片"></a></p><p>我是figure标签产生的</p><h2 id="六、progress"><a href="#六、progress" class="headerlink" title="六、progress"></a>六、progress</h2><p>说到 <code>&lt;progress /&gt;</code> 这个标签就很有意思了，去年有段时间我做的业务里涉及到了进度条，当时是前同事做的，然后有一些性能问题，我就在研究如何优化，减少进度条改变带来的性能问题。</p><p>虽然最后问题时解决了，但是也有幸收到了张鑫旭大佬的评论，他告诉我 <code>progress</code> 这个标签就足够了，既有语义化，又有进度条的功能，性能还好，兼容性也很不错。后来经过一番尝试，还真是，当时是我孤陋寡闻了，也安利给大家</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 进度条最大值为<span class="token number">100</span>，当前进度为<span class="token number">60</span>，即<span class="token number">60</span><span class="token operator">%</span> <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>progress max<span class="token operator">=</span><span class="token string">"100"</span> value<span class="token operator">=</span><span class="token string">"60"</span> <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>浏览器自带的样式就已经很好看了，效果如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/04060f954e4546bf8124a019bb472a56~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="图片"></p><p>业务中我们也就可以通过控制 <code>value</code> 属性，来改变进度条的进度了</p><h2 id="七、area"><a href="#七、area" class="headerlink" title="七、area"></a>七、area</h2><p><code>area</code> 这个标签也非常有意思，它的作用是为图片提供点击热区，可以自己规定一张图的哪些区域可点击，且点击后跳转的链接，也可以设置成点击下载文件，我们来举个例子：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example.png<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">usemap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>area</span> <span class="token attr-name">shape</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rect<span class="token punctuation">"</span></span> <span class="token attr-name">coords</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0,0,100,50<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>baidu<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https: //www.baidu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>area</span> <span class="token attr-name">shape</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rect<span class="token punctuation">"</span></span> <span class="token attr-name">coords</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0,50,100,100<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sougou<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https: //www.sogou.com/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>area</code> 一般要搭配 <code>map</code> 标签一起使用，每个 <code>area</code> 标签表示一个热区，例如上面代码中，我们定义了两个热区，热区形状都为<code>rect</code>（矩形），他们的热区分别是：</p><ul><li><p>坐标 <code>(0,0)</code> 到 坐标 <code>(100,50)</code> 的一个矩形</p></li><li><p>坐标 <code>(0,50)</code> 坐标 <code>(100,100)</code> 的一个矩形</p></li></ul><p>我们都知道，默认的坐标轴是这样的：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/15ba92abe02b42cabb0f6ff41ff2cdab~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="图片"></p><p>因此，我们划分的两个热区就是:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6abf9c250e47424486329d455c136714~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="图片"></p><p>最后再来看一下我们的实际效果：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/06ffce8720ba4bb9bacb62f6fdc22667~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="图片"></p><p><code>i</code></p><h2 id="八、details"><a href="#八、details" class="headerlink" title="八、details"></a>八、details</h2><p><code>details</code> 字面意思是 “详情”，在markdown里也经常用，用该标签包裹了的内容默认会被隐藏，只留下一个简述的文字，我们点击以后才会展示详细的内容</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">css复制代码&lt;details>      &lt;p>我是一段被隐藏的内容&lt;/p>&lt;/details><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0635e9c505624517b95510dc60b3e9c0~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="图片"></p><p>这还没有加任何一行的 <code>js</code> 代码，我们点击后，<code>details</code> 标签上会多一个 <code>open</code> 的属性，被隐藏的内容就展示出来了</p><p>默认情况下，简要文字为 <code>&quot;详情&quot;</code>，想要修改这个文字，要搭配 <code>summary</code> 标签来使用</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">css复制代码&lt;details>      &lt;summary>点击查看更多&lt;/summary>      &lt;p>我是一段被隐藏的内容&lt;/p>&lt;/details><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就搞定了</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/28db38693ea44af8a06ec2a8bf68d047~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="图片"></p><h2 id="九、dialog"><a href="#九、dialog" class="headerlink" title="九、dialog"></a>九、dialog</h2><p>浏览器自带弹窗方法 <code>alert</code>、<code>confirm</code>、<code>prompt</code>，样式固定且每个浏览器不同，同时还会阻塞页面运行，除了这个还提供了一个 <code>dialog</code> 标签，它的使用方式有点类似于现在各大组件库的 <code>Modal</code><br>组件了，浏览器还为该标签提供了原生的 <code>dom</code> 方法：<code>showModal</code>、<code>close</code>，可以直接控制弹窗的展示和隐藏</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>dialog id<span class="token operator">=</span><span class="token string">"dialog"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"close"</span><span class="token operator">></span>ok<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dialog<span class="token operator">></span><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"openBtn"</span><span class="token operator">></span>打开弹框<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">const</span> dialog <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'dialog'</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> openBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'openBtn'</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> closeBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'close'</span><span class="token punctuation">)</span>    openBtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 打开弹框</span>        dialog<span class="token punctuation">.</span><span class="token function">showModal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    closeBtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 隐藏弹框</span>        dialog<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9ff6504761404aeaa03397816842eb54~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="图片"></p><p>细心的你有没有发现，这原生的弹框还自带背景蒙层，点击是关闭不掉的，但起码它不会阻塞页面</p><p>然后我们在弹窗展示时，也可以通过 <code>esc</code> 键来关闭弹窗</p><h2 id="十、datalist"><a href="#十、datalist" class="headerlink" title="十、datalist"></a>十、datalist</h2><p><code>datalist</code> 是用于给输入框提供可选值的一个列表标签，类似咱们常用的 <code>Select</code> 组件</p><p>我可以用其实现一个 <strong>“输入联想”</strong> 的功能</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span> 输入C开头的英文单词：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">list</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c_words<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>datalist</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c_words<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>China<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Click<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Close<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Const<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Count<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>datalist</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>来试一试：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/13c73f23052f42c686689393daac6a5d~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="图片"></p><p>刚点击时会把所有推荐的选项都列出来，然后根据后面输入的内容，会过滤掉不匹配了的选项，比如我输入 <code>cl</code>，会过滤掉不是 <code>cl</code> 开头的单词，最后只剩下 <code>Click</code> 和 <code>Close</code> 了</p><p>最后我发现，他这个下拉框有点好看啊？为啥这原生的 input 框默认样式那么丑，啥时候改改</p><h2 id="十一、fieldset"><a href="#十一、fieldset" class="headerlink" title="十一、fieldset"></a>十一、fieldset</h2><p><code>fieldset</code> 标签是用于分组管理 <code>form</code> 表单内的元素的，若 <code>fieldset</code> 设置了 <code>disabled</code> 属性，则被其包裹的所有表单元素都会被禁用置灰，且不会随着表单一起提交上去，是的就成了摆设</p><p>什么意思呢？看个例子：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> /example<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span> <span class="token attr-name">disabled</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token punctuation">></span></span>被禁用区域<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>ID：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>邮箱：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1234567@163.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>名字：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们把 <code>ID</code> 和 <code>邮箱</code> 的表单包裹了起来，且设置了 <code>disabled</code>，只开放了一个 <code>name</code> 的输入控件，此时界面如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a99953b3ef6f46d8877f1910dbdd249f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="图片"></p><p>可以看到除了 <code>name</code> 输入框，其它的两个输入框都被禁用了，此时点提交会是什么样子呢？</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8a9ac7ea8c2f496eac8dc9965b9100e4~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="图片"></p><p>嗯，只提交了 <code>name</code> 字段</p><h2 id="十二、noscript"><a href="#十二、noscript" class="headerlink" title="十二、noscript"></a>十二、noscript</h2><p>这个标签是在浏览器不支持或禁用了 <code>javascript</code> 时才展示的，大多用于对 js 强依赖的应用，比如现在大部分的 SPA 页面，一旦不支持 <code>javascript</code>，页面基本上什么内容都没了，此时可以靠这个标签做友好提示</p><p>一般我们不需要特地去使用，大多都是在打包过程中自动插入到 <code>html</code> 静态文件里去了的，例如：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">// init.jsconst root = document.getElementById('root')const button = document.createElement('button')button.innerText = '点击出弹窗'root.appendChild(button)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> index<span class="token punctuation">.</span>html <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script defer src<span class="token operator">=</span><span class="token string">". /init.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>noscript<span class="token operator">></span>      不好意思，你的浏览器不支持或禁用了 JavaScript，请更换浏览器或启用 JavaScript<span class="token operator">&lt;</span><span class="token operator">/</span>noscript<span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>未禁用 <code>javascript</code> 时，页面时这样的：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ed2c8cf5a42246a1ad52e0ad96153530~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="图片"></p><p>禁用了 <code>javascript</code> 时，是这样的：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc585cb9a38e4559a9135c90b3a405d3~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="图片"></p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不为人知的 JavaScript 技巧</title>
      <link href="/2024/04/19/bu-wei-ren-zhi-de-javascript-ji-qiao/"/>
      <url>/2024/04/19/bu-wei-ren-zhi-de-javascript-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h1 id="不为人知的-JavaScript-技巧"><a href="#不为人知的-JavaScript-技巧" class="headerlink" title="不为人知的 JavaScript 技巧"></a>不为人知的 JavaScript 技巧</h1><p><a href="https://juejin.cn/post/6976761925170364446">gyx_这个杀手不太冷静</a></p><h2 id="什么是-JavaScript-？"><a href="#什么是-JavaScript-？" class="headerlink" title="什么是 JavaScript ？"></a>什么是 JavaScript ？</h2><p>Javascript 是一种脚本语言，用于创建动态更新的内容、控制多媒体、动画图像等等。</p><h2 id="1-“返回”按钮"><a href="#1-“返回”按钮" class="headerlink" title="1. “返回”按钮"></a>1. “返回”按钮</h2><p>使用 <code>history.back()</code> 可以创建一个浏览器“返回”按钮。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript">history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>    返回<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-数字分隔符"><a href="#2-数字分隔符" class="headerlink" title="2. 数字分隔符"></a>2. 数字分隔符</h2><p>为了提高数字的可读性，您可以使用下划线作为分隔符：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> largeNumber <span class="token operator">=</span> <span class="token number">1_000_000_000</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>largeNumber<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1000000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-事件监听器只运行一次"><a href="#3-事件监听器只运行一次" class="headerlink" title="3. 事件监听器只运行一次"></a>3. 事件监听器只运行一次</h2><p>如果你想添加一个事件监听器并且只运行一次，你可以使用 <code>once</code> 选项：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I run only once'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">once</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="4-console-log-变量包装"><a href="#4-console-log-变量包装" class="headerlink" title="4. console.log 变量包装"></a>4. console.log 变量包装</h2><p>您在 <code>console.log()</code> 的时候，将参数用大括号括起来，这样可以同时看到变量名和变量值。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2fe76faf08be4955a6a870f75cd542aa~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="捕获1.PNG"></p><h2 id="5-从数组中获取最小值-最大值"><a href="#5-从数组中获取最小值-最大值" class="headerlink" title="5. 从数组中获取最小值&#x2F;最大值"></a>5. 从数组中获取最小值&#x2F;最大值</h2><p>您可以使用 <code>Math.min()</code> 或 <code>Math.max()</code> 结合扩展运算符来查找数组中的最小值或最大值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>numbers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token operator">...</span>numbers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1           </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-检查-Caps-Lock-是否打开"><a href="#6-检查-Caps-Lock-是否打开" class="headerlink" title="6. 检查 Caps Lock 是否打开"></a>6. 检查 Caps Lock 是否打开</h2><p>您可以使用 <code>KeyboardEvent.getModifierState()</code> 来检测是否 <code>Caps Lock</code> 打开。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> passwordInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>passwordInput<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keyup'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getModifierState</span><span class="token punctuation">(</span><span class="token string">'CapsLock'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// CapsLock 已经打开了</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-复制到剪贴板"><a href="#7-复制到剪贴板" class="headerlink" title="7. 复制到剪贴板"></a>7. 复制到剪贴板</h2><p>您可以使用 <code>Clipboard</code> API 创建“复制到剪贴板”功能：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">copyToClipboard</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">.</span><span class="token function">writeText</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>           <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="8-获取鼠标位置"><a href="#8-获取鼠标位置" class="headerlink" title="8. 获取鼠标位置"></a>8. 获取鼠标位置</h2><p>您可以使用 <code>MouseEvent</code> 对象下 clientX 和 clientY 的属性值，获取鼠标的当前位置坐标信息。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Mouse X: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>e<span class="token punctuation">.</span>clientX<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, Mouse Y: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>e<span class="token punctuation">.</span>clientY<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="9-缩短数组"><a href="#9-缩短数组" class="headerlink" title="9. 缩短数组"></a>9. 缩短数组</h2><p>您可以设置 length 属性来缩短数组。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>numbers<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3]           </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-简写条件判断语句"><a href="#10-简写条件判断语句" class="headerlink" title="10. 简写条件判断语句"></a>10. 简写条件判断语句</h2><p>如果仅在判断条件为 <code>true</code> 时才执行函数，则可以使用 <code>&amp;&amp;</code> 简写。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 普通写法</span><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 简写</span>condition <span class="token operator">&amp;&amp;</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-console-table-打印特定格式的表格"><a href="#11-console-table-打印特定格式的表格" class="headerlink" title="11. console.table() 打印特定格式的表格"></a>11. console.table() 打印特定格式的表格</h2><p>语法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// [] 里面指的是可选参数</span>console<span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span>data <span class="token punctuation">[</span><span class="token punctuation">,</span> columns<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>参数：</p><ul><li>data 表示要显示的数据。必须是数组或对象。</li><li>columns 表示一个包含列的名称的数组。</li></ul><p>实例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 一个对象数组，只打印 firstName</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">firstName<span class="token punctuation">,</span> lastName</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> john <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">,</span> <span class="token string">"Smith"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> jane <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Jane"</span><span class="token punctuation">,</span> <span class="token string">"Doe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> emily <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Emily"</span><span class="token punctuation">,</span> <span class="token string">"Jones"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token punctuation">[</span>john<span class="token punctuation">,</span> jane<span class="token punctuation">,</span> emily<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"firstName"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印结果如下图：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4ce9af326b66477ba50bf1249284fcae~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="wecom-temp-2011eb3f18e5331bc41b513bfd5e67f6.png"></p><h2 id="12-数组去重"><a href="#12-数组去重" class="headerlink" title="12. 数组去重"></a>12. 数组去重</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 3, 4]           </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="13-将字符串转换为数字"><a href="#13-将字符串转换为数字" class="headerlink" title="13. 将字符串转换为数字"></a>13. 将字符串转换为数字</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'404'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span>str<span class="token punctuation">)</span> <span class="token comment">// 404;           </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="14-将数字转换为字符串"><a href="#14-将数字转换为字符串" class="headerlink" title="14. 将数字转换为字符串"></a>14. 将数字转换为字符串</h2><p>连接空字符串。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> myNumber <span class="token operator">=</span> <span class="token number">403</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myNumber <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// '403'           </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="15-从数组中过滤所有虚值"><a href="#15-从数组中过滤所有虚值" class="headerlink" title="15. 从数组中过滤所有虚值"></a>15. 从数组中过滤所有虚值</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> myArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'@denicmarko'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myArray<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, "@denicmarko", true, 3]     </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="16-妙用-includes"><a href="#16-妙用-includes" class="headerlink" title="16. 妙用 includes"></a>16. 妙用 includes</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> myTech <span class="token operator">=</span> <span class="token string">'JavaScript'</span><span class="token punctuation">;</span><span class="token keyword">const</span> techs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'HTML'</span><span class="token punctuation">,</span> <span class="token string">'CSS'</span><span class="token punctuation">,</span> <span class="token string">'JavaScript'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 普通写法</span><span class="token keyword">if</span> <span class="token punctuation">(</span>myTech <span class="token operator">===</span> <span class="token string">'HTML'</span> <span class="token operator">||</span> myTech <span class="token operator">===</span> <span class="token string">'CSS'</span> <span class="token operator">||</span> myTech <span class="token operator">===</span> <span class="token string">'JavaScript'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// do something</span><span class="token punctuation">&#125;</span><span class="token comment">// includes 写法</span><span class="token keyword">if</span> <span class="token punctuation">(</span>techs<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>myTech<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// do something </span><span class="token punctuation">&#125;</span>           <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="17-妙用-reduce-对数组求和"><a href="#17-妙用-reduce-对数组求和" class="headerlink" title="17. 妙用 reduce 对数组求和"></a>17. 妙用 reduce 对数组求和</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> myArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">reducer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">total<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token operator">=></span> total <span class="token operator">+</span> currentValue<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myArray<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>reducer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100           </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="18-console-log-样式"><a href="#18-console-log-样式" class="headerlink" title="18. console.log() 样式"></a>18. <code>console.log()</code> 样式</h2><p>您知不知道可以使用 CSS 语句在 DevTools 中设置 <code>console.log</code> 输出的样式：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b4a87ff258c47e188aabbdafde98596~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="捕获.PNG"></p><h2 id="19-元素的-dataset"><a href="#19-元素的-dataset" class="headerlink" title="19. 元素的 dataset"></a>19. 元素的 dataset</h2><p>使用 <code>dataset</code> 属性访问元素的自定义数据属性 (<code>data-*</code>)：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">data-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>John Doe<span class="token punctuation">"</span></span> <span class="token attr-name">data-age</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>29<span class="token punctuation">"</span></span> <span class="token attr-name">data-something</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Some Data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    John Doe<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> user <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// &#123; name: "John Doe", age: "29", something: "Some Data" &#125;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "John Doe"</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "29"</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>something<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Some Data"</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="相关推荐"><a href="#相关推荐" class="headerlink" title="相关推荐"></a>相关推荐</h2><ul><li><a href="https://juejin.cn/post/6975148293990907934" title="https://juejin.cn/post/6975148293990907934">不为人知的 HTML 技巧</a> 🔥</li><li><a href="https://juejin.cn/post/6978469579508940831" title="https://juejin.cn/post/6978469579508940831">不为人知的 CSS 技巧</a> 🔥</li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://markodenic.com/javascript-tips/" title="https://markodenic.com/javascript-tips/">JavaScript Tips</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML标签嵌套规则</title>
      <link href="/2024/04/19/html-biao-qian-qian-tao-gui-ze/"/>
      <url>/2024/04/19/html-biao-qian-qian-tao-gui-ze/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML标签嵌套规则"><a href="#HTML标签嵌套规则" class="headerlink" title="HTML标签嵌套规则 "></a><a href="https://www.cnblogs.com/xiyangbaixue/p/4090511.html">HTML标签嵌套规则 </a></h1><h1 id="摘要："><a href="#摘要：" class="headerlink" title="摘要："></a>摘要：</h1><p>　　 最近在整理项目时发现有些同事写的页面代码嵌套的太多，而且有些嵌套不对，比如<a><div>内容</div></a>。虽然功能实现了，但是对于浏览器渲染引擎的性能还是有些影响。所以就大体上的整理了下HTML标签的嵌套规则，也希望读者提出不对之处。</p><p>众所周知，HTML标签有两类：</p><ol><li>块级元素<br>div、h1~h6、address、blockquote、center、dir、dl、dt、dd、fieldset、form、hr、isindex、menu、noframes、noscript、ol、p、pre、table、ul …<br><strong>特点：</strong>总是在新行上开始，高度、行高以及顶和底边距都可控制，宽度缺省是它的容器的100%，除非设定一个宽度<br><strong>功能：</strong>主要用来搭建网站架构、页面布局、承载内容</li><li>行内元素<br>span、a、abbr、acronym、b、bdo、big、br、cite、code、dfn、em、font、i、img、input、kbd、label、q、s、samp、select、small、strike、strong、sub、sup、textarea、tt、u、var …<br><strong>特点：</strong>和其他元素都在一行上，高、行高及顶和底边距不可改变，宽度就是它的文字或图片的宽度，不可改变<br><strong>功能：</strong>用于加强内容显示,控制细节，例如：加粗、斜体等等</li></ol><p>举个例子：</p><ul><li>块级元素</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>one<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>two<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  显示效果如下：</p><p>  one</p><p>  two</p><ul><li>行内元素</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>one<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>two<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  显示效果如下：</p><p>  onetwo</p><p>块级元素与行内元素并不是一成不变的，我们可以通过CSS来改变他的特性</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">> display: inline; //行内元素>> display: block; //块级元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>虽然HTML标签有很多并且我们在制作页面的时候可以无限的嵌套，但是嵌套也有规则，不能随意的嵌套。有些标签是固定的嵌套规则，比如ul包含li、ol包含li、dl包含dt和dd等等。还有很多是独立的标签，我们如何来使用它编写更优秀的页面，下面就说说</p><ol><li>块级元素与块级元素平级、内嵌元素与内嵌元素平级</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  //span是行内元素，p是块级元素，所以这个是错误的嵌套>> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  //对的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>块元素可以包含内联元素或某些块元素，但内联元素不能包含块元素，它只能包含其它的内联元素</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>>> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li><p>有几个特殊的块级元素只能包含内嵌元素，不能再包含块级元素</p><blockquote><p>h1、h2、h3、h4、h5、h6、p、dt</p></blockquote></li><li><p>块级元素不能放在标签p里面</p></li><li><p>li 标签可以包含 div 标签，因为li 和 div 标签都是装载内容的容器</p></li></ol><h1 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h1><p>    ​虽然我们可以嵌套标签，但是为了提高浏览器的渲染效率，我们应该尽少的嵌套标签，扁平化</p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人收藏的前端学习资料</title>
      <link href="/2024/04/19/ge-ren-shou-cang-de-qian-duan-xue-xi-zi-liao/"/>
      <url>/2024/04/19/ge-ren-shou-cang-de-qian-duan-xue-xi-zi-liao/</url>
      
        <content type="html"><![CDATA[<h1 id="分享一些个人收藏的前端学习资料"><a href="#分享一些个人收藏的前端学习资料" class="headerlink" title="分享一些个人收藏的前端学习资料"></a>分享一些个人收藏的前端学习资料</h1><p>为了方便，以后相关资料会第一时间更新在此repo：<a href="https://github.com/jCodeLife/quality-front-end-resources" title="https://github.com/jCodeLife/quality-front-end-resources">quality-front-end-resources</a></p><h2 id="一、文章"><a href="#一、文章" class="headerlink" title="一、文章"></a>一、文章</h2><h3 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h3><ol><li><a href="https://es6.ruanyifeng.com/" title="https://es6.ruanyifeng.com">ECMAScript 6 入门</a></li><li><a href="https://juejin.cn/post/6968713283884974088" title="https://juejin.cn/post/6968713283884974088">最全的手写JS面试题</a></li><li><a href="https://juejin.cn/post/6994594642280857630" title="https://juejin.cn/post/6994594642280857630">看了就会，手写Promise原理，最通俗易懂的版本！！！</a></li><li><a href="https://juejin.cn/post/6844903512845860872" title="https://juejin.cn/post/6844903512845860872">这一次，彻底弄懂 JavaScript 执行机制</a></li><li><a href="https://juejin.cn/post/6844904200917221389" title="https://juejin.cn/post/6844904200917221389">由浅入深，66条JavaScript面试知识点</a></li><li><a href="https://juejin.cn/post/6844903479429824526" title="https://juejin.cn/post/6844903479429824526">JavaScript深入系列15篇正式完结！</a></li><li><a href="https://juejin.cn/post/6844903809206976520" title="https://juejin.cn/post/6844903809206976520">「中高级前端面试」JavaScript手写代码无敌秘籍</a></li><li><a href="https://zh.javascript.info/" title="https://zh.javascript.info/">现代 JavaScript 教程</a></li></ol><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><ol><li><a href="https://yanhaijing.com/css/2017/09/29/principle-of-rem-layout/" title="https://yanhaijing.com/css/2017/09/29/principle-of-rem-layout/">Rem布局的原理解析</a></li><li><a href="https://juejin.cn/post/6908879198933221383" title="https://juejin.cn/post/6908879198933221383">8个硬核技巧带你迅速提升CSS技术</a></li><li><a href="https://juejin.cn/post/6994678354200756238" title="https://juejin.cn/post/6994678354200756238">你不可能知道的骨架屏玩法</a></li></ol><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><ol><li><a href="https://github.com/vuejs/rfcs" title="https://github.com/vuejs/rfcs">Vue RFCs</a></li><li><a href="https://www.vue3js.cn/docs/zh/guide/introduction.html" title="https://www.vue3js.cn/docs/zh/guide/introduction.html">Vue3中文文档</a></li><li><a href="https://juejin.cn/post/6844904191744278542" title="https://juejin.cn/post/6844904191744278542">如何参加开源项目-如何给Vue3.0提PR</a></li><li><a href="https://juejin.cn/post/6987349513836953607" title="https://juejin.cn/post/6987349513836953607">史上最全 Vue 前端代码风格指南</a></li><li><a href="https://juejin.cn/post/7007710727725121566" title="https://juejin.cn/post/7007710727725121566">101张脑图，从零开始学完Vue3（包括Vue3.2最新语法）</a></li><li><a href="https://github.com/cuixiaorui/mini-vue" title="https://github.com/cuixiaorui/mini-vue">实现最简 vue3 模型</a></li><li><a href="https://juejin.cn/post/6911897255087702030" title="https://juejin.cn/post/6911897255087702030">[Vue官方教程笔记]- 尤雨溪手写mini-vue</a></li><li><a href="https://juejin.cn/post/6844904150082256903" title="https://juejin.cn/post/6844904150082256903">10分钟体验Vue3全家桶(Vue3 + VueRouter4 + Vuex4)</a></li><li><a href="https://juejin.cn/post/7022137486407106591" title="https://juejin.cn/post/7022137486407106591">10.23尤雨溪在早早聊直播分享总结：vue3生态发展现状和展望</a></li><li><a href="https://juejin.cn/post/6926822933721513998" title="https://juejin.cn/post/6926822933721513998">2021必知必会的vite+vue3项目最佳实践</a></li></ol><h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><ol><li><a href="https://juejin.cn/post/6844903975112671239" title="https://juejin.cn/post/6844903975112671239">这可能是最通俗的 React Fiber(时间分片) 打开方式</a></li><li><a href="https://juejin.cn/post/6950063294270930980" title="https://juejin.cn/post/6950063294270930980">React全部api解读+基础实践大全(夯实基础2万字总结)</a></li><li><a href="https://mp.weixin.qq.com/s/WUVVpEoXdhVOlwtjgpLX5A" title="https://mp.weixin.qq.com/s/WUVVpEoXdhVOlwtjgpLX5A">公众号| React Concurrent Mode 初识&amp;探秘</a></li></ol><h3 id="TS"><a href="#TS" class="headerlink" title="TS"></a>TS</h3><ol><li><a href="https://juejin.cn/post/6926794697553739784" title="https://juejin.cn/post/6926794697553739784">TypeScript 高级用法</a></li><li><a href="https://juejin.cn/post/6844904184894980104" title="https://juejin.cn/post/6844904184894980104">一文读懂 TypeScript 泛型及应用</a></li><li><a href="https://juejin.cn/post/6872111128135073806" title="https://juejin.cn/post/6872111128135073806">一份不可多得的 TS 学习指南（1.8W字）</a></li></ol><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><ol><li><a href="https://juejin.cn/post/6844904116972421128" title="https://juejin.cn/post/6844904116972421128">http缓存机制</a></li><li><a href="https://juejin.cn/post/6844904119136698381" title="https://juejin.cn/post/6844904119136698381">从0到1搭建前端异常监控系统</a></li><li><a href="https://learngitbranching.js.org/?demo=&locale=zh_CN" title="https://learngitbranching.js.org/?demo=&amp;locale=zh_CN">可视化Git</a></li><li><a href="https://juejin.cn/post/7016911648656982024" title="https://juejin.cn/post/7016911648656982024">字节跳动是如何落地微前端的</a></li><li><a href="https://zhuanlan.zhihu.com/p/386607009" title="https://zhuanlan.zhihu.com/p/386607009">迈入现代 Web 开发</a></li><li><a href="https://yjhjstz.gitbooks.io/deep-into-node/content/" title="https://yjhjstz.gitbooks.io/deep-into-node/content/">深入理解Node.js</a></li></ol><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><ol><li><a href="https://www.liaoxuefeng.com/wiki/896043488029600" title="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰的Git教程</a></li><li><a href="http://marklodato.github.io/visual-git-guide/index-zh-cn.html" title="http://marklodato.github.io/visual-git-guide/index-zh-cn.html">图解Git</a></li><li><a href="https://learngitbranching.js.org/?demo=&locale=zh_CN" title="https://learngitbranching.js.org/?demo=&amp;locale=zh_CN">可视化Git</a></li></ol><h3 id="开发小技巧"><a href="#开发小技巧" class="headerlink" title="开发小技巧"></a>开发小技巧</h3><ol><li><a href="https://juejin.cn/post/6986485485765918733" title="https://juejin.cn/post/6986485485765918733">让你 vscode 写代码效率更高的技巧</a></li><li><a href="https://juejin.cn/post/6992024002113847332" title="https://juejin.cn/post/6992024002113847332">前端 debug 的奇淫技巧</a></li></ol><h3 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h3><ol><li><a href="https://juejin.cn/post/6844903896637259784" title="https://juejin.cn/post/6844903896637259784">一个合格(优秀)的前端都应该阅读这些文章</a></li><li><a href="https://juejin.cn/post/6986436944913924103" title="https://juejin.cn/post/6986436944913924103">专有钉钉前端面试指南</a></li><li><a href="https://juejin.cn/post/6844903776512393224" title="https://juejin.cn/post/6844903776512393224">中高级前端大厂面试秘籍，为你保驾护航金三银四，直通大厂(上)</a></li><li><a href="https://juejin.cn/post/6844903928442667015" title="https://juejin.cn/post/6844903928442667015">面试分享：两年工作经验成功面试阿里P6总结</a></li><li><a href="https://juejin.cn/post/6844904115428917255" title="https://juejin.cn/post/6844904115428917255">写给女朋友的中级前端面试秘籍（含详细答案，15k级别）</a></li><li><a href="https://juejin.cn/post/6844903809206976520" title="https://juejin.cn/post/6844903809206976520">「中高级前端面试」JavaScript手写代码无敌秘籍</a></li><li><a href="https://yuchengkai.cn/" title="https://yuchengkai.cn/">Github| 前端进阶之道</a></li><li><a href="https://github.com/haizlin/fe-interview" title="https://github.com/haizlin/fe-interview">Github| 前端3+1面试题库</a></li></ol><h3 id="行业杂谈"><a href="#行业杂谈" class="headerlink" title="行业杂谈"></a>行业杂谈</h3><ol><li><a href="https://jishuin.proginn.com/p/763bfbd6fe5f" title="https://jishuin.proginn.com/p/763bfbd6fe5f">2021 年 JavaScript 大事记</a></li><li><a href="https://juejin.cn/post/7007048306438176799" title="https://juejin.cn/post/7007048306438176799">谈谈我这些年对前端框架的理解</a></li><li><a href="https://www.zhihu.com/question/34892985/answer/60466608" title="https://www.zhihu.com/question/34892985/answer/60466608">jQuery会过时吗？</a></li></ol><h3 id="工程化"><a href="#工程化" class="headerlink" title="工程化"></a>工程化</h3><ol><li><a href="https://juejin.cn/post/6910014283707318279" title="https://juejin.cn/post/6910014283707318279">vite工程化实践，建议收藏</a></li><li><a href="https://zhuanlan.zhihu.com/p/386607009" title="https://zhuanlan.zhihu.com/p/386607009">迈入现代 Web 开发</a></li><li><a href="https://juejin.cn/post/6982215543017193502" title="https://juejin.cn/post/6982215543017193502">前端工程化实战 - 企业级 CLI 开发</a></li><li><a href="https://juejin.cn/post/6892003555818143752" title="https://juejin.cn/post/6892003555818143752">手把手带你入门前端工程化</a></li></ol><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><ol><li><a href="https://juejin.cn/post/6981673766178783262" title="https://juejin.cn/post/6981673766178783262">浏览器的渲染写给中高级前端关于性能优化的9大策略和6大指标</a></li><li><a href="https://juejin.cn/post/6911472693405548557" title="https://juejin.cn/post/6911472693405548557">聊一聊前端性能优化</a></li></ol><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><ol><li><a href="https://coolshell.cn/articles/9666.html" title="https://coolshell.cn/articles/9666.html">浏览器的渲染原理间接</a></li><li><a href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/" title="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/">浏览器的工作原理</a></li><li><a href="https://developers.google.com/web/updates/2018/09/inside-browser-part1" title="https://developers.google.com/web/updates/2018/09/inside-browser-part1">现代浏览器工作原理 (part 1)</a></li><li><a href="https://developers.google.com/web/updates/2018/09/inside-browser-part2" title="https://developers.google.com/web/updates/2018/09/inside-browser-part2">现代浏览器工作原理 (part 2)</a></li><li><a href="https://developers.google.com/web/updates/2018/09/inside-browser-part3" title="https://developers.google.com/web/updates/2018/09/inside-browser-part3">现代浏览器工作原理 (part 3)</a></li><li><a href="https://developers.google.com/web/updates/2018/09/inside-browser-part4" title="https://developers.google.com/web/updates/2018/09/inside-browser-part4">现代浏览器工作原理 (part 4)</a></li><li><a href="https://docs.google.com/presentation/d/1boPxbgNrTU0ddsc144rcXayGA_WF53k96imRH8Mp34Y/edit#slide=id.g60f92a5151_40_1445" title="https://docs.google.com/presentation/d/1boPxbgNrTU0ddsc144rcXayGA_WF53k96imRH8Mp34Y/edit#slide=id.g60f92a5151_40_1445">Life of a Pixel</a></li></ol><h3 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h3><ol><li><a href="https://juejin.cn/post/6844903670589423623" title="https://juejin.cn/post/6844903670589423623">近两万字小程序攻略发布了</a></li></ol><h3 id="算法数据结构"><a href="#算法数据结构" class="headerlink" title="算法数据结构"></a>算法数据结构</h3><ol><li><a href="https://visualgo.net/zh" title="https://visualgo.net/zh">可视化算法</a></li><li><a href="https://www.yuque.com/wubinhp/uxiv5i" title="https://www.yuque.com/wubinhp/uxiv5i">语雀| 设计模式</a></li></ol><h2 id="二、视频"><a href="#二、视频" class="headerlink" title="二、视频"></a>二、视频</h2><h3 id="JS-1"><a href="#JS-1" class="headerlink" title="JS"></a>JS</h3><ol><li><a href="https://ke.qq.com/course/231577?taid=2841395744442521" title="https://ke.qq.com/course/231577?taid=2841395744442521">Web前端开发JavaScript权威课堂</a></li><li><a href="https://www.bilibili.com/video/BV1kf4y1U7Ln?from=search&seid=2734638953578049157" title="https://www.bilibili.com/video/BV1kf4y1U7Ln?from=search&amp;seid=2734638953578049157">2分钟了解 JavaScript Event Loop</a></li><li><a href="https://ke.qq.com/course/421133?taid=3532215464389901" title="https://ke.qq.com/course/421133?taid=3532215464389901">ES6经典入门到进阶</a></li><li><a href="https://www.bilibili.com/video/BV1vh411Z7QG" title="https://www.bilibili.com/video/BV1vh411Z7QG">8分钟带你了解JS运行原理</a></li><li><a href="https://www.bilibili.com/video/BV1y3411r71u?spm_id_from=333.999.0.0" title="https://www.bilibili.com/video/BV1y3411r71u?spm_id_from=333.999.0.0">天天造轮子-防抖节流</a></li></ol><h3 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h3><ol><li><a href="https://www.bilibili.com/video/BV17W41137jn?from=search&seid=14022360126928211379" title="https://www.bilibili.com/video/BV17W41137jn?from=search&amp;seid=14022360126928211379">jQuery+Ajax从放弃到知根知底</a></li></ol><h3 id="Vue-1"><a href="#Vue-1" class="headerlink" title="Vue"></a>Vue</h3><ol><li><a href="https://www.bilibili.com/video/BV17x411J73h" title="https://www.bilibili.com/video/BV17x411J73h">Vue.js精讲</a></li><li><a href="https://space.bilibili.com/389008815?spm_id_from=333.788.b_765f7570696e666f.2" title="https://space.bilibili.com/389008815?spm_id_from=333.788.b_765f7570696e666f.2">Vue3快速上手指南-CompositionAPI</a></li><li><a href="https://www.bilibili.com/video/BV1d4411v7UX?p=1" title="https://www.bilibili.com/video/BV1d4411v7UX?p=1">尤雨溪教你写vue 高级vue教程 源码分析</a></li><li><a href="https://space.bilibili.com/478692215/channel/detail?cid=194210&ctype=0" title="https://space.bilibili.com/478692215/channel/detail?cid=194210&amp;ctype=0">手把手教你学Vue3</a></li><li><a href="https://www.bilibili.com/video/BV1my4y1m7sz?p=1" title="https://www.bilibili.com/video/BV1my4y1m7sz?p=1">Composition API + 深度解读</a></li><li><a href="https://www.bilibili.com/video/BV1az4y127Ga/" title="https://www.bilibili.com/video/BV1az4y127Ga/">React 与 Vue 框架的设计思路大 PK</a></li><li><a href="https://www.bilibili.com/video/BV1Zy4y1J73E?spm_id_from=333.999.0.0" title="https://www.bilibili.com/video/BV1Zy4y1J73E?spm_id_from=333.999.0.0">阮一峰推荐最佳学习 vue3 源码的利器 - mini-vue</a></li><li><a href="https://www.bilibili.com/video/BV1xy4y1178G?spm_id_from=333.999.0.0" title="https://www.bilibili.com/video/BV1xy4y1178G?spm_id_from=333.999.0.0">8年老前端独家分享阅读 Vue3 源码技巧</a></li><li><a href="https://www.bilibili.com/video/BV1Wh411X7Xp?spm_id_from=333.999.0.0" title="https://www.bilibili.com/video/BV1Wh411X7Xp?spm_id_from=333.999.0.0">【全网首发】Vue3.0光速上手「持续更新中」</a></li><li><a href="https://www.bilibili.com/video/BV1vX4y1K7bQ?spm_id_from=333.999.0.0" title="https://www.bilibili.com/video/BV1vX4y1K7bQ?spm_id_from=333.999.0.0">【备战2021】Vite2 + Vue3项目最佳实践「持续更新中」</a></li><li><a href="https://www.bilibili.com/video/BV1no4y1k7kJ?spm_id_from=333.999.0.0" title="https://www.bilibili.com/video/BV1no4y1k7kJ?spm_id_from=333.999.0.0">Vue3+Typescript从整合到项目实战</a></li><li><a href="https://space.bilibili.com/480140591/channel/collectiondetail?sid=30497" title="https://space.bilibili.com/480140591/channel/collectiondetail?sid=30497">Vue DevUI开源指南</a></li></ol><h3 id="React-1"><a href="#React-1" class="headerlink" title="React"></a>React</h3><ol><li><a href="https://www.bilibili.com/video/BV1az4y127Ga/" title="https://www.bilibili.com/video/BV1az4y127Ga/">React 与 Vue 框架的设计思路大 PK</a></li><li><a href="https://www.bilibili.com/video/BV1JU4y1E73v?from=search&seid=1480540993076541477" title="https://www.bilibili.com/video/BV1JU4y1E73v?from=search&amp;seid=1480540993076541477">9分钟掌握React Hooks正确认知</a></li><li><a href="https://www.bilibili.com/video/BV1rK411F7x3" title="https://www.bilibili.com/video/BV1rK411F7x3">你必须要掌握的React知识点</a></li><li><a href="https://www.bilibili.com/video/BV14b4y1R7hk" title="https://www.bilibili.com/video/BV14b4y1R7hk">从0到1开发可视化拖拽H5编辑器(React)</a></li></ol><h3 id="Node-1"><a href="#Node-1" class="headerlink" title="Node"></a>Node</h3><ol><li><a href="https://space.bilibili.com/476967789/channel/detail?cid=136330" title="https://space.bilibili.com/476967789/channel/detail?cid=136330">Web前端会客厅|个人推荐看前9个视频</a></li><li><a href="https://www.bilibili.com/video/BV1oZ4y1V7tx" title="https://www.bilibili.com/video/BV1oZ4y1V7tx">前端阶段进阶（已完结）</a></li><li><a href="https://www.bilibili.com/video/BV13s411M7Ab?spm_id_from=333.999.0.0" title="https://www.bilibili.com/video/BV13s411M7Ab?spm_id_from=333.999.0.0">Node.js经典教程</a></li><li><a href="https://www.bilibili.com/video/BV1dV411p7gp" title="https://www.bilibili.com/video/BV1dV411p7gp">手写webpack</a></li><li><a href="https://www.bilibili.com/video/BV1Df4y1n777?spm_id_from=333.999.0.0" title="https://www.bilibili.com/video/BV1Df4y1n777?spm_id_from=333.999.0.0">然叔天天造轮子-Vite</a></li></ol><h3 id="JS引擎"><a href="#JS引擎" class="headerlink" title="JS引擎"></a>JS引擎</h3><ol><li><a href="https://www.bilibili.com/video/BV1zV411z7RX" title="https://www.bilibili.com/video/BV1zV411z7RX">8分钟带你了解V8引擎是如何运行JS</a></li></ol><h3 id="学习线路"><a href="#学习线路" class="headerlink" title="学习线路"></a>学习线路</h3><ol><li><a href="https://www.bilibili.com/video/BV1ZZ4y1H7rU/?spm_id_from=333.788.b_636f6d6d656e74.6" title="https://www.bilibili.com/video/BV1ZZ4y1H7rU/?spm_id_from=333.788.b_636f6d6d656e74.6">前端学习路线分享</a></li></ol><h3 id="面试-1"><a href="#面试-1" class="headerlink" title="面试"></a>面试</h3><ol><li><a href="https://www.bilibili.com/video/BV1av411w7oa" title="https://www.bilibili.com/video/BV1av411w7oa">程序员简历点评第二期：能吃苦和能吃</a></li><li><a href="https://www.bilibili.com/video/BV1g54y1p7yV?spm_id_from=333.999.0.0" title="https://www.bilibili.com/video/BV1g54y1p7yV?spm_id_from=333.999.0.0">现场点评9个程序员简历 – 有喷有夸</a></li><li><a href="https://www.bilibili.com/video/BV1FB4y1T7CP?spm_id_from=333.999.0.0" title="https://www.bilibili.com/video/BV1FB4y1T7CP?spm_id_from=333.999.0.0">想进大厂？简历要这么写</a></li></ol><h3 id="网站搭建"><a href="#网站搭建" class="headerlink" title="网站搭建"></a>网站搭建</h3><ol><li><a href="https://www.bilibili.com/video/BV1rU4y1J785" title="https://www.bilibili.com/video/BV1rU4y1J785">手把手带你从0搭建个人网站，小白可懂的保姆级教程</a></li><li><a href="https://www.bilibili.com/video/BV1Yb411a7ty/?spm_id_from=333.788.recommend_more_video.8" title="https://www.bilibili.com/video/BV1Yb411a7ty/?spm_id_from=333.788.recommend_more_video.8">手把手教你从0开始搭建自己的个人博客 |无坑版视频教程| hexo</a></li></ol><h3 id="浏览器-1"><a href="#浏览器-1" class="headerlink" title="浏览器"></a>浏览器</h3><ol><li><a href="https://www.bilibili.com/video/av35265997/" title="https://www.bilibili.com/video/av35265997/">像素的一生Life of a Pixel</a></li><li><a href="https://www.bilibili.com/video/BV1x54y1B7RE/" title="https://www.bilibili.com/video/BV1x54y1B7RE/">浏览器是如何运作的？</a></li></ol><h3 id="小程序-1"><a href="#小程序-1" class="headerlink" title="小程序"></a>小程序</h3><ol><li><a href="https://www.bilibili.com/video/BV1y3411i7VK" title="https://www.bilibili.com/video/BV1y3411i7VK">uniCloud开发实战：拍照识别垃圾分类应用 跨端云开发 uniapp </a></li></ol><h2 id="三、书籍"><a href="#三、书籍" class="headerlink" title="三、书籍"></a>三、书籍</h2><h3 id="CSS-1"><a href="#CSS-1" class="headerlink" title="CSS"></a>CSS</h3><ol><li><a href="https://book.douban.com/subject/30450258/" title="https://book.douban.com/subject/30450258/">精通 CSS</a></li><li><a href="https://book.douban.com/subject/2308234/" title="https://book.douban.com/subject/2308234/">CSS 权威指南</a></li><li><a href="https://book.douban.com/subject/35021471/" title="https://book.douban.com/subject/35021471/">深入解析 CSS</a></li><li><a href="https://book.douban.com/subject/26745943/" title="https://book.douban.com/subject/26745943/">CSS 揭秘</a></li></ol><h3 id="JS-2"><a href="#JS-2" class="headerlink" title="JS"></a>JS</h3><ol><li><a href="https://book.douban.com/subject/6038371/" title="https://book.douban.com/subject/6038371/">Javascript编程艺术</a></li><li><a href="https://book.douban.com/subject/10546125/" title="https://book.douban.com/subject/10546125/">JavaScript高级程序设计（第4版）</a></li><li><a href="https://book.douban.com/subject/10549733/" title="https://book.douban.com/subject/10549733/">Javascript犀牛书第七版</a></li><li><a href="https://book.douban.com/subject/26351021/" title="https://book.douban.com/subject/26351021/">你不知道的javascript 上</a></li><li><a href="https://book.douban.com/subject/26854244/" title="https://book.douban.com/subject/26854244/">你不知道的javascript 中</a></li><li><a href="https://book.douban.com/subject/35446937/" title="https://book.douban.com/subject/35446937/">Javasript二十年</a></li><li><a href="https://book.douban.com/subject/35085910/" title="https://book.douban.com/subject/35085910/">JavaScript语言精髓与编程实践（第3版）</a></li><li><a href="https://book.douban.com/subject/35218831/" title="https://book.douban.com/subject/35218831/">前端开发核心知识进阶</a></li></ol><h3 id="Vue-2"><a href="#Vue-2" class="headerlink" title="Vue"></a>Vue</h3><ol><li><a href="https://book.douban.com/subject/32581281/" title="https://book.douban.com/subject/32581281/">深入浅出Vue.js</a></li><li><a href="https://book.douban.com/subject/33338290/" title="https://book.douban.com/subject/33338290/">Testing Vue.js Applications</a></li></ol><h3 id="TS-1"><a href="#TS-1" class="headerlink" title="TS"></a>TS</h3><ol><li><a href="https://ts.xcatliu.com/" title="https://ts.xcatliu.com/">TypeScript 入门教程</a></li><li><a href="https://jkchao.github.io/typescript-book-chinese/#why" title="https://jkchao.github.io/typescript-book-chinese/#why">深入理解 TypeScript</a></li></ol><h3 id="Node-2"><a href="#Node-2" class="headerlink" title="Node"></a>Node</h3><ol><li><a href="https://11111-1252105172.cos.ap-shanghai.myqcloud.com/understand-nodejs%EF%BC%88%E5%B8%A6%E6%A0%87%E7%AD%BE%E7%89%88%EF%BC%89.pdf" title="https://11111-1252105172.cos.ap-shanghai.myqcloud.com/understand-nodejs%EF%BC%88%E5%B8%A6%E6%A0%87%E7%AD%BE%E7%89%88%EF%BC%89.pdf">Node源码解析</a></li><li><a href="https://book.douban.com/subject/25768396/" title="https://book.douban.com/subject/25768396/">深入浅出Node.js(进阶)</a></li><li><a href="https://book.douban.com/subject/30329536/" title="https://book.douban.com/subject/30329536/">设计数据密集型应用</a></li></ol><h3 id="浏览器-2"><a href="#浏览器-2" class="headerlink" title="浏览器"></a>浏览器</h3><ol><li><a href="https://book.douban.com/subject/25910556/" title="https://book.douban.com/subject/25910556/">WebKit 技术内幕</a></li></ol><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><ol><li><a href="https://book.douban.com/subject/19952400/" title="https://book.douban.com/subject/19952400/">算法（第4版）</a></li><li><a href="https://book.douban.com/subject/26979890/" title="https://book.douban.com/subject/26979890/">算法图解</a></li><li><a href="https://book.douban.com/subject/25894685/" title="https://book.douban.com/subject/25894685/">啊哈!算法</a></li><li><a href="https://book.douban.com/subject/1885170/" title="https://book.douban.com/subject/1885170/">算法导论</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习资料 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>能让你早点下班的36个JavaScript实用函数</title>
      <link href="/2024/04/19/neng-rang-ni-zao-dian-xia-ban-de-36-ge-javascript-shi-yong-han-shu/"/>
      <url>/2024/04/19/neng-rang-ni-zao-dian-xia-ban-de-36-ge-javascript-shi-yong-han-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="2022年能让你早点下班的36个JavaScript实用函数！"><a href="#2022年能让你早点下班的36个JavaScript实用函数！" class="headerlink" title="2022年能让你早点下班的36个JavaScript实用函数！"></a>2022年能让你早点下班的36个JavaScript实用函数！</h1><p><a href="https://juejin.cn/post/7132019982644772901">代码与野兽</a></p><p>之前在掘金写了一篇介绍 JavaScript 小技巧的文章，很受大家欢迎。但是有朋友说还是不够用，于是我决定再写一篇更多更全的文章。<br>原文：<a href="https://juejin.cn/post/7127278574033174542" title="https://juejin.cn/post/7127278574033174542">你需要知道的 12 个常用的 JavaScript 函数</a><br>原来是 12 个函数，现在直接乘以 3 倍，搞 36 个函数！<br>JavaScript 是一个很复杂的语言，很多新手在使用它开发应用的时候会发现很多功能无从下手。有了我根据功能分类总结的 36 个 JavaScript 技巧，复制粘贴一键搞定！<br>帮助你提高开发效率、快速解决问题，早点下班，早点摸鱼！</p><h1 id="生成随机颜色"><a href="#生成随机颜色" class="headerlink" title="生成随机颜色"></a>生成随机颜色</h1><p>你的网站是否需要生成随机颜色？下面一行代码就可以实现。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">generateRandomHexColor</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">#</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0xffffff</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">generateRandomHexColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="数组重排序"><a href="#数组重排序" class="headerlink" title="数组重排序"></a>数组重排序</h1><p>对数组的元素进行重新排序是一项非常重要的技巧，但是原生 Array 中并没有这项功能。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">shuffle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">shuffle</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="复制到剪切板"><a href="#复制到剪切板" class="headerlink" title="复制到剪切板"></a>复制到剪切板</h1><p>复制到剪切板是一项非常实用且能够提高用户便利性的功能。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">copyToClipboard</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token operator">=></span> navigator<span class="token punctuation">.</span>clipboard <span class="token operator">&amp;&amp;</span> navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">.</span>writeText <span class="token operator">&amp;&amp;</span> navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">.</span><span class="token function">writeText</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token function">copyToClipboard</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="检测暗色主题"><a href="#检测暗色主题" class="headerlink" title="检测暗色主题"></a>检测暗色主题</h1><p>暗色主题日益普及，很多用户都会在设备中启用该模式，我们将应用程序切换到暗色主题可以提高用户体验度。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">isDarkMode</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> window<span class="token punctuation">.</span>matchMedia <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span><span class="token function">matchMedia</span><span class="token punctuation">(</span><span class="token string">"(prefers-color-scheme: dark)"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>matches<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isDarkMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="滚动到顶部"><a href="#滚动到顶部" class="headerlink" title="滚动到顶部"></a>滚动到顶部</h1><p>将元素滚动到顶部最简单的方法是使用 scrollIntoView。设置 block 为 start 可以滚动到顶部；设置 behavior 为 smooth 可以开启平滑滚动。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">scrollToTop</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token operator">=></span>   element<span class="token punctuation">.</span><span class="token function">scrollIntoView</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">behavior</span><span class="token operator">:</span> <span class="token string">"smooth"</span><span class="token punctuation">,</span> <span class="token literal-property property">block</span><span class="token operator">:</span> <span class="token string">"start"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="滚动到底部"><a href="#滚动到底部" class="headerlink" title="滚动到底部"></a>滚动到底部</h1><p>与滚动到顶部一样，滚动到底部只需要设置 block 为 end 即可。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">scrollToBottom</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token operator">=></span>   element<span class="token punctuation">.</span><span class="token function">scrollIntoView</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">behavior</span><span class="token operator">:</span> <span class="token string">"smooth"</span><span class="token punctuation">,</span> <span class="token literal-property property">block</span><span class="token operator">:</span> <span class="token string">"end"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="检测元素是否在屏幕中"><a href="#检测元素是否在屏幕中" class="headerlink" title="检测元素是否在屏幕中"></a>检测元素是否在屏幕中</h1><p>检查元素是否在窗口中最好的方法是使用 IntersectionObserver。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">entries</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  entries<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entry</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span>isIntersecting<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// `entry.target` is the dom element</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>entry<span class="token punctuation">.</span>target<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> is visible</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">threshold</span><span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> bottomBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"bottom-btn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span><span class="token punctuation">;</span>observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>bottomBtn<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="检测设备"><a href="#检测设备" class="headerlink" title="检测设备"></a>检测设备</h1><p>使用 navigator.userAgent 来检测网站运行在哪种平台设备上。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">detectDeviceType</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>  <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>    navigator<span class="token punctuation">.</span>userAgent  <span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"Mobile"</span> <span class="token operator">:</span> <span class="token string">"Desktop"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">detectDeviceType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="隐藏元素"><a href="#隐藏元素" class="headerlink" title="隐藏元素"></a>隐藏元素</h1><p>我们可以将元素的 style.visibility 设置为 hidden，隐藏元素的可见性，但元素的空间仍然会被占用。如果设置元素的 style.display 为 none，会将元素从渲染流中删除。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">hideElement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> removeFromFlow <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  removeFromFlow <span class="token operator">?</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">)</span>  <span class="token operator">:</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>visibility <span class="token operator">=</span> <span class="token string">'hidden'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="从-URL-中获取参数"><a href="#从-URL-中获取参数" class="headerlink" title="从 URL 中获取参数"></a>从 URL 中获取参数</h1><p>JavaScript 中有一个 URL 对象，通过它可以非常方便的获取 URL 中的参数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">getParamByUrl</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>href<span class="token punctuation">)</span>  <span class="token keyword">return</span> url<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="深拷贝对象"><a href="#深拷贝对象" class="headerlink" title="深拷贝对象"></a>深拷贝对象</h1><p>深拷贝对象非常简单，先将对象转换为字符串，再转换成对象即可。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">deepCopy</span> <span class="token operator">=</span> <span class="token parameter">obj</span> <span class="token operator">=></span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>除了利用 JSON 的 API，还有更新的深拷贝对象的 structuredClone API，但并不是在所有的浏览器中都支持。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">structuredClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="等待函数"><a href="#等待函数" class="headerlink" title="等待函数"></a>等待函数</h1><p>JavaScript 提供了 setTimeout 函数，但是它并不返回 Promise 对象，所以我们没办法使用 async 作用在这个函数上，但是我们可以封装等待函数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">wait</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">ms</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span><span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">asyncFn</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">await</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'等待异步函数执行结束'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">asyncFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>感谢你的阅读，如果本文对你有所帮助，不妨点个赞吧。</p><h1 id="DOM-相关"><a href="#DOM-相关" class="headerlink" title="DOM 相关"></a>DOM 相关</h1><h2 id="1-检测某个元素是否聚焦"><a href="#1-检测某个元素是否聚焦" class="headerlink" title="1. 检测某个元素是否聚焦"></a>1. 检测某个元素是否聚焦</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">hasFocus</span> <span class="token operator">=</span> <span class="token parameter">el</span> <span class="token operator">=></span> el <span class="token operator">===</span> document<span class="token punctuation">.</span>activeElement<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-获取某个元素所有的兄弟元素"><a href="#2-获取某个元素所有的兄弟元素" class="headerlink" title="2. 获取某个元素所有的兄弟元素"></a>2. 获取某个元素所有的兄弟元素</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">a</span> <span class="token operator">=</span> <span class="token parameter">el</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">child</span> <span class="token operator">=></span> child <span class="token operator">!==</span> el<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-获取当前选择的文本"><a href="#3-获取当前选择的文本" class="headerlink" title="3. 获取当前选择的文本"></a>3. 获取当前选择的文本</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">getSelectedText</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> window<span class="token punctuation">.</span><span class="token function">getSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-返回上一个页面"><a href="#4-返回上一个页面" class="headerlink" title="4. 返回上一个页面"></a>4. 返回上一个页面</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">goBack</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-获取所有-cookie-并转为对象"><a href="#5-获取所有-cookie-并转为对象" class="headerlink" title="5. 获取所有 cookie 并转为对象"></a>5. 获取所有 cookie 并转为对象</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">getCookies</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> document<span class="token punctuation">.</span>cookie  <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> <span class="token punctuation">[</span>k<span class="token punctuation">,</span> v<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>acc<span class="token punctuation">[</span>k<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'"'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span>v<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> acc<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-清除所有-cookie"><a href="#6-清除所有-cookie" class="headerlink" title="6. 清除所有 cookie"></a>6. 清除所有 cookie</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">clearCookies</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> document<span class="token punctuation">.</span>cookie  <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=></span> document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">splace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">=.*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">=;expires=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUTCString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">;path=/</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-将-URL-参数转换为对象"><a href="#7-将-URL-参数转换为对象" class="headerlink" title="7. 将 URL 参数转换为对象"></a>7. 将 URL 参数转换为对象</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">getUrlParams</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">query</span><span class="token punctuation">)</span> <span class="token operator">=></span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span> <span class="token punctuation">[</span>k<span class="token punctuation">,</span> v<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">:</span> p<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> p<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span>p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">:</span> v <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="8-检测是否为暗模式"><a href="#8-检测是否为暗模式" class="headerlink" title="8. 检测是否为暗模式"></a>8. 检测是否为暗模式</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> isDarkMode <span class="token operator">=</span> window<span class="token punctuation">.</span>matchMedia <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span><span class="token function">matchMedia</span><span class="token punctuation">(</span><span class="token string">'(prefers-color-scheme: dark)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>matches<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="数组相关"><a href="#数组相关" class="headerlink" title="数组相关"></a>数组相关</h1><h2 id="9-比较两个数组"><a href="#9-比较两个数组" class="headerlink" title="9. 比较两个数组"></a>9. 比较两个数组</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">isEqual</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="10-将数组转为对象"><a href="#10-将数组转为对象" class="headerlink" title="10. 将数组转为对象"></a>10. 将数组转为对象</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">arrayToObject</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=></span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span>a<span class="token punctuation">,</span> <span class="token punctuation">[</span>b<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> b <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="11-将数组按照属性计数"><a href="#11-将数组按照属性计数" class="headerlink" title="11. 将数组按照属性计数"></a>11. 将数组按照属性计数</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">countBy</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> prop</span><span class="token punctuation">)</span> <span class="token operator">=></span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> curr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">[</span>curr<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>prev<span class="token punctuation">[</span>curr<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> prev<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="12-判断数组是否不为空"><a href="#12-判断数组是否不为空" class="headerlink" title="12. 判断数组是否不为空"></a>12. 判断数组是否不为空</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">arrayIsNotEmpty</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="13-展开多维数组"><a href="#13-展开多维数组" class="headerlink" title="13. 展开多维数组"></a>13. 展开多维数组</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">flat_entries</span> <span class="token operator">=</span> <span class="token parameter">arr</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="14-获取数组最后一个元素"><a href="#14-获取数组最后一个元素" class="headerlink" title="14. 获取数组最后一个元素"></a>14. 获取数组最后一个元素</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">lastItem</span> <span class="token operator">=</span> <span class="token parameter">arr</span> <span class="token operator">=></span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="对象相关"><a href="#对象相关" class="headerlink" title="对象相关"></a>对象相关</h1><h2 id="15-检测多个对象是否相等"><a href="#15-检测多个对象是否相等" class="headerlink" title="15. 检测多个对象是否相等"></a>15. 检测多个对象是否相等</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">isEqual</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>objects</span><span class="token punctuation">)</span> <span class="token operator">=></span> objects<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>objects<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="16-从对象数组中提取属性值"><a href="#16-从对象数组中提取属性值" class="headerlink" title="16. 从对象数组中提取属性值"></a>16. 从对象数组中提取属性值</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">pluck</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">objs<span class="token punctuation">,</span> property</span><span class="token punctuation">)</span> <span class="token operator">=></span> objs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token operator">=></span> obj<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="17-反转对象的-key-value"><a href="#17-反转对象的-key-value" class="headerlink" title="17. 反转对象的 key value"></a>17. 反转对象的 key value</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">invert</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token operator">=></span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token operator">=></span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> k <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="18-从对象中删除值为-null-和-undefined-的属性"><a href="#18-从对象中删除值为-null-和-undefined-的属性" class="headerlink" title="18. 从对象中删除值为 null 和 undefined 的属性"></a>18. 从对象中删除值为 null 和 undefined 的属性</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">removeNullAndUndefined</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token operator">=></span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> <span class="token punctuation">[</span>k<span class="token punctuation">,</span> v<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>v <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> a <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="19-按照对象的属性对对象排序"><a href="#19-按照对象的属性对对象排序" class="headerlink" title="19. 按照对象的属性对对象排序"></a>19. 按照对象的属性对对象排序</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">sort</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token operator">=></span> Object  <span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="20-检测对象是否为数组"><a href="#20-检测对象是否为数组" class="headerlink" title="20. 检测对象是否为数组"></a>20. 检测对象是否为数组</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">isArray</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token operator">=></span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="21-检测对象是否为-Promise"><a href="#21-检测对象是否为-Promise" class="headerlink" title="21. 检测对象是否为 Promise"></a>21. 检测对象是否为 Promise</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">isPromise</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span><span class="token operator">!</span>obj <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">.</span>then <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="22-交换两个对象"><a href="#22-交换两个对象" class="headerlink" title="22. 交换两个对象"></a>22. 交换两个对象</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">exchange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>b<span class="token punctuation">,</span> a<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="字符串相关"><a href="#字符串相关" class="headerlink" title="字符串相关"></a>字符串相关</h1><h2 id="23-检查路径是否是相对路径"><a href="#23-检查路径是否是相对路径" class="headerlink" title="23. 检查路径是否是相对路径"></a>23. 检查路径是否是相对路径</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">isRelative</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^([az]+:)?[\\/]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="24-将字符串的第一个字符变小写"><a href="#24-将字符串的第一个字符变小写" class="headerlink" title="24. 将字符串的第一个字符变小写"></a>24. 将字符串的第一个字符变小写</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">lowercaseFirst</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="25-重复一个字符串"><a href="#25-重复一个字符串" class="headerlink" title="25. 重复一个字符串"></a>25. 重复一个字符串</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">repeat</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> numberOfTimes</span><span class="token punctuation">)</span> <span class="token operator">=></span> str<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>numberOfTimes<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="26-生成-IP-地址"><a href="#26-生成-IP-地址" class="headerlink" title="26. 生成 IP 地址"></a>26. 生成 IP 地址</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">randomIp</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="27-生成十六进制颜色字符串"><a href="#27-生成十六进制颜色字符串" class="headerlink" title="27. 生成十六进制颜色字符串"></a>27. 生成十六进制颜色字符串</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">randomColor</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">#</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="28-生成-rgb-颜色字符串"><a href="#28-生成-rgb-颜色字符串" class="headerlink" title="28. 生成 rgb 颜色字符串"></a>28. 生成 rgb 颜色字符串</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">randomRgbColor</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">rgb(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="29-下划线转驼峰"><a href="#29-下划线转驼峰" class="headerlink" title="29. 下划线转驼峰"></a>29. 下划线转驼峰</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">toHump</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=></span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\_(\w)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">all<span class="token punctuation">,</span> letter</span><span class="token punctuation">)</span> <span class="token operator">=></span> letter<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="30-驼峰转下划线横线"><a href="#30-驼峰转下划线横线" class="headerlink" title="30. 驼峰转下划线横线"></a>30. 驼峰转下划线横线</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">toLine</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=></span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([A-Z])</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">"_$1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="31-检查字符串是否是十六进制颜色"><a href="#31-检查字符串是否是十六进制颜色" class="headerlink" title="31. 检查字符串是否是十六进制颜色"></a>31. 检查字符串是否是十六进制颜色</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">isHexColor</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^#([0-9A-F]&#123;3&#125;|[0-9A-F]&#123;4&#125;|[0-9A-F]&#123;6&#125;|[0-9A-F]&#123;8&#125;)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="32-RGB-字符串转十六进制字符串"><a href="#32-RGB-字符串转十六进制字符串" class="headerlink" title="32. RGB 字符串转十六进制字符串"></a>32. RGB 字符串转十六进制字符串</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">rgbToHex</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">"#"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>g <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="日期相关"><a href="#日期相关" class="headerlink" title="日期相关"></a>日期相关</h1><h2 id="33-两个日期之间相差的天数"><a href="#33-两个日期之间相差的天数" class="headerlink" title="33. 两个日期之间相差的天数"></a>33. 两个日期之间相差的天数</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">diffDays</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">date<span class="token punctuation">,</span> otherDate</span><span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>date <span class="token operator">-</span> otherDate<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="34-检查日期是否有效"><a href="#34-检查日期是否有效" class="headerlink" title="34. 检查日期是否有效"></a>34. 检查日期是否有效</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">isDateValid</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token operator">...</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="35-检测代码是否处于-Node-js-环境"><a href="#35-检测代码是否处于-Node-js-环境" class="headerlink" title="35. 检测代码是否处于 Node.js 环境"></a>35. 检测代码是否处于 Node.js 环境</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> isNode <span class="token operator">=</span> <span class="token keyword">typeof</span> process <span class="token operator">!==</span> <span class="token string">'undefined'</span> <span class="token operator">&amp;&amp;</span> process<span class="token punctuation">.</span>versions <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> process<span class="token punctuation">.</span>versions<span class="token punctuation">.</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="36-检测代码是否处于浏览器环境"><a href="#36-检测代码是否处于浏览器环境" class="headerlink" title="36. 检测代码是否处于浏览器环境"></a>36. 检测代码是否处于浏览器环境</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> isBrowser <span class="token operator">=</span> <span class="token keyword">typeof</span> window <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> document <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你也有一些常用的函数，或者文章中的某些函数有更好的实现方式，也可以进行补充！</p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS使用经验总结</title>
      <link href="/2024/04/19/css-shi-yong-jing-yan-zong-jie/"/>
      <url>/2024/04/19/css-shi-yong-jing-yan-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS使用经验总结"><a href="#CSS使用经验总结" class="headerlink" title="CSS使用经验总结 "></a><a href="https://www.cnblogs.com/xiyangbaixue/p/3967131.html">CSS使用经验总结 </a></h1><ol><li><h3 id="清除图片下方出现几像素的空白间隙"><a href="#清除图片下方出现几像素的空白间隙" class="headerlink" title="清除图片下方出现几像素的空白间隙"></a>清除图片下方出现几像素的空白间隙</h3><p><strong>方法1：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">img</span><span class="token punctuation">&#123;</span><span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p><strong>方法2：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">img</span><span class="token punctuation">&#123;</span><span class="token property">vertical-align</span><span class="token punctuation">:</span>top<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>除了top值，还可以设置为text-top | middle | bottom | text-bottom，甚至特定的&lt;length&gt;和&lt;percentage&gt;值都可以</p><p><strong>方法3：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#test</span><span class="token punctuation">&#123;</span><span class="token property">font-size</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span><span class="token property">line-height</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>#test为img的父元素</p></li><li><h3 id="让文本垂直对齐文本输入框"><a href="#让文本垂直对齐文本输入框" class="headerlink" title="让文本垂直对齐文本输入框"></a>让文本垂直对齐文本输入框</h3><p><strong>方法：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">input</span><span class="token punctuation">&#123;</span><span class="token property">vertical-align</span><span class="token punctuation">:</span>middle<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote></li><li><h3 id="让单行文本在容器内垂直居中"><a href="#让单行文本在容器内垂直居中" class="headerlink" title="让单行文本在容器内垂直居中"></a>让单行文本在容器内垂直居中</h3><p><strong>方法：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#test</span><span class="token punctuation">&#123;</span><span class="token property">height</span><span class="token punctuation">:</span>25px<span class="token punctuation">;</span><span class="token property">line-height</span><span class="token punctuation">:</span>25px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>只需设置文本的行高等于容器的高度即可</p></li><li><h3 id="让超链接访问后和访问前的颜色不同且访问后仍保留hover和active效果"><a href="#让超链接访问后和访问前的颜色不同且访问后仍保留hover和active效果" class="headerlink" title="让超链接访问后和访问前的颜色不同且访问后仍保留hover和active效果"></a>让超链接访问后和访问前的颜色不同且访问后仍保留hover和active效果</h3><p><strong>方法：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">a:link</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span>#03c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">a:visited</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span>#666<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">a:hover</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span>#f30<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">a:active</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span>#c30<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>按L-V-H-A的顺序设置超链接样式即可，可速记为LoVe（喜欢）HAte（讨厌）</p></li><li><h3 id="为什么Standard-mode下IE无法设置滚动条的颜色？"><a href="#为什么Standard-mode下IE无法设置滚动条的颜色？" class="headerlink" title="为什么Standard mode下IE无法设置滚动条的颜色？"></a>为什么Standard mode下IE无法设置滚动条的颜色？</h3><p><strong>方法：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">html</span><span class="token punctuation">&#123;</span><span class="token property">scrollbar-3dlight-color</span><span class="token punctuation">:</span>#999<span class="token punctuation">;</span><span class="token property">scrollbar-darkshadow-color</span><span class="token punctuation">:</span>#999<span class="token punctuation">;</span><span class="token property">scrollbar-highlight-color</span><span class="token punctuation">:</span>#fff<span class="token punctuation">;</span><span class="token property">scrollbar-shadow-color</span><span class="token punctuation">:</span>#eee<span class="token punctuation">;</span><span class="token property">scrollbar-arrow-color</span><span class="token punctuation">:</span>#000<span class="token punctuation">;</span><span class="token property">scrollbar-face-color</span><span class="token punctuation">:</span>#ddd<span class="token punctuation">;</span><span class="token property">scrollbar-track-color</span><span class="token punctuation">:</span>#eee<span class="token punctuation">;</span><span class="token property">scrollbar-base-color</span><span class="token punctuation">:</span>#ddd<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>将原来设置在body上的滚动条颜色样式定义到html标签选择符上即可</p></li><li><h3 id="使文本溢出边界不换行强制在一行内显示"><a href="#使文本溢出边界不换行强制在一行内显示" class="headerlink" title="使文本溢出边界不换行强制在一行内显示"></a>使文本溢出边界不换行强制在一行内显示</h3><p><strong>方法：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#test</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span>150px<span class="token punctuation">;</span><span class="token property">white-space</span><span class="token punctuation">:</span>nowrap<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>设置容器的宽度和white-space为nowrap即可，其效果类似&lt;nobr&gt;标签</p></li><li><h3 id="使文本溢出边界显示为省略号"><a href="#使文本溢出边界显示为省略号" class="headerlink" title="使文本溢出边界显示为省略号"></a>使文本溢出边界显示为省略号</h3><p><strong>方法（此方法Firefox5.0尚不支持）：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#test</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span>150px<span class="token punctuation">;</span><span class="token property">white-space</span><span class="token punctuation">:</span>nowrap<span class="token punctuation">;</span><span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span><span class="token property">text-overflow</span><span class="token punctuation">:</span>ellipsis<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>首先需设置将文本强制在一行内显示，然后将溢出的文本通过overflow:hidden截断，并以text-overflow:ellipsis方式将截断的文本显示为省略号。</p></li><li><h3 id="使连续的长字符串自动换行"><a href="#使连续的长字符串自动换行" class="headerlink" title="使连续的长字符串自动换行"></a>使连续的长字符串自动换行</h3><p><strong>方法：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#test</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span>150px<span class="token punctuation">;</span><span class="token property">word-wrap</span><span class="token punctuation">:</span>break-word<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>word-wrap的break-word值允许单词内换行</p></li><li><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><p><strong>方法1：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#test</span><span class="token punctuation">&#123;</span><span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>#test为浮动元素的下一个兄弟元素</p><p><strong>方法2：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#test</span><span class="token punctuation">&#123;</span><span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span><span class="token property">zoom</span><span class="token punctuation">:</span>1<span class="token punctuation">;</span><span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>#test为浮动元素的父元素。zoom:1也可以替换为固定的width或height</p><p><strong>方法3：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#test</span><span class="token punctuation">&#123;</span><span class="token property">zoom</span><span class="token punctuation">:</span>1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#test:after</span><span class="token punctuation">&#123;</span><span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span><span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span><span class="token property">visibility</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span><span class="token property">content</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><p>#test为浮动元素的父元素</p></li><li><h3 id="定义鼠标指针的光标形状为手型并兼容所有浏览器"><a href="#定义鼠标指针的光标形状为手型并兼容所有浏览器" class="headerlink" title="定义鼠标指针的光标形状为手型并兼容所有浏览器"></a>定义鼠标指针的光标形状为手型并兼容所有浏览器</h3><p><strong>方法：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#test</span><span class="token punctuation">&#123;</span><span class="token property">cursor</span><span class="token punctuation">:</span>pointer<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>若将cursor设置为hand，将只有IE和Opera支持，且hand为非标准属性值</p></li><li><h3 id="让已知高度的容器在页面中水平垂直居中"><a href="#让已知高度的容器在页面中水平垂直居中" class="headerlink" title="让已知高度的容器在页面中水平垂直居中"></a>让已知高度的容器在页面中水平垂直居中</h3><p><strong>方法：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#test</span><span class="token punctuation">&#123;</span><span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span>50%<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span>50%<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span>-100px 0 0 -100px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>Know More：已知高度的容器如何在页面中水平垂直居中</p></li><li><h3 id="让未知尺寸的图片在已知宽高的容器内水平垂直居中"><a href="#让未知尺寸的图片在已知宽高的容器内水平垂直居中" class="headerlink" title="让未知尺寸的图片在已知宽高的容器内水平垂直居中"></a>让未知尺寸的图片在已知宽高的容器内水平垂直居中</h3><p><strong>方法：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#test</span><span class="token punctuation">&#123;</span><span class="token property">display</span><span class="token punctuation">:</span>table-cell<span class="token punctuation">;</span>*<span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span>*<span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span><span class="token property">vertical-align</span><span class="token punctuation">:</span>middle<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#test p</span><span class="token punctuation">&#123;</span>*<span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>*<span class="token property">top</span><span class="token punctuation">:</span>50%<span class="token punctuation">;</span>*<span class="token property">left</span><span class="token punctuation">:</span>50%<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#test p img</span><span class="token punctuation">&#123;</span>*<span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span>*<span class="token property">top</span><span class="token punctuation">:</span>-50%<span class="token punctuation">;</span>*<span class="token property">left</span><span class="token punctuation">:</span>-50%<span class="token punctuation">;</span><span class="token property">vertical-align</span><span class="token punctuation">:</span>middle<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><p>#test是img的祖父节点，p是img的父节点。Know More：未知尺寸的图片如何水平垂直居中</p></li><li><h3 id="设置span的宽度和高度（即如何设置内联元素的宽高）"><a href="#设置span的宽度和高度（即如何设置内联元素的宽高）" class="headerlink" title="设置span的宽度和高度（即如何设置内联元素的宽高）"></a>设置span的宽度和高度（即如何设置内联元素的宽高）</h3><p><strong>方法：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">span</span><span class="token punctuation">&#123;</span><span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>要使内联元素可以设置宽高，只需将其定义为块级或者内联块级元素即可。所以方法非常多样，既可以设置display属性，也可以设置float属性，或者position属性等等。</p></li><li><h3 id="给一个元素定义多个不同的css规则"><a href="#给一个元素定义多个不同的css规则" class="headerlink" title="给一个元素定义多个不同的css规则"></a>给一个元素定义多个不同的css规则</h3><p><strong>方法：</strong></p><blockquote><pre class="line-numbers language-x86asm" data-language="x86asm"><code class="language-x86asm">.a&#123;color:#f00;&#125;.b&#123;background:#eee;&#125;.c&#123;background:#ccc;&#125;&lt;div class&#x3D;&quot;a b&quot;&gt;测试1&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;a c&quot;&gt;测试2&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>多个规则之间使用空格分开，并且只有class能同时使用多个规则，id不可以</p></li><li><h3 id="让某个元素充满整个页面"><a href="#让某个元素充满整个页面" class="headerlink" title="让某个元素充满整个页面"></a>让某个元素充满整个页面</h3><p><strong>方法：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">html,body</span><span class="token punctuation">&#123;</span><span class="token property">height</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#test</span><span class="token punctuation">&#123;</span><span class="token property">height</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote></li><li><h3 id="让某个元素距离窗口上右下左4边各10像素"><a href="#让某个元素距离窗口上右下左4边各10像素" class="headerlink" title="让某个元素距离窗口上右下左4边各10像素"></a>让某个元素距离窗口上右下左4边各10像素</h3><p><strong>方法：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">html,body</span><span class="token punctuation">&#123;</span><span class="token property">height</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">html</span><span class="token punctuation">&#123;</span><span class="token property">_padding</span><span class="token punctuation">:</span>10px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#test</span><span class="token punctuation">&#123;</span><span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span>10px<span class="token punctuation">;</span><span class="token property">right</span><span class="token punctuation">:</span>10px<span class="token punctuation">;</span><span class="token property">bottom</span><span class="token punctuation">:</span>10px<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span>10px<span class="token punctuation">;</span><span class="token property">_position</span><span class="token punctuation">:</span>static<span class="token punctuation">;</span><span class="token property">_height</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote></li><li><h3 id="去掉超链接的虚线框"><a href="#去掉超链接的虚线框" class="headerlink" title="去掉超链接的虚线框"></a>去掉超链接的虚线框</h3><p><strong>方法：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">a</span><span class="token punctuation">&#123;</span><span class="token property">outline</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>IE7及更早浏览器由于不支持outline属性，需要通过js的blur()方法来实现，如&lt;a onfocus&#x3D;”this.blur();”…</p></li><li><h3 id="容器透明，内容不透明"><a href="#容器透明，内容不透明" class="headerlink" title="容器透明，内容不透明"></a>容器透明，内容不透明</h3><p><strong>方法1：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.outer</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span>#000<span class="token punctuation">;</span><span class="token property">filter</span><span class="token punctuation">:</span><span class="token function">alpha</span><span class="token punctuation">(</span>opacity=20<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">opacity</span><span class="token punctuation">:</span>.2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.inner</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token property">margin-top</span><span class="token punctuation">:</span>-200px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>&lt;div class=<span class="token string">"outer"</span>>&lt;!--我是透明的容器-->&lt;/div>&lt;div class=<span class="token string">"inner"</span>>我是不透明的内容&lt;/div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>原理是容器层与内容层并级，容器层设置透明度，内容层通过负margin或者position绝对定位等方式覆盖到容器层上</p><p><strong>方法2：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.outer</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>.2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span>#000\9<span class="token punctuation">;</span><span class="token property">filter</span><span class="token punctuation">:</span><span class="token function">alpha</span><span class="token punctuation">(</span>opacity=20<span class="token punctuation">)</span>\9<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.outer .inner</span><span class="token punctuation">&#123;</span><span class="token property">position</span><span class="token punctuation">:</span>relative\9<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>&lt;div class=<span class="token string">"outer"</span>>&lt;div class=<span class="token string">"inner"</span>>我是不透明的内容&lt;/div>&lt;/div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>高级浏览器直接使用rgba颜色值实现；IE浏览器在定义容器透明的同时，让子节点相对定位，也可达到效果</p></li><li><h3 id="让整个页面水平居中"><a href="#让整个页面水平居中" class="headerlink" title="让整个页面水平居中"></a>让整个页面水平居中</h3><p><strong>方法：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span><span class="token punctuation">&#123;</span><span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#test2</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span>960px<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span>0 auto<span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><p>定义body的text-align值为center将使得IE5.5也能实现居中</p></li><li><h3 id="为什么容器的背景色没显示出来？为什么容器无法自适应内容高度？"><a href="#为什么容器的背景色没显示出来？为什么容器无法自适应内容高度？" class="headerlink" title="为什么容器的背景色没显示出来？为什么容器无法自适应内容高度？"></a>为什么容器的背景色没显示出来？为什么容器无法自适应内容高度？</h3><p><strong>方法：</strong></p><p>清除浮动</p><p>通常出现这样的情况都是由于没有清除浮动而引起的，所以Debug时应第一时间想到是否有未清除浮动的地方</p></li><li><h3 id="做1像素细边框的table"><a href="#做1像素细边框的table" class="headerlink" title="做1像素细边框的table"></a>做1像素细边框的table</h3><p><strong>方法1：</strong></p><blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">#test&#123;border-collapse:collapse;border:1px solid #ddd;&#125;#test th,#test td&#123;border:1px solid #ddd;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>Joy Du<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>年龄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>26<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p><strong>方法2：</strong></p><blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">#test&#123;border-spacing:1px;background:#ddd;&#125;#test tr&#123;background:#fff;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>Joy Du<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>年龄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>26<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>IE7及更早浏览器不支持border-spacing属性，但是可以通过table的标签属性cellspacing来替代。</p></li><li><h3 id="使页面文本行距始终保持为n倍字体大小的基调"><a href="#使页面文本行距始终保持为n倍字体大小的基调" class="headerlink" title="使页面文本行距始终保持为n倍字体大小的基调"></a>使页面文本行距始终保持为n倍字体大小的基调</h3><p><strong>方法：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span><span class="token punctuation">&#123;</span><span class="token property">line-height</span><span class="token punctuation">:</span>n<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>注意，不要给n加单位。Know More：如何使页面文本行距始终保持为n倍字体大小的基调</p></li><li><h3 id="标准模式Standard-mode和怪异模式Quirks-mode下的盒模型区别？"><a href="#标准模式Standard-mode和怪异模式Quirks-mode下的盒模型区别？" class="headerlink" title="标准模式Standard mode和怪异模式Quirks mode下的盒模型区别？"></a>标准模式Standard mode和怪异模式Quirks mode下的盒模型区别？</h3><p><strong>方法：</strong></p><pre class="line-numbers language-none"><code class="language-none">标准模式下：Element width &#x3D; width + padding + border怪异模式下：Element width &#x3D; width<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>相关资料请参阅CSS3属性box-sizing</p></li><li><h3 id="以图换字的几种方法及优劣分析"><a href="#以图换字的几种方法及优劣分析" class="headerlink" title="以图换字的几种方法及优劣分析"></a>以图换字的几种方法及优劣分析</h3><p><strong>思路1：使用text-indent的负值，将内容移出容器</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.test1</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>50px<span class="token punctuation">;</span><span class="token property">text-indent</span><span class="token punctuation">:</span>-9999px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span>#eee <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>*.png<span class="token punctuation">)</span></span> no-repeat<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>&lt;div class=<span class="token string">"test"</span>>以图换字之内容负缩进法&lt;/div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><p>该方法优点在于结构简洁，不理想的地方：1.由于使用场景不同，负缩进的值可能会不一样，不易抽象成公用样式；2.当该元素为链接时，在非IE下虚线框将变得不完整；3.如果该元素被定义为内联级或者内联块级，不同浏览器下会有较多的差异</p><p><strong>思路2：使用display:none或visibility:hidden将内容隐藏；</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.test</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>50px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span>#eee <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>*.png<span class="token punctuation">)</span></span> no-repeat<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.test span</span><span class="token punctuation">&#123;</span><span class="token property">visibility</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span><span class="token comment">/* 或者display:none */</span><span class="token punctuation">&#125;</span>&lt;div class=<span class="token string">"test"</span>>&lt;span>以图换字之内容隐藏法&lt;/span>&lt;/div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>该方法优点在于兼容性强并且容易抽象成公用样式，缺点在于结构较复杂</p><p><strong>思路3：使用padding或者line-height将内容挤出容器之外；</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.test</span><span class="token punctuation">&#123;</span><span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span><span class="token property">padding-top</span><span class="token punctuation">:</span>50px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span>#eee <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>*.png<span class="token punctuation">)</span></span> no-repeat<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.test</span><span class="token punctuation">&#123;</span><span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>50px<span class="token punctuation">;</span><span class="token property">line-height</span><span class="token punctuation">:</span>50<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span>#eee <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>*.jpg<span class="token punctuation">)</span></span> no-repeat<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>&lt;div class=<span class="token string">"test"</span>>以图换字之内容排挤法&lt;/div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>该方法优点在于结构简洁，缺点在于：1.由于使用场景不同，padding或line-height的值可能会不一样，不易抽象成公用样式；2.要兼容IE5.5及更早浏览器还得hack</p><p><strong>思路4：使用超小字体和文本全透明法；</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.test</span><span class="token punctuation">&#123;</span><span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>50px<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span><span class="token property">line-height</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span><span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span>#eee <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>*.png<span class="token punctuation">)</span></span> no-repeat<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>&lt;div class=<span class="token string">"test"</span>>以图换字之超小字体+文本全透明法&lt;/div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><p>该方法结构简单易用，推荐使用</p></li><li><h3 id="为什么2个相邻div的margin只有1个生效？"><a href="#为什么2个相邻div的margin只有1个生效？" class="headerlink" title="为什么2个相邻div的margin只有1个生效？"></a>为什么2个相邻div的margin只有1个生效？</h3><p><strong>方法：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box1</span><span class="token punctuation">&#123;</span><span class="token property">margin</span><span class="token punctuation">:</span>10px 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.box2</span><span class="token punctuation">&#123;</span><span class="token property">margin</span><span class="token punctuation">:</span>20px 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>&lt;div class=<span class="token string">"box1"</span>>box1&lt;/div>&lt;div class=<span class="token string">"box2"</span>>box2&lt;/div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>本例中box1的底部margin为10px，box2的顶部margin为20px，但表现在页面上2者之间的间隔为20px，而不是预想中的10+20px&#x3D;30px，结果是选择2者之间最大的那个margin，我们把这种机制称之为“外边距合并”；外边距合并不仅仅出现在相邻的元素间，父子间同样会出现。</p><p>简单列举几点注意事项:<br>　外边距合并只出现在块级元素上；<br>　浮动元素不会和相邻的元素产生外边距合并；<br>　绝对定位元素不会和相邻的元素产生外边距合并；<br>　内联块级元素间不会产生外边距合并；<br>　根元素间不会不会产生外边距合并（如html与body间）；<br>　设置了属性overflow且值不为visible的块级元素不会与它的子元素发生外边距合并；</p></li><li><h3 id="在文本框中禁用中文输入法"><a href="#在文本框中禁用中文输入法" class="headerlink" title="在文本框中禁用中文输入法"></a>在文本框中禁用中文输入法</h3><p><strong>方法：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">input,textarea</span><span class="token punctuation">&#123;</span><span class="token property">ime-mode</span><span class="token punctuation">:</span>disabled<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>ime-mode为非标准属性，写该文档时只有IE和Firefox支持</p></li><li><h3 id="解决列表中list-style-image不能精准定位的问题"><a href="#解决列表中list-style-image不能精准定位的问题" class="headerlink" title="解决列表中list-style-image不能精准定位的问题"></a>解决列表中list-style-image不能精准定位的问题</h3><p><strong>方法：</strong></p><p>不使用list-style-image来定义列表项目标记符号，而用background-image来代替，并通过background-position来进行定位</p></li><li><h3 id="设置IE下的iframe背景透明"><a href="#设置IE下的iframe背景透明" class="headerlink" title="设置IE下的iframe背景透明"></a>设置IE下的iframe背景透明</h3><p><strong>方法：</strong></p><p>设置iframe元素的标签属性allowtransparency&#x3D;”allowtransparency”然后设置iframe内部页面的body背景色为transparent。不过由此会引发IE下一些其它问题，如：设置透明后的iframe将不能遮住select</p></li><li><h3 id="解决Chrome在应用transition时页面闪动的问题"><a href="#解决Chrome在应用transition时页面闪动的问题" class="headerlink" title="解决Chrome在应用transition时页面闪动的问题"></a>解决Chrome在应用transition时页面闪动的问题</h3><p><strong>方法：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">-webkit-transform-style</span><span class="token punctuation">:</span>preserve-3d<span class="token punctuation">;</span><span class="token property">或-webkit-backface-visibility</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>在Chrome下，使用过渡效果transition时有时会出现页面闪动</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS媒体查询--常见的媒体尺寸设置</title>
      <link href="/2024/04/19/css-mei-ti-cha-xun-chang-jian-de-mei-ti-chi-cun-she-zhi/"/>
      <url>/2024/04/19/css-mei-ti-cha-xun-chang-jian-de-mei-ti-chi-cun-she-zhi/</url>
      
        <content type="html"><![CDATA[<h4 id="媒体查询–常见的媒体尺寸设置"><a href="#媒体查询–常见的媒体尺寸设置" class="headerlink" title="媒体查询–常见的媒体尺寸设置"></a>媒体查询–常见的媒体尺寸设置</h4><p>通过媒体查询，针对不同的设备的尺寸设置<a href="https://so.csdn.net/so/search?q=%E6%96%AD%E7%82%B9&spm=1001.2101.3001.7020">断点</a>来改变布局</p><p>屏幕        设备        断点<br>超小屏幕     手机        &lt;768px<br>小屏幕       平板        &gt;&#x3D;768px ~ &lt;992px  <br>中等屏幕      桌面       &gt;&#x3D;992px ~ &lt;1200px<br>大屏幕       桌面        &gt;&#x3D;1200px      <br>    <br>    <br>常用媒体查询尺寸：<br>    1200px<br>    1100px    1000px   1024px<br>    980px<br>    768px     720px<br>    640px<br>    480px<br>    375px<br>    320px<br>    280px    </p><h4 id="4、移动设备优先"><a href="#4、移动设备优先" class="headerlink" title="4、移动设备优先"></a>4、移动设备优先</h4><p>    移动设备优先：超小屏幕 超小型设备（手机，768px以下）</p><p>​&#96;&#96;&#96;CSS</p><p>    &#x2F;&#x2F; 小屏幕  768px-992px<br>    @media screen and (min-width:768px) { … }</p><p>​<br>    &#x2F;&#x2F; 中等屏幕 992px - 1200px<br>    @media screen and (min-width:992px){ … }</p><p>    <br>    &#x2F;&#x2F; 大屏幕  大于1200px<br>    @media screen and (min-width:1200px){ … }</p><p>​&#96;&#96;&#96;<br>案例：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>​<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token comment">/*在移动端看 移动端显示的颜色  768px屏幕以下*/</span>        <span class="token selector">body</span> <span class="token punctuation">&#123;</span>            background-color<span class="token punctuation">:</span> orange<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>​        <span class="token comment">/* 小屏幕  768px-992px  屏幕宽度在768px以上显示的颜色*/</span>        <span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>            <span class="token selector">body</span> <span class="token punctuation">&#123;</span>                background-color<span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>​        <span class="token comment">/* 中等屏幕  992px - 1200px*/</span>        <span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 992px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>            <span class="token selector">body</span> <span class="token punctuation">&#123;</span>                background-color<span class="token punctuation">:</span> tomato<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>​        <span class="token comment">/* 大屏幕  大于1200px*/</span>        <span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 1200px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>            <span class="token selector">body</span> <span class="token punctuation">&#123;</span>                background-color<span class="token punctuation">:</span> pink<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>​<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>​<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>​<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>#### 5、大屏幕设备优先   大屏幕设备优先：大屏幕 桌面在1200px以上    大型设备（大台式电脑，1200px 以上）     ```HTML     /*中等屏幕 992px-1200px*/    @media screen and (max-width:1200px) &#123; ... &#125; /* 中型设备（台式电脑，1200px 以下） */    /* 小屏幕 768px-992px*/    @media screen and (max-width:992px)&#123; ... &#125;/* 小型设备（平板电脑，992px 以下） */     /*超小屏幕 768px屏幕以下*/    @media screen and (max-width:768px)&#123; ... &#125;/* 超小型设备（手机，768px 以下） */     /*或者*/   @media screen and (max-width:768px)&#123; ... &#125;/* 超小型设备（手机，767px 以下） */     /* 注意：此时超小屏幕和小屏幕在768px之间有冲突，怎么解决？        把超小屏幕的区间降低1px*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>案例：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>​<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token comment">/* 屏幕大于1200px显示的颜色 */</span>        <span class="token selector">body</span> <span class="token punctuation">&#123;</span>            background-color<span class="token punctuation">:</span> green<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>​        <span class="token comment">/* 中等屏幕 992px-1200px 屏幕宽度在1200px以下显示的颜色*/</span>        <span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span>1200px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>            <span class="token selector">body</span> <span class="token punctuation">&#123;</span>                background-color<span class="token punctuation">:</span> tomato<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>​​        <span class="token comment">/* 小屏幕 768px-992px*/</span>        <span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span>992px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>            <span class="token selector">body</span> <span class="token punctuation">&#123;</span>                background-color<span class="token punctuation">:</span> pink<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>             <span class="token comment">/* 注意：此时超小屏幕和小屏幕在768px之间有冲突，怎么解决？        把超小屏幕的区间降低1px*/</span>                <span class="token comment">/* 超小屏幕 768px屏幕以下*/</span>        <span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span>767px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>            <span class="token selector">body</span> <span class="token punctuation">&#123;</span>                background-color<span class="token punctuation">:</span> orange<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>​<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>​<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>​<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个简单的弹窗，导航吸顶，部件展开收起</title>
      <link href="/2024/01/26/yi-ge-jian-dan-de-dan-chuang-dao-hang-xi-ding-bu-jian-zhan-kai-shou-qi/"/>
      <url>/2024/01/26/yi-ge-jian-dan-de-dan-chuang-dao-hang-xi-ding-bu-jian-zhan-kai-shou-qi/</url>
      
        <content type="html"><![CDATA[<h3 id="码海无涯系列，写给自己的注释"><a href="#码海无涯系列，写给自己的注释" class="headerlink" title="码海无涯系列，写给自己的注释"></a>码海无涯系列，写给自己的注释</h3><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/Ma-hai-wu-ya/a3.gif" alt="截图" title="截图"><br>关于scrollTop，参考另外一篇<a href="/2024/01/25/guan-yu-document-body-scrolltop-he-document-documentelement-scrolltop-zhi-wei-0-de-wen-ti/">文章</a></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">*</span> <span class="token punctuation">&#123;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">a</span> <span class="token punctuation">&#123;</span>            <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">ul,        li</span> <span class="token punctuation">&#123;</span>            <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.container</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">max-width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #f7f7f7<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.footer</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">max-width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 106px<span class="token punctuation">;</span>            <span class="token property">z-index</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.footer ul</span> <span class="token punctuation">&#123;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #f7f7f7<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.footer ul li</span> <span class="token punctuation">&#123;</span>            <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 80px<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>            <span class="token property">align-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.footer ul li span</span> <span class="token punctuation">&#123;</span>            <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'list.png'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>            <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span>            <span class="token property">background-size</span><span class="token punctuation">:</span> 100% 100%<span class="token punctuation">;</span>            <span class="token property">background-origin</span><span class="token punctuation">:</span> content-box<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.footer ul li a</span> <span class="token punctuation">&#123;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #ccc<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.heihei</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 26px<span class="token punctuation">;</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> 26px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> .7<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.heihei a</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 132px<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> blanchedalmond<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#switch1</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 76px<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> bisque<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#hidecontent</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> 106px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">max-width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> beige<span class="token punctuation">;</span>            <span class="token property">z-index</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#hidecontent ul</span> <span class="token punctuation">&#123;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#hidecontent ul li</span> <span class="token punctuation">&#123;</span>            <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% / 3<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">min-width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% / 3<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% / 3<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 3px 0<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#navigation</span> <span class="token punctuation">&#123;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>            <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">max-width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 88px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#navigation ul</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 35px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#navigation ul:nth-child(2)</span> <span class="token punctuation">&#123;</span>            <span class="token property">margin-top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#navigation ul li</span> <span class="token punctuation">&#123;</span>            <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100%-12px / 3<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/* 当上面设置的子项目的宽不期作用，可以加上下面2行试试 */</span>            <span class="token property">min-width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100%-12px / 3<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100%-12px / 3<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 3px 0<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #008080<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#navigation[data-fixed="fixed"]</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>            <span class="token property">z-index</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>            <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 5px 10px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> .1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.modal</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/**            * 这里是关于遮罩的写法            * 首先            * 1. 该遮罩的HTML应该写在最大的容器中            * 2. z-index的值比其他的高            * 3. position: fixed，不要absolute，防止跟着容器滚动            * 4. 宽高100%            **/</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> .5<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">z-index</span><span class="token punctuation">:</span> 3<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.modalcontent</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">margin-top</span><span class="token punctuation">:</span> -75px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.closed</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> -20px<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> -20px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #008080<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 2px solid #fff<span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 25px<span class="token punctuation">;</span>            <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modalcontent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- 此处的关闭符号x，X应该使用大写，否则看起来就不水平居中，即使用了line-height --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>closed<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>X<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                dssssssssss                dssssssssss                dssssssssss                dssssssssss                dssssssssss                dssssssssss                dssssssssss                dssssssssss                dssssssssss                dssssssssss                dssssssssss                dssssssssss                dssssssssss                dssssssssss                dssssssssss                dssssssssss                dssssssssss                dssssssssss                dssssssssss                dssssssssss                dssssssssss                dssssssssss                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://1.com/<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>dssssssss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navigation<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> #f7f7f7<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span> <span class="token attr-name">data-fixed</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>服饰风格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>服饰风格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>服饰风格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>服饰风格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>服饰风格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>服饰风格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>服饰风格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>服饰风格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>heihei<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://1.com/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>金黄色的海景房<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>switch1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>收起↓↓<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footerul<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://1.com/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://1.com/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>more<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://1.com/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://1.com/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidecontent<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>white<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>black<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">let</span> hidecontent <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'hidecontent'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> more <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'more'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> switch1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'switch1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> footerul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'footerul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// document.getElementsByClassName 获得的是一个 HTMLCollection 对象，</span>        <span class="token comment">// 包含所有具有指定类名的元素。即使只有一个元素具有该类名，也会返回一个集合。</span>        <span class="token comment">// 所以在后面加上一个[0]，表示拿第一个匹配项</span>        <span class="token keyword">let</span> footer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'footer'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> navigation <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'navigation'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// document.querySelector和getElementsByClassName不同的是，</span>        <span class="token comment">// 它返回第一个匹配项，即使有很多使用同样类名的元素</span>        <span class="token keyword">let</span> closed <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.closed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> modal <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.modal'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> modalcontent <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.modalcontent'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        closed<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            modal<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>            modalcontent<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        modal<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            modal<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>            modalcontent<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        switch1<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 这里使用了3元运算符，注意写法</span>            <span class="token comment">// 比如下面的一句，首先display:flex和display:block是冲突的</span>            <span class="token comment">// 所以只能写成display:flex和display:none</span>            <span class="token comment">// 3元运算符是一个条件后跟一个问号（?），如果条件为真值，则执行冒号（:）前的表达式；若条件为假值，则执行最后的表达式。</span>            <span class="token comment">// 最后是使用JS访问元素的样式的写法，如：footer.style.marginBottom</span>            <span class="token comment">// 元素.style.属性=== '属性值'；</span>            <span class="token comment">// JS访问修改元素的CSS有4种方法(?)，现在这种是修改内联样式的，属性的写法使用驼峰法</span>            <span class="token comment">// 在jQuery中，使用.css来获取和修改DOM的样式</span>            <span class="token comment">/**             * 1. HTMLElement.style 属性返回一个 CSSStyleDeclaration 对象，             * 表示元素的 内联style 属性（attribute），但无法读取内嵌和外部的样式表属性。             * 2. Element.currentStyle 仅限IE浏览器，和getComputedStyle()差不多             * 3. window.getComputedStyle()获取所有的 css 样式,              * 获取计算后的样式（computed styles）对象，             * 该对象包含应用于元素的所有样式属性的最终计算值。             *              * 4. Element.getBoundingClientRect();             * 最偏门的一种用法.用于获取某个元素相对于视窗的位置集合。             * 返回的对象中有 top, right, bottom, left,width,height 等属性。             * 除了 width 和 height 外的属性都是相对于视口的左上角位置而言的。             * **/</span>            footerul<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token punctuation">(</span>footerul<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">===</span> <span class="token string">"flex"</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"none"</span> <span class="token operator">:</span> <span class="token string">"flex"</span><span class="token punctuation">;</span>            more<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token punctuation">(</span>more<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">===</span> <span class="token string">"flex"</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"none"</span> <span class="token operator">:</span> <span class="token string">"flex"</span><span class="token punctuation">;</span>            switch1<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token punctuation">(</span>switch1<span class="token punctuation">.</span>innerText <span class="token operator">===</span> <span class="token string">'收起↓↓'</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"展开↑↑"</span> <span class="token operator">:</span> <span class="token string">"收起↓↓"</span><span class="token punctuation">;</span>            footer<span class="token punctuation">.</span>style<span class="token punctuation">.</span>marginBottom <span class="token operator">=</span> <span class="token punctuation">(</span>footer<span class="token punctuation">.</span>style<span class="token punctuation">.</span>marginBottom <span class="token operator">===</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"-80px"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        more<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            hidecontent<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token punctuation">(</span>hidecontent<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">===</span> <span class="token string">"none"</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"block"</span> <span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         * 1.          * 下面这个函数抄的，offsetTop大概指元素顶部到父元素的顶部的距离         * 当使用offsetTop的元素的父元素没有使用absolute或者fixed定位时，则子元素的offsetTop为到其顶部到最近的父元素的顶部的距离。所以一般地，这个用法用来测量元素到root顶部的距离（想测这个的，子元素的父元素不要给定位）         *          * offsetTop 属性返回的是一个元素的上边缘（border edge）与其 offsetParent 元素的上边缘之间的距离。offsetParent 是最近的已经定位（positioned）的祖先元素，如果没有已经定位的祖先元素，则 offsetParent 是根元素（root element）。如果子元素的父元素没有使用 absolute 或 fixed 定位，则 offsetTop 表示子元素的上边缘到最近的已经定位的祖先元素的上边缘的距离。如果没有已经定位的祖先元素，则它表示到根元素的距离。所以，你可以使用 offsetTop 来测量一个元素到根元素（或最近的已经定位的祖先元素）顶部的距离，但在子元素的父元素没有定位时，offsetTop 表示到根元素的距离。         *          * 2.         * 关于st变量，参看文章：         * 关于document.body.scrollTop和document.documentElement.scrollTop 值为0的问题         * 链接：         * 2024/01/25/guan-yu-document-body-scrolltop-he-document-documentelement-scrolltop-zhi-wei-0-de-wen-ti/         *          * 3.         * obj.setAttribute("data-fixed", st >= ot ? "fixed" : "")         * 使用这样设置吸顶的方法，明显比使用时刻检测该元素到root顶部的距离节约性能         * 而且页面还不抖动         * st是root的滚动条到顶部的距离         * ot是导航到顶部的距离（相对于root）         * 当ot小于st，ot=>fixed         * 这里ot在初始化时是200px, 当st离顶部大于200px时，         * 也就是页面向下滚动200px，此时导航来到顶部，所以此时给导航一个CSS声明#navigation[data-fixed="fixed"]（前面在CSS表里已经写好）         * **/</span>        <span class="token keyword">var</span> obj <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"navigation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> ot <span class="token operator">=</span> obj<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"🚀 ~ ot:"</span><span class="token punctuation">,</span> ot<span class="token punctuation">)</span>        document<span class="token punctuation">.</span><span class="token function-variable function">onscroll</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> st <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"🚀 ~ st:"</span><span class="token punctuation">,</span> st<span class="token punctuation">)</span>            <span class="token comment">// 关于scrollTop，参考另外一篇[文章](/2024/01/25/guan-yu-document-body-scrolltop-he-document-documentelement-scrolltop-zhi-wei-0-de-wen-ti/)</span>            <span class="token comment">// setAttribute语法： element.setAttribute(attribute name,attribute value)</span>            <span class="token comment">// 观察setAttribute在浏览器的操作过程，发现其每次都使用"=",所以这个方法是给标签赋予内联样式，或者类名的，</span>            <span class="token comment">// 赋予类名时，直接在attribute name写‘class’,然后在后面写class name</span>            <span class="token comment">// 内联样式则在attribute name写‘style’,后面像写内联CSS一样直接写一堆属性和值</span>            <span class="token comment">// 内联样式也可以这样写element.setAttribute("align","200px")</span>            <span class="token comment">// 在这里利用了：括号内的属性名和值都是必须的</span>            <span class="token comment">// 所以当后面的3元运算符的条件不成立时，设置为空，导致该CSS无效</span>            <span class="token comment">// 当3元运算符的条件成立时，设置为fixed，该CSS有效</span>            <span class="token comment">// 正常人会用if来写：if(st >= ot)&#123;obj.setAttribute("data-fixed","fixed")&#125; else&#123;obj.removeAttribute("data-fixed")&#125;           </span>            <span class="token comment">// 关于removeAttribute，其值只有一个，可以填class，style，也可以填padding,align之类，</span>            <span class="token comment">// 它和setAttribute一样，每次都是操作=号，</span>                        <span class="token comment">//obj.setAttribute("data-fixed", st >= ot ? "fixed" : "");</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>st <span class="token operator">>=</span> ot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                obj<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"data-fixed"</span><span class="token punctuation">,</span> <span class="token string">"fixed"</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                obj<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">"data-fixed"</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 码海无涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> CSS </tag>
            
            <tag> 码海无涯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于document.body.scrollTop和document.documentElement.scrollTop 值为0的问题</title>
      <link href="/2024/01/25/guan-yu-document-body-scrolltop-he-document-documentelement-scrolltop-zhi-wei-0-de-wen-ti/"/>
      <url>/2024/01/25/guan-yu-document-body-scrolltop-he-document-documentelement-scrolltop-zhi-wei-0-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="一、先遇到document-body-scrollTop值为0的问题"><a href="#一、先遇到document-body-scrollTop值为0的问题" class="headerlink" title="一、先遇到document.body.scrollTop值为0的问题"></a>一、先遇到document.body.scrollTop值为0的问题</h2><p>做页面的时候可能会用到位置固定的层,读取document.body.scrollTop来设置层的位置,像这样,</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function-variable function">onscroll</span><span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">var</span> oId<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementByIdx_x</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> oId<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top<span class="token operator">=</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop<span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可是怎么没有达到预期效果呢,输出document.body.scrollTop的值一看,一直都是0.原来是DTD的问题,要是页面直接用开头的话就没有问题了.但是要符合web标准,DTD当然是不能少的.使用DTD时用document.documentElement.scrollTop代替document.body.scrollTop就可以了</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function-variable function">onscroll</span><span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">var</span> oId<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementByIdx_x</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   oId<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top<span class="token operator">=</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop<span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>或者用函数来解决：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">get_scrollTop_of_body</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> scrollTop<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> window<span class="token punctuation">.</span>pageYOffset <span class="token operator">!=</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//pageYOffset指的是滚动条顶部到网页顶部的距离</span>        scrollTop <span class="token operator">=</span> window<span class="token punctuation">.</span>pageYOffset<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> document<span class="token punctuation">.</span>compatMode <span class="token operator">!=</span> <span class="token string">'undefined'</span> <span class="token operator">&amp;&amp;</span> document<span class="token punctuation">.</span>compatMode <span class="token operator">!=</span> <span class="token string">'BackCompat'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        scrollTop <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> document<span class="token punctuation">.</span>body <span class="token operator">!=</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        scrollTop <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> scrollTop<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>window.pageYoffset:<br>pageYOffset 属性是 scrollY 属性的别名：</p><p><code>window.pageYOffset == window.scrollY; // 总是返回 true</code></p><p>为了跨浏览器兼容，请使用 window.pageYOffset 代替 window.scrollY。另外，旧版本 IE（&lt;9）两个属性都不支持，必须使用其他的非标准属性。完整的兼容性代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> supportPageOffset <span class="token operator">=</span> window<span class="token punctuation">.</span>pageXOffset <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token keyword">var</span> isCSS1Compat <span class="token operator">=</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>compatMode <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"CSS1Compat"</span><span class="token punctuation">;</span><span class="token keyword">var</span> x <span class="token operator">=</span> supportPageOffset  <span class="token operator">?</span> window<span class="token punctuation">.</span>pageXOffset  <span class="token operator">:</span> isCSS1Compat    <span class="token operator">?</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollLeft    <span class="token operator">:</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollLeft<span class="token punctuation">;</span><span class="token keyword">var</span> y <span class="token operator">=</span> supportPageOffset  <span class="token operator">?</span> window<span class="token punctuation">.</span>pageYOffset  <span class="token operator">:</span> isCSS1Compat    <span class="token operator">?</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop    <span class="token operator">:</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有主流浏览器都支持 pageXOffset 和 pageYOffset 属性。<br>注：IE对盒模型的渲染在 <strong>Standards Mode</strong>和<strong>Quirks Mode</strong>是有很大差别的，在Standards Mode下对于盒模型的解释和其他的标准浏览器是一样，但在Quirks Mode模式下则有很大差别，而在不声明Doctype的情况下，IE默认又是Quirks Mode。所以为兼容性考虑，我们可能需要获取当前的文档渲染方式。</p><p>document.compatMode正好派上用场，它有两种可能的返回值：<strong>BackCompat</strong>和<strong>CSS1Compat</strong>，对其解释如下：</p><p>BackCompat： Standards-compliant mode is not switched on. (Quirks Mode)</p><p>CSS1Compat： Standards-compliant mode is switched on. (Standards Mode)</p><p>在实际的项目中，我们还需要在获取浏览是否IE，这样就可以得到IE的渲染模式了。</p><p>当文档有了标准声明时， document.compatMode 的值就等于 “CSS1compat”， 因此，我们可以根据 document.compatMode 的值来判断文档是否加了标准声明：</p><p>var height &#x3D; document.compatMode&#x3D;&#x3D;”CSS1Compat” ? document.documentElement.clientHeight : document.body.clientHeight;</p><h2 id="二、再次遇到谷歌浏览器不支持document-documentElement-scrollTop，值0的问题"><a href="#二、再次遇到谷歌浏览器不支持document-documentElement-scrollTop，值0的问题" class="headerlink" title="二、再次遇到谷歌浏览器不支持document.documentElement.scrollTop，值0的问题"></a>二、再次遇到谷歌浏览器不支持document.documentElement.scrollTop，值0的问题</h2><ul><li><p>信息显示浮动层时，IE、Firefox下都能显示正常，但Chrome下出现了浮动层永远显示在上面，经过仔细分析，发现Chrome对document.documentElement.scrollTop的识别会出现误差。不过加上document.body.scrollTop后，则显示正常。<br><br>  由于document.documentElement.scrollTop和document.body.scrollTop在标准模式或者是奇怪模式下都只有一个会返回有效的值，所以都加上也不会有问题（看来上面的问题是Chrome可能把文档当作非标准文档来解析了）。</p><p>  即获取高度时使用document.documentElement.scrollTop+document.body.scrollTop，经测试，代码在IE、Firefox、Chrome下都能显示正常了。</p></li></ul><h2 id="三、浏览器兼容模式"><a href="#三、浏览器兼容模式" class="headerlink" title="三、浏览器兼容模式"></a>三、浏览器兼容模式</h2><ul><li><p>对于document.compatMode，很多朋友可能都根我一样很少接触，知道他的存在却不清楚他的用途。今天在ext中看到 document.compatMode的使用，感觉这个对于我们开发兼容性的web页面还是很有帮助，我们都知道，IE对盒模型的渲染在 Standards Mode和Quirks Mode是有很大差别的，在Standards Mode下对于盒模型的解释和其他的标准浏览器是一样，但在Quirks Mode模式下则有很大差别，而在不声明Doctype的情况下，IE默认又是Quirks Mode。所以为兼容性考虑，我们可能需要获取当前的文档渲染方式。<br><br>      document.compatMode正好派上用场，它有两种可能的返回值：BackCompat和CSS1Compat，对其解释如下：</p><p>BackCompat Standards-compliant mode is not switched on. (Quirks Mode)</p><p>CSS1Compat Standards-compliant mode is switched on. (Standards Mode)</p><p>    在实际的项目中，我们还需要在获取浏览是否IE，这样就可以得到IE的渲染模式了。在Ext中的代码：isBorderBox&#x3D;isIE&amp;&amp;!isStrict。</p><p>当文档有了标准声明时， document.compatMode 的值就等于 “CSS1compat”， 因此， 我们可以根据 document.compatMode 的值来判断文档是否加了标准声明</p><p>var height &#x3D; document.compatMode&#x3D;&#x3D;”CSS1Compat” ? document.documentElement.clientHeight : document.body.clientHeight;</p></li><li><p>=&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;模式应用&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>document.compatMode:获取当前浏览器采用的渲染方式。</p><p>主要是浏览器的模式，有两个：BackCompat，CSS1Compat。其中前者是怪异模式，后者是标准模式。</p><p>IE默认是BackCompat模式，Gecko内核的浏览器只在table中图片层上不同，可以看为CSS1Compat标准模式</p><p>document.compatMode等于BackCompat时，浏览器客户区宽度是document.body.clientWidth；</p><p>当document.compatMode等于CSS1Compat时，浏览器客户区宽度是document.documentElement.clientWidth。</p><p>浏览器客户区高度、滚动条高度、滚动条的Left、滚动条的Top等等都是上面的情况。</p><p>一个准确获取网页客户区的宽高、滚动条宽高、滚动条Left和Top的代码：</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>compatMode <span class="token operator">==</span> \"BackCompat\"<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cWidth <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>cHeight <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>sWidth <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollWidth<span class="token punctuation">;</span>sHeight <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">;</span>sLeft <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollLeft<span class="token punctuation">;</span>sTop <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">//document.compatMode == \"CSS1Compat\"</span>cWidth <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>cHeight <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>sWidth <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollWidth<span class="token punctuation">;</span>sHeight <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">;</span>sLeft <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollLeft <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollLeft <span class="token operator">:</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollLeft<span class="token punctuation">;</span>sTop <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop <span class="token operator">:</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原文：<a href="http://blog.csdn.net/gongyuan303/article/details/8935307">http://blog.csdn.net/gongyuan303/article/details/8935307</a></p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20 个令人惊叹的一行 JavaScript 代码</title>
      <link href="/2024/01/20/20-ge-ling-ren-liang-tan-de-yi-xing-javascript-dai-ma/"/>
      <url>/2024/01/20/20-ge-ling-ren-liang-tan-de-yi-xing-javascript-dai-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="20-个令人惊叹的一行-JavaScript-代码"><a href="#20-个令人惊叹的一行-JavaScript-代码" class="headerlink" title="20 个令人惊叹的一行 JavaScript 代码"></a>20 个令人惊叹的一行 JavaScript 代码</h1><blockquote><p>本文为转载翻译文章。</p><p>原文地址：<a href="%22https://dev.to/saviomartin/20-killer-javascript-one-liners-94f%22">dev.to&#x2F;saviomartin…</a></p><p>原文作者：<a href="%22https://dev.to/saviomartin%22">Savio Martin</a></p></blockquote><p>今天，我想分享 20 个 令人惊叹的 JavaScript 一行代码，让你的工作更轻松。一起来看看吧！🚀</p><h2 id="1-获取浏览器-Cookie-的值"><a href="#1-获取浏览器-Cookie-的值" class="headerlink" title="1. 获取浏览器 Cookie 的值"></a>1. 获取浏览器 Cookie 的值</h2><p>使用 document.cookie 来获取 Cookie 的值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">cookie</span> <span class="token operator">=</span> <span class="token parameter">name</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>document<span class="token punctuation">.</span>cookie<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">=</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">cookie</span><span class="token punctuation">(</span><span class="token string">'_ga'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Result: "GA1.2.1929736587.1601974046"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-将-RGB-转换为十六进制"><a href="#2-将-RGB-转换为十六进制" class="headerlink" title="2. 将 RGB 转换为十六进制"></a>2. 将 RGB 转换为十六进制</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">rgbToHex</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">"#"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>g <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">rgbToHex</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Result: #0033ff`</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-复制到剪贴板"><a href="#3-复制到剪贴板" class="headerlink" title="3. 复制到剪贴板"></a>3. 复制到剪贴板</h2><p>使用 navigator.clipboard.writeText 轻松将任何文本复制到剪贴板上。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">copyToClipboard</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token operator">=></span> navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">.</span><span class="token function">writeText</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">copyToClipboard</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="4-检查日期是否有效"><a href="#4-检查日期是否有效" class="headerlink" title="4.检查日期是否有效"></a>4.检查日期是否有效</h2><p>使用以下代码段检查日期是否有效。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">isDateValid</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token operator">...</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">isDateValid</span><span class="token punctuation">(</span><span class="token string">"December 17, 1995 03:24:00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Result: true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="5-找出一年中的某一天"><a href="#5-找出一年中的某一天" class="headerlink" title="5.找出一年中的某一天"></a>5.找出一年中的某一天</h2><p>查找日期中的某一天。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">dayOfYear</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">date</span><span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>date <span class="token operator">-</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">dayOfYear</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Result: 272</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="将6-字符串首字母大写"><a href="#将6-字符串首字母大写" class="headerlink" title="将6.字符串首字母大写"></a>将6.字符串首字母大写</h2><p>Javascript 没有内置的大写函数，因此我们可以使用以下代码。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">capitalize</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=></span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">capitalize</span><span class="token punctuation">(</span><span class="token string">"follow for more"</span><span class="token punctuation">)</span><span class="token comment">// Result: Follow for more</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="7-计算两天之间相差的天数"><a href="#7-计算两天之间相差的天数" class="headerlink" title="7.计算两天之间相差的天数"></a>7.计算两天之间相差的天数</h2><p>使用以下代码段查找给定 2 天之间相差的天数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">dayDif</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">date1<span class="token punctuation">,</span> date2</span><span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>date1<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> date2<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">86400000</span><span class="token punctuation">)</span><span class="token function">dayDif</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"2020-10-21"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"2021-10-22"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// Result: 366</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="8-清除所有-Cookie"><a href="#8-清除所有-Cookie" class="headerlink" title="8.清除所有 Cookie"></a>8.清除所有 Cookie</h2><p>通过使用 document.cookie 可以轻松清除存储在网页中的所有 cookie 。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> clearCookies <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">cookie</span> <span class="token operator">=></span> document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^ +</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">=.\*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">=;expires=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUTCString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">;path=/</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="9-生成随机十六进制"><a href="#9-生成随机十六进制" class="headerlink" title="9. 生成随机十六进制"></a>9. 生成随机十六进制</h2><p>使用 Math.random 和 padEnd 属性生成随机的十六进制。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">randomHex</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">#</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0xffffff</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">randomHex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Result: #92b008</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-数组去重"><a href="#10-数组去重" class="headerlink" title="10. 数组去重"></a>10. 数组去重</h2><p>使用 SetJavaScript 可以轻松地删除重复项。超级有用！</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">removeDuplicates</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">removeDuplicates</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Result: [ 1, 2, 3, 4, 5, 6 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="11-从-URL-获取查询参数"><a href="#11-从-URL-获取查询参数" class="headerlink" title="11. 从 URL 获取查询参数"></a>11. 从 URL 获取查询参数</h2><p>通过 window.location 或原始 URL 轻松查询 goole.com?search&#x3D;easy&amp;page&#x3D;3 的参数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">getParameters</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token constant">URL</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>     <span class="token constant">URL</span> <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'&#123;"'</span> <span class="token operator">+</span> <span class="token function">decodeURI</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">"</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'\\"'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&amp;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'","'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">=</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'":"'</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">'"&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">getParameters</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>location<span class="token punctuation">)</span><span class="token comment">// Result: &#123; search : "easy", page : 3 &#125;</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">---------------or-------------</span><span class="token regex-delimiter">/</span></span>Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-从日期获取“时分秒”格式的时间"><a href="#12-从日期获取“时分秒”格式的时间" class="headerlink" title="12. 从日期获取“时分秒”格式的时间"></a>12. 从日期获取“时分秒”格式的时间</h2><p>我们可以从日期中，获取到 hour : minutes : seconds 格式的时间：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">timeFromDate</span> <span class="token operator">=</span> <span class="token parameter">date</span> <span class="token operator">=></span> date<span class="token punctuation">.</span><span class="token function">toTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">timeFromDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Result: "17:30:00"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="13-确认奇偶数"><a href="#13-确认奇偶数" class="headerlink" title="13. 确认奇偶数"></a>13. 确认奇偶数</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">isEven</span> <span class="token operator">=</span> <span class="token parameter">num</span> <span class="token operator">=></span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isEven</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Result: True</span><span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>or<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">/</span><span class="token keyword">const</span> <span class="token function-variable function">isEven</span> <span class="token operator">=</span> <span class="token parameter">num</span> <span class="token operator">=></span> <span class="token punctuation">(</span>num <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isEven</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Result: True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="14-求平均值"><a href="#14-求平均值" class="headerlink" title="14. 求平均值"></a>14. 求平均值</h2><p>使用 reduce 方法找到多个数字的平均值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">average</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=></span> args<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">/</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token function">average</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Result: 2.5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="15-回到顶部"><a href="#15-回到顶部" class="headerlink" title="15. 回到顶部"></a>15. 回到顶部</h2><p>使用 window.scrollTo(0, 0) 方法自动回到顶部。将 x 和 y 都设置为 0。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">goToTop</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> window<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">goToTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="16-翻转字符串"><a href="#16-翻转字符串" class="headerlink" title="16. 翻转字符串"></a>16. 翻转字符串</h2><p>使用split,reverse 和 join 方法轻松翻转字符串。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">reverse</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=></span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Result: 'dlrow olleh'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="17-检查数组是否为空"><a href="#17-检查数组是否为空" class="headerlink" title="17. 检查数组是否为空"></a>17. 检查数组是否为空</h2><p>检查数组是否为空的简单代码，结果将返回 true 或 false。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">isNotEmpty</span> <span class="token operator">=</span> <span class="token parameter">arr</span> <span class="token operator">=></span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Result: true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="18-获取用户选定的文本"><a href="#18-获取用户选定的文本" class="headerlink" title="18. 获取用户选定的文本"></a>18. 获取用户选定的文本</h2><p>使用内置 getSelection 属性获取用户选择的文本。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">getSelectedText</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> window<span class="token punctuation">.</span><span class="token function">getSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getSelectedText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="19-打乱数组"><a href="#19-打乱数组" class="headerlink" title="19. 打乱数组"></a>19. 打乱数组</h2><p>使用 sort 和 random 方法对数组进行打乱混合。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">shuffleArray</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">0.5</span> <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">shuffleArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Result: [ 1, 4, 3, 2 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="20-检测用户是否处于暗模式"><a href="#20-检测用户是否处于暗模式" class="headerlink" title="20. 检测用户是否处于暗模式"></a>20. 检测用户是否处于暗模式</h2><p>使用以下代码检查用户的设备是否处于暗模式。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> isDarkMode <span class="token operator">=</span> window<span class="token punctuation">.</span>matchMedia <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span><span class="token function">matchMedia</span><span class="token punctuation">(</span><span class="token string">'(prefers-color-scheme: dark)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>matchesconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isDarkMode<span class="token punctuation">)</span> <span class="token comment">// Result: True or False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10 种跨域解决方案（附终极方案）</title>
      <link href="/2024/01/20/10-chong-kua-yu-jie-jue-fang-an-fu-zhong-ji-fang-an/"/>
      <url>/2024/01/20/10-chong-kua-yu-jie-jue-fang-an-fu-zhong-ji-fang-an/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/10-solutions-of-CORS-with-ultimate-solution/1.png" alt="10 种跨域解决方案（附终极方案）"></p><h1 id="10-种跨域解决方案（附终极方案）"><a href="#10-种跨域解决方案（附终极方案）" class="headerlink" title="10 种跨域解决方案（附终极方案）"></a>10 种跨域解决方案（附终极方案）</h1><p>原文：<a href="https://zhuanlan.zhihu.com/p/132683471">程序员秋风</a></p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>嗯。又来了，又说到跨域了，这是一个老生常谈的话题，以前我觉得这种基础文章没有什么好写的，会想着你去了解底层啊，不是很简单吗。但是最近在开发一个 <strong>vscode 插件</strong> 发现，当你刚入门一样东西的时候，你不会想这么多，因为你对他不熟悉，当你遇到不会的东西，你就是想先找到解决方案，然后通过这个解决方案再去深入理解。就比如跨域，新人或者刚接触的人对它并不是那么熟悉，所以说列出一些自己积累的方案，以及一些常用的场景来给他人带来一些解决问题的思路，这件事是有意义的。（写完之后还发现真香。以后忘了还能回来看看）</p><p>其实现在的环境对于刚入门的前端来说，非常的不友好，一方面吧，很多刚新人没有经历过工具的变更时代，另一方面框架的迭代更新速度很快。在以前你可能掌握几种常见的手法就好了。但是现在 <code>webpack-dev-server</code>、<code>vue-cli</code>、<code>parcel</code>，这些脚手架都进行了一层封装，对于熟悉的人可能很简单，但是对于还未入门的人来说，简直就是一个黑盒，虽然用起来很方便，但是某一天遇到了问题，你对它不熟悉，你就会不知道所错。（但是别慌，主流 cli 的跨域方式我都会讲到）</p><p>讲着讲着有点偏离方向，可能我讲的也并不一定是正确的。下面切入正题。</p><p>本文会以 <strong>「What-How-Why」</strong> 的方式来进行讲解。而在在 How （如何解决跨域，将会提供标题的 11 种方案。）</p><p><strong>重要的说明: 在文中，web 端地址为 localhost:8000 服务端地址为 localhost:8080,这一点希望你能记住，会贯穿全文，你也可以把此处的两端的地址代入你自己的地址。</strong></p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/10-solutions-of-CORS-with-ultimate-solution/1.png"></p><p>以下所有代码均在 <a href="https://github.com/hua1995116/node-demo/tree/master/node-cors">https://github.com/hua1995116/node-demo/tree/master/node-cors</a></p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/10-solutions-of-CORS-with-ultimate-solution/2.png"></p><h2 id="一、跨域是什么？"><a href="#一、跨域是什么？" class="headerlink" title="一、跨域是什么？"></a>一、跨域是什么？</h2><h3 id="1-同源策略"><a href="#1-同源策略" class="headerlink" title="1.同源策略"></a>1.同源策略</h3><p>跨域问题其实就是浏览器的同源策略所导致的。</p><blockquote><p><strong>同源策略</strong>是一个重要的安全策略，它用于限制一个<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/%25E6%25BA%2590">origin</a>的文档或者它加载的脚本如何能与另一个源的资源进行交互。它能帮助阻隔恶意文档，减少可能被攻击的媒介。<br>--来源 MDN</p></blockquote><p>当跨域时会收到以下错误</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/10-solutions-of-CORS-with-ultimate-solution/3.webp"></p><h3 id="2-同源示例"><a href="#2-同源示例" class="headerlink" title="2.同源示例"></a>2.同源示例</h3><p>那么如何才算是同源呢？先来看看 url 的组成部分</p><p><code>http://www.example.com:80/path/to/myfile.html?key1=value1&amp;key2=value2#SomewhereInTheDocument</code></p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/10-solutions-of-CORS-with-ultimate-solution/4.png"></p><p>只有当</p><p><strong>protocol（协议）、domain（域名）、port（端口）三者一致。</strong></p><p><strong>protocol（协议）、domain（域名）、port（端口）三者一致。</strong></p><p><strong>protocol（协议）、domain（域名）、port（端口）三者一致。</strong></p><p>才是同源。</p><p>以下协议、域名、端口一致。</p><p><a href="http://www.example.com:80/a.js">http://www.example.com:80/a.js</a></p><p><a href="http://www.example.com:80/b.js">http://www.example.com:80/b.js</a></p><p>以下这种看上去再相似也没有用，都不是同源。</p><p><a href="http://www.example.com:8080">http://www.example.com:8080</a></p><p><a href="http://www2.example.com:80">http://www2.example.com:80</a></p><p>在这里注意一下啊，这里是为了突出端口的区别才写上端口。在默认情况下 http 可以省略端口 80， https 省略 443。这别到时候闹笑话了，你和我说 <a href="http://www.example.com:80">http://www.example.com:80</a> 和 http:&#x2F;&#x2F;www.example.com 不是同源，他俩是一个东西。</p><p><a href="http://www.example.com:80">http://www.example.com:80</a> &#x3D;&#x3D;&#x3D; http:&#x2F;&#x2F;www.example.com</p><p><a href="https://www.example.com%3A443">https://www.example.com:443</a> &#x3D;&#x3D;&#x3D; https:&#x2F;&#x2F;www.example.com</p><p>唔，还是要说明一下。</p><h2 id="二、如何解决跨域？"><a href="#二、如何解决跨域？" class="headerlink" title="二、如何解决跨域？"></a>二、如何解决跨域？</h2><h3 id="1-CORS"><a href="#1-CORS" class="headerlink" title="1.CORS"></a>1.CORS</h3><p>跨域资源共享(<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/CORS">CORS</a>) 是一种机制，它使用额外的 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/HTTP">HTTP</a> 头来告诉浏览器 让运行在一个 origin (domain) 上的 Web 应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器<strong>不同的域、协议或端口</strong>请求一个资源时，资源会发起一个<strong>跨域 HTTP 请求</strong>。</p><p>而在 cors 中会有 <code>简单请求</code> 和 <code>复杂请求</code>的概念。</p><p><strong>浏览器支持情况</strong></p><p>当你使用 IE&lt;&#x3D;9, Opera&lt;12, or Firefox&lt;3.5 或者更加老的浏览器，这个时候请使用 JSONP 。</p><h3 id="a-简单请求"><a href="#a-简单请求" class="headerlink" title="a.简单请求"></a>a.简单请求</h3><p>不会触发 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS%23Preflighted_requests">CORS 预检请求</a>。这样的请求为“简单请求”，请注意，该术语并不属于 <a href="https://fetch.spec.whatwg.org/">Fetch</a> （其中定义了 CORS）规范。若请求满足所有下述条件，则该请求可视为“简单请求”：</p><p>情况一: 使用以下方法(意思就是以下请求意外的都是非简单请求)</p><ul><li><code>GET</code></li><li><code>HEAD</code></li><li><code>POST</code></li></ul><p>情况二: 人为设置以下集合外的请求头</p><ul><li><code>Accept</code></li><li><code>Accept-Language</code></li><li><code>Content-Language</code></li><li><code>Content-Type</code> （需要注意额外的限制）</li><li><code>DPR</code></li><li><code>Downlink</code></li><li><code>Save-Data</code></li><li><code>Viewport-Width</code></li><li><code>Width</code></li></ul><p>情况三：<code>Content-Type</code>的值仅限于下列三者之一：(例如 application&#x2F;json 为非简单请求)</p><ul><li><code>text/plain</code></li><li><code>multipart/form-data</code></li><li><code>application/x-www-form-urlencoded</code></li></ul><p>情况四:</p><p>请求中的任意<code>XMLHttpRequestUpload</code> 对象均没有注册任何事件监听器；<code>XMLHttpRequestUpload</code> 对象可以使用 <code>XMLHttpRequest.upload</code> 属性访问。</p><p>情况五:</p><p>请求中没有使用 <code>ReadableStream</code> 对象。</p><h3 id="b-非简单请求"><a href="#b-非简单请求" class="headerlink" title="b.非简单请求"></a>b.非简单请求</h3><p>除以上情况外的。</p><h3 id="c-Node-中的解决方案"><a href="#c-Node-中的解决方案" class="headerlink" title="c.Node 中的解决方案"></a>c.Node 中的解决方案</h3><h3 id="原生方式"><a href="#原生方式" class="headerlink" title="原生方式"></a>原生方式</h3><p>我们来看下后端部分的解决方案。<code>Node</code> 中 <code>CORS</code> 的解决代码.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  ctx<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">,</span> ctx<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Credentials"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Request-Method"</span><span class="token punctuation">,</span> <span class="token string">"PUT,POST,GET,DELETE,OPTIONS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>    <span class="token string">"Access-Control-Allow-Headers"</span><span class="token punctuation">,</span>    <span class="token string">"Origin, X-Requested-With, Content-Type, Accept, cc"</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">"OPTIONS"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ctx<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">204</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第三方中间件"><a href="#第三方中间件" class="headerlink" title="第三方中间件"></a>第三方中间件</h3><p>为了方便也可以直接使用中间件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"koa-cors"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="关于-cors-的-cookie-问题"><a href="#关于-cors-的-cookie-问题" class="headerlink" title="关于 cors 的 cookie 问题"></a>关于 cors 的 cookie 问题</h3><p>想要传递 <code>cookie</code> 需要满足 3 个条件</p><p>1.web 请求设置<code>withCredentials</code></p><p>这里默认情况下在跨域请求，浏览器是不带 cookie 的。但是我们可以通过设置 <code>withCredentials</code> 来进行传递 <code>cookie</code>.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 原生 xml 的设置方式</span><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">// axios 设置方式</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.<code>Access-Control-Allow-Credentials</code> 为 <code>true</code></p><p>3.<code>Access-Control-Allow-Origin</code>为非 <code>*</code></p><p>这里请求的方式，在 <code>chrome</code> 中是能看到返回值的，但是只要不满足以上其一，浏览器会报错，获取不到返回值。</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/10-solutions-of-CORS-with-ultimate-solution/5.webp"></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">Access to XMLHttpRequest at 'http://127.0.0.1:8080/api/corslist' from origin 'http://127.0.0.1:8000' has been blocked by CORS policy: The value of the 'Access-Control-Allow-Credentials' header in the response is '' which must be 'true' when the request's credentials mode is 'include'. The credentials mode of requests initiated by the XMLHttpRequest is controlled by the withCredentials attribute.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/10-solutions-of-CORS-with-ultimate-solution/6.webp"></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">Access to XMLHttpRequest at 'http://127.0.0.1:8080/api/corslist' from origin 'http://127.0.0.1:8000' has been blocked by CORS policy: The value of the 'Access-Control-Allow-Origin' header in the response must not be the wildcard '*' when the request's credentials mode is 'include'. The credentials mode of requests initiated by the XMLHttpRequest is controlled by the withCredentials attribute.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/10-solutions-of-CORS-with-ultimate-solution/7.webp"></p><h3 id="d-前端示例"><a href="#d-前端示例" class="headerlink" title="d.前端示例"></a>d.前端示例</h3><p>分别演示一下前端部分 <code>简单请求</code> 和 <code>非简单请求</code></p><h3 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/axios/0.19.2/axios.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:8080/api/corslist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="非简单请求"><a href="#非简单请求" class="headerlink" title="非简单请求"></a>非简单请求</h3><p>这里我们加入了一个非集合内的 <code>header</code> 头 <code>cc</code> 来达到非简单请求的目的。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/axios/0.19.2/axios.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:8080/api/corslist"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">header</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">cc</span><span class="token operator">:</span> <span class="token string">"xxx"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/10-solutions-of-CORS-with-ultimate-solution/8.webp"></p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/10-solutions-of-CORS-with-ultimate-solution/9.webp"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>1、 在新版的 chrome 中，如果你发送了复杂请求，你却看不到 <code>options</code> 请求。可以在这里设置 <code>chrome://flags/#out-of-blink-cors</code> 设置成 <code>disbale</code> ，重启浏览器。对于非简单请求就能看到 <code>options</code> 请求了。</p><p>2、 一般情况下后端接口是不会开启这个跨域头的，除非是一些与用户无关的不太重要的接口。</p><h3 id="2-Node-正向代理"><a href="#2-Node-正向代理" class="headerlink" title="2.Node 正向代理"></a>2.Node 正向代理</h3><p>代理的思路为，利用服务端请求不会跨域的特性，让接口和当前站点同域。</p><p><strong>代理前</strong></p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/10-solutions-of-CORS-with-ultimate-solution/10.webp"></p><p><strong>代理后</strong></p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/10-solutions-of-CORS-with-ultimate-solution/11.webp"></p><p>这样，所有的资源以及请求都在一个域名下了。</p><h3 id="a-cli-工具中的代理"><a href="#a-cli-工具中的代理" class="headerlink" title="a.cli 工具中的代理"></a>a.cli 工具中的代理</h3><h3 id="1-Webpack-4-x"><a href="#1-Webpack-4-x" class="headerlink" title="1) Webpack (4.x)"></a>1) Webpack (4.x)</h3><p>在<code>webpack</code>中可以配置<code>proxy</code>来快速获得接口代理的能力。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token string">"./index.js"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">"bundle.js"</span><span class="token punctuation">,</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dist"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8000</span><span class="token punctuation">,</span>    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string-property property">"/api"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080"</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">"index.html"</span><span class="token punctuation">,</span>      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">"webpack.html"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改前端接口请求方式，改为不带域名。（因为现在是同域请求了）</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getlist<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>获取列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/axios/0.19.2/axios.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  getlist<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/api/corslist"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  login<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/api/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Vue-cli-2-x"><a href="#2-Vue-cli-2-x" class="headerlink" title="2) Vue-cli 2.x"></a>2) Vue-cli 2.x</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// config/index.js</span><span class="token operator">...</span><span class="token literal-property property">proxyTable</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token string-property property">'/api'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>     <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">'http://localhost:8080'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token operator">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-Vue-cli-3-x"><a href="#3-Vue-cli-3-x" class="headerlink" title="3) Vue-cli 3.x"></a>3) Vue-cli 3.x</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">// vue.config.js 如果没有就新建module.exports = &#123;  devServer: &#123;    port: 8000,    proxy: &#123;      "/api": &#123;        target: "http://localhost:8080"      &#125;    &#125;  &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-Parcel-2-x"><a href="#4-Parcel-2-x" class="headerlink" title="4) Parcel (2.x)"></a>4) Parcel (2.x)</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">// .proxyrc&#123;  "/api": &#123;    "target": "http://localhost:8080"  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到这里，心里一句 xxx 就会脱口而出，一会写配置文件，一会 proxyTable ，一会 proxy，怎么这么多的形式？学不动了学不动了。。。不过也不用慌，还是有方法的。以上所有配置都是有着共同的底层包 <a href="https://github.com/chimurai/http-proxy-middleware">http-proxy-middleware</a> .里面需要用到的各种 <code>websocket</code> ，<code>rewrite</code> 等功能，直接看这个库的配置就可以了。关于 http-proxy-middleware 这个库的原理可以看我这篇文章 <a href="https://github.com/hua1995116/proxy">https://github.com/hua1995116/proxy</a> 当然了。。。对于配置的位置入口还是非统一的。教一个搜索的技巧吧，上面配置写哪里都不用记的，想要哪个框架的 直接 google 搜索 xxx proxy 就行了。</p><p>例如 vue-cli 2 proxy 、 webpack proxy 等等….基本会搜到有官网的配置答案，通用且 nice。</p><h3 id="b-使用自己的代理工具"><a href="#b-使用自己的代理工具" class="headerlink" title="b.使用自己的代理工具"></a>b.使用自己的代理工具</h3><p><a href="https://github.com/Rob--W/cors-anywhere">cors-anywhere</a></p><p><strong>服务端</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Listen on a specific host via the HOST environment variable</span><span class="token keyword">var</span> host <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">HOST</span> <span class="token operator">||</span> <span class="token string">"0.0.0.0"</span><span class="token punctuation">;</span><span class="token comment">// Listen on a specific port via the PORT environment variable</span><span class="token keyword">var</span> port <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">PORT</span> <span class="token operator">||</span> <span class="token number">7777</span><span class="token punctuation">;</span><span class="token keyword">var</span> cors_proxy <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"cors-anywhere"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cors_proxy  <span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">originWhitelist</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// Allow all origins</span>    <span class="token literal-property property">requireHeader</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"origin"</span><span class="token punctuation">,</span> <span class="token string">"x-requested-with"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">removeHeaders</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"cookie"</span><span class="token punctuation">,</span> <span class="token string">"cookie2"</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> host<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Running CORS Anywhere on "</span> <span class="token operator">+</span> host <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>前端代码</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/axios/0.19.2/axios.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  getlist<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    axios      <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:7777/http://127.0.0.1:8080/api/corslist"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  login<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:7777/http://127.0.0.1:8080/api/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>效果展示</strong></p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/10-solutions-of-CORS-with-ultimate-solution/12.webp"></p><p><strong>缺点</strong></p><p>无法专递 cookie，原因是因为这个是一个代理库，作者觉得中间传递 cookie 太不安全了。<a href="https://github.com/Rob--W/cors-anywhere/issues/208%23issuecomment-575254153">https://github.com/Rob--W/cors-anywhere/issues/208#issuecomment-575254153</a></p><h3 id="c-charles"><a href="#c-charles" class="headerlink" title="c.charles"></a>c.charles</h3><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>这是一个测试、开发的神器。<a href="https://juejin.im/post/5b8350b96fb9a019d9246c4c">介绍与使用</a></p><p>利用 charles 进行跨域，本质就是请求的拦截与代理。</p><p>在 <code>tools/map remote</code> 中设置代理</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/10-solutions-of-CORS-with-ultimate-solution/13.webp"></p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/10-solutions-of-CORS-with-ultimate-solution/14.webp"></p><h3 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getlist<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>获取列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/axios/0.19.2/axios.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  getlist<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/api/corslist"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  login<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/api/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/api/corslist"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"秋风的笔记"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/api/login"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  ctx<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span> token<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">expires</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">7</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">"成功"</span><span class="token punctuation">,</span>    <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>访问 http:&#x2F;&#x2F;localhost:8000&#x2F;charles</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/10-solutions-of-CORS-with-ultimate-solution/15.webp"></p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/10-solutions-of-CORS-with-ultimate-solution/16.webp"></p><p>完美解决。</p><p>唔。这里又有一个注意点。在 <code>Mac mojave 10.14</code> 中会出现 <code>charles</code> 抓不到本地包的情况。这个时候需要自定义一个域名，然后配置<code>hosts</code>指定到<code>127.0.0.1</code>。然后修改访问方式 <code>http://localhost.charlesproxy.com:8000/charles</code>。</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/10-solutions-of-CORS-with-ultimate-solution/17.webp"></p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/10-solutions-of-CORS-with-ultimate-solution/18.webp"></p><h3 id="3-Nginx-反向代理"><a href="#3-Nginx-反向代理" class="headerlink" title="3.Nginx 反向代理"></a>3.Nginx 反向代理</h3><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>Nginx 则是通过反向代理的方式，（这里也需要自定义一个域名）这里就是保证我当前域，能获取到静态资源和接口，不关心是怎么获取的。<a href="https://blog.csdn.net/diaojw090/article/details/89135073">nginx 安装教程</a></p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/10-solutions-of-CORS-with-ultimate-solution/19.webp"></p><p>配置下 hosts</p><p><code>127.0.0.1 local.test</code></p><p>配置 nginx</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">server &#123;        listen 80;        server_name local.test;        location /api &#123;            proxy_pass http://localhost:8080;        &#125;        location / &#123;            proxy_pass http://localhost:8000;        &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动 nginx</p><p><code>sudo nginx</code></p><p>重启 nginx</p><p><code>sudo nginx -s reload</code></p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>前端代码</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  getlist<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/api/corslist"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  login<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/api/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后端代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/api/corslist"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"秋风的笔记"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/api/login"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  ctx<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span> token<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">expires</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">7</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">"成功"</span><span class="token punctuation">,</span>    <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h3><p>访问 <code>http://local.test/charles</code></p><p>浏览器显示</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/10-solutions-of-CORS-with-ultimate-solution/20.webpp"></p><h3 id="4-JSONP"><a href="#4-JSONP" class="headerlink" title="4.JSONP"></a>4.JSONP</h3><p><code>JSONP</code> 主要就是利用了 <code>script</code> 标签没有跨域限制的这个特性来完成的。</p><p><strong>使用限制</strong></p><p>仅支持 GET 方法，如果想使用完整的 REST 接口，请使用 CORS 或者其他代理方式。</p><p><strong>流程解析</strong></p><p>1.前端定义解析函数（例如 jsonpCallback&#x3D;function(){….}）</p><p>2.通过 params 形式包装请求参数，并且声明执行函数(例如 cb&#x3D;jsonpCallback)</p><p>3.后端获取前端声明的执行函数（jsonpCallback），并以带上参数并调用执行函数的方式传递给前端。</p><p><strong>使用示例</strong></p><p>后端实现</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"koa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">"/api/jsonp"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> cb<span class="token punctuation">,</span> msg <span class="token punctuation">&#125;</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>query<span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>cb<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> msg <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>普通 js 示例</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span><span class="token function-variable function">jsonpCallback</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span>  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:8080/api/jsonp?msg=hello&amp;cb=jsonpCallback<span class="token punctuation">"</span></span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JQuery Ajax 示例</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/jquery/3.5.0/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/api/jsonp"</span><span class="token punctuation">,</span>    <span class="token literal-property property">dataType</span><span class="token operator">:</span> <span class="token string">"jsonp"</span><span class="token punctuation">,</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"get"</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">"hello"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">jsonp</span><span class="token operator">:</span> <span class="token string">"cb"</span><span class="token punctuation">,</span>    <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>原理解析</strong></p><p>其实这就是 js 的魔法</p><p>我们先来看最简单的 js 调用。嗯，很自然的调用。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span><span class="token function-variable function">jsonpCallback</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token function">jsonpCallback</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们稍稍改造一下，外链的形式。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span><span class="token function-variable function">jsonpCallback</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:8080/api/a.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>// http://localhost:8080/api/a.js jsonpCallback(&#123;a:1&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们再改造一下，我们把这个外链的 js 就当做是一个动态的接口，因为本身资源和接口一样，是一个请求，也包含各种参数，也可以动态化返回。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span><span class="token function-variable function">jsonpCallback</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:8080/api/a.js?a=123&amp;cb=sonpCallback<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>// http://localhost:8080/api/a.js jsonpCallback(&#123;a:123&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你仔细品，细细品，是不是 jsonp 有的优势就是 script 加载 js 的优势，加载的方式只不过换了一种说法。这也告诉我们一个道理，很多东西并没有那么神奇，是在你所学的知识范围内。就好比，桃树和柳树，如果你把他们当成很大跨度的东西去记忆理解，那么世上这么多树，你真的要累死了，你把他们都当成是树，哦吼？你会突然发现，你对世界上所有的树都有所了解，他们都会长叶子，光合作用….当然也有个例，但是你只需要去记忆这些细微的差别，抓住主干。。。嗯，反正就这么个道理。</p><h3 id="5-Websocket"><a href="#5-Websocket" class="headerlink" title="5.Websocket"></a>5.Websocket</h3><p><a href="http://dev.w3.org/html5/websockets/">WebSocket</a> 规范定义了一种 API，可在网络浏览器和服务器之间建立“套接字”连接。简单地说：客户端和服务器之间存在持久的连接，而且双方都可以随时开始发送数据。详细教程可以看 <a href="https://www.html5rocks.com/zh/tutorials/websockets/basics/">https://www.html5rocks.com/zh/tutorials/websockets/basics/</a></p><p>这种方式本质没有使用了 HTTP 的响应头, 因此也没有跨域的限制，没有什么过多的解释直接上代码吧。</p><p>前端部分</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">let</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">"ws://localhost:8080"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  socket<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"秋风的笔记"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  socket<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后端部分</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> WebSocket <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"ws"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket<span class="token punctuation">.</span>Server</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8080</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"connection"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">socket</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-window-postMessage"><a href="#6-window-postMessage" class="headerlink" title="6.window.postMessage"></a>6.window.postMessage</h3><p><strong>window.postMessage()</strong> 方法可以安全地实现跨源通信。通常，对于两个不同页面的脚本，只有当执行它们的页面位于具有相同的协议（通常为 https），端口号（443 为 https 的默认值），以及主机 (两个页面的模数 <code>Document.domain</code>设置为相同的值) 时，这两个脚本才能相互通信。<strong>window.postMessage()</strong> 方法提供了一种受控机制来规避此限制，只要正确的使用，这种方法就很安全。</p><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><p>1.页面和其打开的新窗口的数据传递</p><p>2.多窗口之间消息传递</p><p>3.页面与嵌套的 iframe 消息传递</p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>详细用法看 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage">https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage</a></p><p><code>otherWindow.postMessage(message, targetOrigin, [transfer]);</code></p><ul><li>otherWindow: 其他窗口的一个引用，比如 iframe 的 contentWindow 属性、执行<a href="https://developer.mozilla.org/en-US/docs/DOM/window.open">window.open</a>返回的窗口对象、或者是命名过或数值索引的<a href="https://developer.mozilla.org/en-US/docs/DOM/window.frames">window.frames</a>。</li><li>message: 将要发送到其他 window 的数据。</li><li>targetOrigin: 通过窗口的 origin 属性来指定哪些窗口能接收到消息事件.</li><li>transfer(可选) : 是一串和 message 同时传递的 <code>Transferable</code> 对象. 这些对象的所有权将被转移给消息的接收方，而发送一方将不再保有所有权</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>index.html</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span>  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:8080<span class="token punctuation">"</span></span>  <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>  <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>iframe<span class="token punctuation">"</span></span>  <span class="token special-attr"><span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">function</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    iframe<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">"秋风的笔记"</span><span class="token punctuation">,</span> <span class="token string">"http://localhost:8080"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>another.html</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 秋风的笔记</span>    e<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">,</span> e<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-document-domain-Iframe"><a href="#7-document-domain-Iframe" class="headerlink" title="7.document.domain + Iframe"></a>7.document.domain + Iframe</h3><p>从第 7 种到第 9 种方式，我觉得别人的写的已经很好了，为了完整性，我就拿别人的了。如有雷同….（不对，就是雷同….）不要说不出来。</p><p><strong>该方式只能用于二级域名相同的情况下，比如 <code>a.test.com</code> 和 <code>b.test.com</code> 适用于该方式</strong>。 只需要给页面添加 <code>document.domain =&#39;test.com&#39;</code> 表示二级域名都相同就可以实现跨域。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">www.   baidu.  com     <span class="token builtin class-name">.</span>三级域  二级域   顶级域   根域// a.test.com<span class="token operator">&lt;</span>body<span class="token operator">></span>  helloa  <span class="token operator">&lt;</span>iframe    <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"http://b.test.com/b.html"</span>    <span class="token assign-left variable">frameborder</span><span class="token operator">=</span><span class="token string">"0"</span>    <span class="token assign-left variable">onload</span><span class="token operator">=</span><span class="token string">"load()"</span>    <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token string">"frame"</span>  <span class="token operator">></span><span class="token operator">&lt;</span>/iframe<span class="token operator">></span>  <span class="token operator">&lt;</span>script<span class="token operator">></span>    document.domain <span class="token operator">=</span> <span class="token string">"test.com"</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-name function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console.log<span class="token punctuation">(</span>frame.contentWindow.a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span>// b.test.com<span class="token operator">&lt;</span>body<span class="token operator">></span>  hellob  <span class="token operator">&lt;</span>script<span class="token operator">></span>    document.domain <span class="token operator">=</span> <span class="token string">"test.com"</span><span class="token punctuation">;</span>    var a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-window-location-hash-Iframe"><a href="#8-window-location-hash-Iframe" class="headerlink" title="8.window.location.hash + Iframe"></a>8.window.location.hash + Iframe</h3><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>原理就是通过 url 带 hash ，通过一个非跨域的中间页面来传递数据。</p><h3 id="实现流程"><a href="#实现流程" class="headerlink" title="实现流程"></a>实现流程</h3><p>一开始 a.html 给 c.html 传一个 hash 值，然后 c.html 收到 hash 值后，再把 hash 值传递给 b.html，最后 b.html 将结果放到 a.html 的 hash 值中。 同样的，a.html 和 b.htm l 是同域的，都是 <code>http://localhost:8000</code>，而 c.html 是<code>http://localhost:8080</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">// a.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:8080/hash/c.html#name1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span>  window<span class="token punctuation">.</span><span class="token function-variable function">onhashchange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>// b.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash <span class="token operator">=</span> location<span class="token punctuation">.</span>hash<span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>// c.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"iframe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  iframe<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"http://localhost:8000/hash/b.html#name2"</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-window-name-Iframe"><a href="#9-window-name-Iframe" class="headerlink" title="9.window.name + Iframe"></a>9.window.name + Iframe</h3><p>window 对象的 name 属性是一个很特别的属性，当该 window 的 location 变化，然后重新加载，它的 name 属性可以依然保持不变。</p><p>其中 a.html 和 b.html 是同域的，都是<code>http://localhost:8000</code>，而 c.html 是<code>http://localhost:8080</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">// a.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span>  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:8080/name/c.html<span class="token punctuation">"</span></span>  <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>  <span class="token special-attr"><span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span>  <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>iframe<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">let</span> first <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">// onload事件会触发2次，第1次加载跨域页，并留存数据于window.name</span>  <span class="token keyword">function</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 第1次onload(跨域页)成功后，切换到同域代理页面</span>      iframe<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"http://localhost:8000/name/b.html"</span><span class="token punctuation">;</span>      first <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 第2次onload(同域b.html页)成功后，读取同域window.name中数据</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iframe<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>b.html 为中间代理页，与 a.html 同域，内容为空。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">// b.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>// c.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"秋风的笔记"</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过 iframe 的 src 属性由外域转向本地域，跨域数据即由 iframe 的 window.name 从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。</p><h3 id="10-浏览器开启跨域（终极方案）"><a href="#10-浏览器开启跨域（终极方案）" class="headerlink" title="10.浏览器开启跨域（终极方案）"></a>10.浏览器开启跨域（终极方案）</h3><p>其实讲下其实跨域问题是浏览器策略，源头是他，那么能否能关闭这个功能呢？</p><p>答案是肯定的。</p><p><strong>注意事项: 因为浏览器是众多 web 页面入口。我们是否也可以像客户端那种，就是用一个单独的专门宿主浏览器，来打开调试我们的开发页面。例如这里以 chrome canary 为例，这个是我专门调试页面的浏览器，不会用它来访问其他 web url。因此它也相对于安全一些。当然这个方式，只限于当你真的被跨域折磨地崩溃的时候才建议使用以下。使用后，请以正常的方式将他打开，以免你不小心用这个模式干了其他的事。</strong></p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">找到你安装的目录.\Google\Chrome\Application\chrome.exe --disable-web-security --user-data-dir=xxxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h3><p><code>~/Downloads/chrome-data</code> 这个目录可以自定义.</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">/Applications/Google\ Chrome\ Canary.app/Contents/MacOS/Google\ Chrome\ Canary  --disable-web-security --user-data-dir=~/Downloads/chrome-data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p><img src="https://pic4.zhimg.com/80/v2-751a706cae2fc92d676cab27bad21503_1440w.webp"></p><p>嗯，使用起来很香，但是再次提醒，一般情况千万别轻易使用这个方式，这个方式好比七伤拳，使用的好威力无比，使用不好，很容易伤到自己。</p><h2 id="三、为什么需要跨域？"><a href="#三、为什么需要跨域？" class="headerlink" title="三、为什么需要跨域？"></a>三、为什么需要跨域？</h2><p>在最一开始，我们知道了，跨域只存在于浏览器端。而浏览器为 web 提供访问入口。我们在可以浏览器内打开很多页面。正是这样的开放形态，所以我们需要对他有所限制。就比如林子大了，什么鸟都有，我们需要有一个统一的规范来进行约定才能保障这个安全性。</p><h3 id="1-限制不同源的请求"><a href="#1-限制不同源的请求" class="headerlink" title="1.限制不同源的请求"></a>1.限制不同源的请求</h3><p>这里还是用最常用的方式来讲解，例如用户登录 a 网站，同时新开 tab 打开了 b 网站，如果不限制同源， b 可以像 a 网站发起任何请求，会让不法分子有机可趁。</p><h3 id="2-限制-dom-操作"><a href="#2-限制-dom-操作" class="headerlink" title="2.限制 dom 操作"></a>2.限制 dom 操作</h3><p>我举个例子吧, 你先登录下 <a href="http://www.baidu.com/">http://www.baidu.com</a> ,然后访问我这个网址。</p><p><a href="https://zerolty.com/node-demo/index.html">https://zerolty.com/node-demo/index.html</a></p><p><img src="https://pic3.zhimg.com/80/v2-422415a3e221c8c7472f57470d8a8306_1440w.webp"></p><p>你会发现，这个和真实的百度一模一样，如果再把域名搞的相似一些，是不是很容易被骗，如果可以进行 dom 操作…那么大家的信息在这种钓鱼网站眼里都是一颗颗小白菜，等着被收割。</p><blockquote><p>可以在 http 返回头 添加<code>X-Frame-Options: SAMEORIGIN</code> 防止被别人添加至 iframe。</p></blockquote><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>以上最常用的就是前 4 种方式，特别是第 2 种非常常见，我里面也提到了多种示例，大家可以慢慢消化一下。希望未来有更加安全的方式来限制 web ，解决跨域的头疼，哈哈哈哈。</p><p><strong>有一个不成熟的想法，可以搞这么一个浏览器，只让访问内网&#x2F;本地网络，专门给开发者用来调试页面用，对于静态资源可以配置白名单，这样是不是就没有跨域问题了，23333。上述如有错误，请第一时间指出，我会进行修改，以免给大家来误导。</strong></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://stackoverflow.com/questions/12296910/so-jsonp-or-cors">https://stackoverflow.com/questions/12296910/so-jsonp-or-cors</a></p><p><a href="https://juejin.im/post/5c23993de51d457b8c1f4ee1%23heading-18">https://juejin.im/post/5c23993de51d457b8c1f4ee1#heading-18</a></p><p><a href="https://juejin.im/post/5a6320d56fb9a01cb64ee191">https://juejin.im/post/5a6320d56fb9a01cb64ee191</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy">https://developer.mozilla.org/z</a></p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS选择器大全</title>
      <link href="/2024/01/04/css-xuan-ze-qi-da-quan/"/>
      <url>/2024/01/04/css-xuan-ze-qi-da-quan/</url>
      
        <content type="html"><![CDATA[<p>CSS（层叠样式表）提供了多种选择器，用于选择要应用样式的 HTML 元素。</p><p>CSS 选择器用于选择你想要的元素的样式的模式。</p><p>下列表格中的 “CSS” 列表示在 CSS 版本的属性定义，CSS1、CSS2 和 CSS3 是层叠样式表（Cascading Style Sheets）的不同版本，每个版本引入了新的特性和功能，以改进网页样式的控制和设计。</p><h3 id="常见的-CSS-选择器"><a href="#常见的-CSS-选择器" class="headerlink" title="常见的 CSS 选择器"></a>常见的 CSS 选择器</h3><p>下是一些常见的 CSS 选择器：</p><p><strong>元素选择器（Element Selector）：</strong>通过元素名称选择 HTML 元素。</p><p>如下代码，p 选择器将选择所有 <strong>&lt;p&gt;</strong> 元素:</p><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">p &#123;  color: blue;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>类选择器（Class Selector）：</strong>通过类别名称选择具有特定类别的 HTML 元素。</p><p>类选择器以 . 开头，后面跟着类别名称。</p><p>如下代码，.highlight 选择器将选择所有具有类别为 <strong>“highlight”</strong> 的元素。</p><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">.highlight &#123;  background-color: yellow;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>ID 选择器（ID Selector）：</strong>通过元素的唯一标识符（ID）选择 HTML 元素。</p><p>ID 选择器以 # 开头，后面跟着 ID 名称。</p><p>如下代码，#runoob 选择器将选择具有 ID 为 <strong>“runoob”</strong> 的元素。</p><pre class="line-numbers language-none"><code class="language-none">#runoob &#123;  width: 200px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>属性选择器（Attribute Selector）：</strong>通过元素的属性选择 HTML 元素。属性选择器可以根据属性名和属性值进行选择。</p><p>如下代码，input[type&#x3D;”text”] 选择器将选择所有 <strong>type</strong> 属性为 <strong>“text”</strong> 的 &lt;input&gt; 元素。</p><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">input[type&#x3D;&quot;text&quot;] &#123;  border: 1px solid gray;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>后代选择器（Descendant Selector）：</strong>通过指定元素的后代关系选择 HTML 元素。</p><p>后代选择器使用空格分隔元素名称。</p><p>如下代码，div p 选择器将选择所有在 &lt;div&gt; 元素内的 &lt;p&gt; 元素。</p><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">div p &#123;  font-weight: bold;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>更多选择器参考下列表格：</p><table><thead><tr><th>选择器</th><th>示例</th><th>示例说明</th><th>CSS</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/cssref/sel-class.html">.<em>class</em></a></td><td>.intro</td><td>选择所有class&#x3D;”intro”的元素</td><td>1</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-id.html">#<em>id</em></a></td><td>#firstname</td><td>选择所有id&#x3D;”firstname”的元素</td><td>1</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-all.html">*</a></td><td>*</td><td>选择所有元素</td><td>2</td></tr><tr><td><em><a href="https://www.runoob.com/cssref/sel-element.html">element</a></em></td><td>p</td><td>选择所有&lt;p&gt;元素</td><td>1</td></tr><tr><td><em><a href="https://www.runoob.com/cssref/sel-element-comma.html">element,element</a></em></td><td>div,p</td><td>选择所有&lt;div&gt;元素和 &lt;p&gt; 元素</td><td>1</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-element-class.html">element_.class_</a></td><td>p.hometown</td><td>选择所有 class&#x3D;”hometown” 的 &lt;p&gt; 元素</td><td>1</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-element-element.html"><em>element</em> <em>element</em></a></td><td>div p</td><td>选择&lt;div&gt;元素内的所有&lt;p&gt;元素</td><td>1</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-element-gt.html"><em>element</em>&gt;<em>element</em></a></td><td>div&gt;p</td><td>选择所有父级是 &lt;div&gt; 元素的 &lt;p&gt; 元素</td><td>2</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-element-pluss.html"><em>element</em>+<em>element</em></a></td><td>div+p</td><td>选择所有紧跟在 &lt;div&gt; 元素之后的第一个 &lt;p&gt; 元素</td><td>2</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-attribute.html">[<em>attribute</em>]</a></td><td>[target]</td><td>选择所有带有target属性元素</td><td>2</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-attribute-value.html">[<em>attribute</em>&#x3D;<em>value</em>]</a></td><td>[target&#x3D;-blank]</td><td>选择所有使用target&#x3D;”-blank”的元素</td><td>2</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-attribute-value-contains.html">[_attribute_~&#x3D;<em>value</em>]</a></td><td>[title~&#x3D;flower]</td><td>选择标题属性包含单词”flower”的所有元素</td><td>2</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-attribute-value-lang.html">[<em>attribute</em>|&#x3D;<em>language</em>]</a></td><td>[lang|&#x3D;en]</td><td>选择 lang 属性等于 en，或者以 en- 为开头的所有元素</td><td>2</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-link.html">:link</a></td><td>a:link</td><td>选择所有未访问链接</td><td>1</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-visited.html">:visited</a></td><td>a:visited</td><td>选择所有访问过的链接</td><td>1</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-active.html">:active</a></td><td>a:active</td><td>选择活动链接</td><td>1</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-hover.html">:hover</a></td><td>a:hover</td><td>选择鼠标在链接上面时</td><td>1</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-focus.html">:focus</a></td><td>input:focus</td><td>选择具有焦点的输入元素</td><td>2</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-firstletter.html">:first-letter</a></td><td>p:first-letter</td><td>选择每一个&lt;p&gt;元素的第一个字母</td><td>1</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-firstline.html">:first-line</a></td><td>p:first-line</td><td>选择每一个&lt;p&gt;元素的第一行</td><td>1</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-firstchild.html">:first-child</a></td><td>p:first-child</td><td>指定只有当&lt;p&gt;元素是其父级的第一个子级的样式。</td><td>2</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-before.html">:before</a></td><td>p:before</td><td>在每个&lt;p&gt;元素之前插入内容</td><td>2</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-after.html">:after</a></td><td>p:after</td><td>在每个&lt;p&gt;元素之后插入内容</td><td>2</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-lang.html">:lang(<em>language</em>)</a></td><td>p:lang(it)</td><td>选择一个lang属性的起始值&#x3D;”it”的所有&lt;p&gt;元素</td><td>2</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-gen-sibling.html">_element1_~<em>element2</em></a></td><td>p~ul</td><td>选择p元素之后的每一个ul元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-attr-begin.html">[_attribute_^&#x3D;<em>value</em>]</a></td><td>a[src^&#x3D;”https”]</td><td>选择每一个src属性的值以”https”开头的元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-attr-end.html">[<em>attribute</em>$&#x3D;<em>value</em>]</a></td><td>a[src$&#x3D;”.pdf”]</td><td>选择每一个src属性的值以”.pdf”结尾的元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-attr-contain.html">[<em>attribute</em>*&#x3D;<em>value</em>]</a></td><td>a[src*&#x3D;”runoob”]</td><td>选择每一个src属性的值包含子字符串”runoob”的元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-first-of-type.html">:first-of-type</a></td><td>p:first-of-type</td><td>选择每个p元素是其父级的第一个p元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-last-of-type.html">:last-of-type</a></td><td>p:last-of-type</td><td>选择每个p元素是其父级的最后一个p元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-only-of-type.html">:only-of-type</a></td><td>p:only-of-type</td><td>选择每个p元素是其父级的唯一p元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-only-child.html">:only-child</a></td><td>p:only-child</td><td>选择每个p元素是其父级的唯一子元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-nth-child.html">:nth-child(<em>n</em>)</a></td><td>p:nth-child(2)</td><td>选择每个p元素是其父级的第二个子元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-nth-last-child.html">:nth-last-child(<em>n</em>)</a></td><td>p:nth-last-child(2)</td><td>选择每个p元素的是其父级的第二个子元素，从最后一个子项计数</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-nth-of-type.html">:nth-of-type(<em>n</em>)</a></td><td>p:nth-of-type(2)</td><td>选择每个p元素是其父级的第二个p元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-nth-last-of-type.html">:nth-last-of-type(<em>n</em>)</a></td><td>p:nth-last-of-type(2)</td><td>选择每个p元素的是其父级的第二个p元素，从最后一个子项计数</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-last-child.html">:last-child</a></td><td>p:last-child</td><td>选择每个p元素是其父级的最后一个子级。</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-root.html">:root</a></td><td>:root</td><td>选择文档的根元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-empty.html">:empty</a></td><td>p:empty</td><td>选择每个没有任何子级的p元素（包括文本节点）</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-target.html">:target</a></td><td>#news:target</td><td>选择当前活动的#news元素（包含该锚名称的点击的URL）</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-enabled.html">:enabled</a></td><td>input:enabled</td><td>选择每一个已启用的输入元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-disabled.html">:disabled</a></td><td>input:disabled</td><td>选择每一个禁用的输入元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-checked.html">:checked</a></td><td>input:checked</td><td>选择每个选中的输入元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-not.html">:not(https://www.runoob.com/cssref/<em>selector</em>)</a></td><td>:not(p)</td><td>选择每个并非p元素的元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-selection.html">::selection</a></td><td>::selection</td><td>匹配元素中被用户选中或处于高亮状态的部分</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-out-of-range.html">:out-of-range</a></td><td>:out-of-range</td><td>匹配值在指定区间之外的input元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-in-range.html">:in-range</a></td><td>:in-range</td><td>匹配值在指定区间之内的input元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-read-write.html">:read-write</a></td><td>:read-write</td><td>用于匹配可读及可写的元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-read-only.html">:read-only</a></td><td>:read-only</td><td>用于匹配设置 “readonly”（只读） 属性的元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-optional.html">:optional</a></td><td>:optional</td><td>用于匹配可选的输入元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-required.html">:required</a></td><td>:required</td><td>用于匹配设置了 “required” 属性的元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-valid.html">:valid</a></td><td>:valid</td><td>用于匹配输入值为合法的元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-invalid.html">:invalid</a></td><td>:invalid</td><td>用于匹配输入值为非法的元素</td><td>3</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>chrome开发者工具各种骚技巧</title>
      <link href="/2023/12/29/chrome-kai-fa-zhe-gong-ju-ge-chong-sao-ji-qiao/"/>
      <url>/2023/12/29/chrome-kai-fa-zhe-gong-ju-ge-chong-sao-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h2 id="chrome开发者工具各种骚技巧"><a href="#chrome开发者工具各种骚技巧" class="headerlink" title="chrome开发者工具各种骚技巧"></a>chrome开发者工具各种骚技巧</h2><p><a href="https://umaar.com/dev-tips/">原文</a><br><a href="https://juejin.cn/post/6844903604839514125">原文</a></p><h3 id="1-曾经，在线调伪类样式困扰过你？"><a href="#1-曾经，在线调伪类样式困扰过你？" class="headerlink" title="1.曾经，在线调伪类样式困扰过你？"></a>1.曾经，在线调伪类样式困扰过你？</h3><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/chrome-f12-skills/1.gif"></p><h3 id="2-源代码快速定位到某一行！ctrl-p"><a href="#2-源代码快速定位到某一行！ctrl-p" class="headerlink" title="2.源代码快速定位到某一行！ctrl + p"></a>2.源代码快速定位到某一行！ctrl + p</h3><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/chrome-f12-skills/2.gif"></p><h3 id="3-联调接口失败时，后台老哥总管你要response？"><a href="#3-联调接口失败时，后台老哥总管你要response？" class="headerlink" title="3.联调接口失败时，后台老哥总管你要response？"></a>3.联调接口失败时，后台老哥总管你要response？</h3><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/chrome-f12-skills/3.gif"></p><h3 id="4-你还一层层展开dom？Alt-Click"><a href="#4-你还一层层展开dom？Alt-Click" class="headerlink" title="4.你还一层层展开dom？Alt + Click"></a>4.你还一层层展开dom？Alt + Click</h3><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/chrome-f12-skills/4.gif"></p><h3 id="5-是不是报错了，你才去打断点？"><a href="#5-是不是报错了，你才去打断点？" class="headerlink" title="5.是不是报错了，你才去打断点？"></a>5.是不是报错了，你才去打断点？</h3><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/chrome-f12-skills/5.gif"></p><h3 id="6-你是不是经常想不起来，在哪绑定事件的？"><a href="#6-你是不是经常想不起来，在哪绑定事件的？" class="headerlink" title="6.你是不是经常想不起来，在哪绑定事件的？"></a>6.你是不是经常想不起来，在哪绑定事件的？</h3><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/chrome-f12-skills/6.gif"></p><h3 id="7-你是不是打断点时还要去改代码？"><a href="#7-你是不是打断点时还要去改代码？" class="headerlink" title="7.你是不是打断点时还要去改代码？"></a>7.你是不是打断点时还要去改代码？</h3><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/chrome-f12-skills/7.gif"></p><h3 id="8-看dom层级的最直观的方式？"><a href="#8-看dom层级的最直观的方式？" class="headerlink" title="8.看dom层级的最直观的方式？"></a>8.看dom层级的最直观的方式？</h3><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/chrome-f12-skills/8.gif"></p><h3 id="9-查一些特定的请求，过滤器用过吗？"><a href="#9-查一些特定的请求，过滤器用过吗？" class="headerlink" title="9.查一些特定的请求，过滤器用过吗？"></a>9.查一些特定的请求，过滤器用过吗？</h3><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/chrome-f12-skills/9.gif"></p><h3 id="10-在Elements面板调整dom结构很不方便？"><a href="#10-在Elements面板调整dom结构很不方便？" class="headerlink" title="10.在Elements面板调整dom结构很不方便？"></a>10.在Elements面板调整dom结构很不方便？</h3><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/chrome-f12-skills/10.gif"></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="11-想知道，某图片加载的代码在哪？Initiator！！"><a href="#11-想知道，某图片加载的代码在哪？Initiator！！" class="headerlink" title="11.想知道，某图片加载的代码在哪？Initiator！！"></a>11.想知道，某图片加载的代码在哪？Initiator！！</h3><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/chrome-f12-skills/11.gif"></p><h3 id="12-不想加载某个文件了？"><a href="#12-不想加载某个文件了？" class="headerlink" title="12.不想加载某个文件了？"></a>12.不想加载某个文件了？</h3><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/chrome-f12-skills/12.gif"></p><p>多的就不列举了，可以看看开头的网站。看了有几个功能我电脑（win10）是没有的，应该跟chrome版本有关。</p><p>开发者工具的功能确实挺多，多得有时根本用不上，官网教程建议每个前端人员都看看：</p><p><a href="https://developers.google.com/web/tools/chrome-devtools/">developers.google.com&#x2F;web&#x2F;tools&#x2F;c…</a></p><p>中文版：</p><p><a href="http://www.css88.com/doc/chrome-devtools/">www.css88.com/doc/chrome-…</a></p><p>=&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>补充：</p><p>见评论中多人问gif制作软件是什么。</p><p>搜索了一下，应该是<a href="https://www.techsmith.com/">www.techsmith.com/</a>，看着说明，表示软件太专业。。</p><p>但我用过两个小软件很不错，非常容易上手：</p><ul><li>录屏：<a href="https://www.cockos.com/licecap/">www.cockos.com/licecap/</a></li><li>屏幕放大：<a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/zoomit">docs.microsoft.com&#x2F;zh-cn&#x2F;sysin…</a></li></ul><p>本文完。</p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你未必知道的个CSS知识点(全)</title>
      <link href="/2023/12/28/ni-wei-bi-zhi-dao-de-ge-css-zhi-shi-dian-quan/"/>
      <url>/2023/12/28/ni-wei-bi-zhi-dao-de-ge-css-zhi-shi-dian-quan/</url>
      
        <content type="html"><![CDATA[<h2 id="你未必知道的个CSS知识点-全"><a href="#你未必知道的个CSS知识点-全" class="headerlink" title="你未必知道的个CSS知识点(全)"></a>你未必知道的个CSS知识点(全)</h2><p><a href="https://juejin.cn/post/6844903902123393032">原文1</a><br><a href="https://juejin.cn/post/6844903960386469895">原文2</a><br>原文作者：<a href="https://juejin.cn/user/78820536232855">老姚</a></p><p>第一季：</p><h2 id="CSS技巧篇"><a href="#CSS技巧篇" class="headerlink" title="CSS技巧篇"></a>CSS技巧篇</h2><h4 id="01-【负边距】💘负边距的效果。注意左右负边距表现并不一致。左为负时，是左移，右为负时，是左拉。上下与左右类似"><a href="#01-【负边距】💘负边距的效果。注意左右负边距表现并不一致。左为负时，是左移，右为负时，是左拉。上下与左右类似" class="headerlink" title="01.【负边距】💘负边距的效果。注意左右负边距表现并不一致。左为负时，是左移，右为负时，是左拉。上下与左右类似"></a>01.【负边距】💘负边距的效果。注意左右负边距表现并不一致。左为负时，是左移，右为负时，是左拉。上下与左右类似</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/1.gif"></p><h4 id="02-【shape-outside】❤不要自以为是了。你以为自己是方的，在别人眼里你却是圆的"><a href="#02-【shape-outside】❤不要自以为是了。你以为自己是方的，在别人眼里你却是圆的" class="headerlink" title="02.【shape-outside】❤不要自以为是了。你以为自己是方的，在别人眼里你却是圆的"></a>02.【shape-outside】❤不要自以为是了。你以为自己是方的，在别人眼里你却是圆的</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/2.gif"></p><h4 id="03-【BFC应用】💓BFC应用之阻止外边距合并（margin-collapsing）"><a href="#03-【BFC应用】💓BFC应用之阻止外边距合并（margin-collapsing）" class="headerlink" title="03.【BFC应用】💓BFC应用之阻止外边距合并（margin collapsing）"></a>03.【BFC应用】💓BFC应用之阻止外边距合并（margin collapsing）</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/3.gif"></p><h4 id="04-【BFC应用】💔BFC应用之消除浮动的影响"><a href="#04-【BFC应用】💔BFC应用之消除浮动的影响" class="headerlink" title="04.【BFC应用】💔BFC应用之消除浮动的影响"></a>04.【BFC应用】💔BFC应用之消除浮动的影响</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/4.gif"></p><h4 id="05-【flex不为人知的特性之一】💕flex布局下margin-auto的神奇用法"><a href="#05-【flex不为人知的特性之一】💕flex布局下margin-auto的神奇用法" class="headerlink" title="05.【flex不为人知的特性之一】💕flex布局下margin:auto的神奇用法"></a>05.【flex不为人知的特性之一】💕flex布局下margin:auto的神奇用法</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/5.gif"></p><h4 id="06-【flex不为人知的特性之二】💖flex布局，当flex-grow之和小于1时，只能按比例分配部分剩余空间，而不是全部"><a href="#06-【flex不为人知的特性之二】💖flex布局，当flex-grow之和小于1时，只能按比例分配部分剩余空间，而不是全部" class="headerlink" title="06.【flex不为人知的特性之二】💖flex布局，当flex-grow之和小于1时，只能按比例分配部分剩余空间，而不是全部"></a>06.【flex不为人知的特性之二】💖flex布局，当flex-grow之和小于1时，只能按比例分配部分剩余空间，而不是全部</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/6.gif"></p><h4 id="07-【input的宽度】💗并不是给元素设置display-block就会自动填充父元素宽度。input-就是个例外，其默认宽度取决于size特性的值"><a href="#07-【input的宽度】💗并不是给元素设置display-block就会自动填充父元素宽度。input-就是个例外，其默认宽度取决于size特性的值" class="headerlink" title="07.【input的宽度】💗并不是给元素设置display:block就会自动填充父元素宽度。input 就是个例外，其默认宽度取决于size特性的值"></a>07.【input的宽度】💗并不是给元素设置display:block就会自动填充父元素宽度。input 就是个例外，其默认宽度取决于size特性的值</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/7.gif"></p><h4 id="08-【定位特性】💙绝对定位和固定定位时，同时设置-left-和-right-等同于隐式地设置宽度"><a href="#08-【定位特性】💙绝对定位和固定定位时，同时设置-left-和-right-等同于隐式地设置宽度" class="headerlink" title="08.【定位特性】💙绝对定位和固定定位时，同时设置 left 和 right 等同于隐式地设置宽度"></a>08.【定位特性】💙绝对定位和固定定位时，同时设置 left 和 right 等同于隐式地设置宽度</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/8.gif"></p><h4 id="09-【层叠上下文】💚层叠上下文：小辈就是小辈，再厉害也只是个小辈"><a href="#09-【层叠上下文】💚层叠上下文：小辈就是小辈，再厉害也只是个小辈" class="headerlink" title="09.【层叠上下文】💚层叠上下文：小辈就是小辈，再厉害也只是个小辈"></a>09.【层叠上下文】💚层叠上下文：小辈就是小辈，再厉害也只是个小辈</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/9.gif"></p><h4 id="10-【粘性定位】💛position-sticky，粘性定位要起作用，需要设置最后滞留位置。chrome有bug，firefox完美"><a href="#10-【粘性定位】💛position-sticky，粘性定位要起作用，需要设置最后滞留位置。chrome有bug，firefox完美" class="headerlink" title="10.【粘性定位】💛position:sticky，粘性定位要起作用，需要设置最后滞留位置。chrome有bug，firefox完美"></a>10.【粘性定位】💛position:sticky，粘性定位要起作用，需要设置最后滞留位置。chrome有bug，firefox完美</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/10.gif"></p><h4 id="11-【相邻兄弟选择器】💜相邻兄弟选择器之常用场景"><a href="#11-【相邻兄弟选择器】💜相邻兄弟选择器之常用场景" class="headerlink" title="11.【相邻兄弟选择器】💜相邻兄弟选择器之常用场景"></a>11.【相邻兄弟选择器】💜相邻兄弟选择器之常用场景</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/11.gif"></p><h4 id="12-【模态框】🖤要使模态框背景透明，用rgba是一种简单方式"><a href="#12-【模态框】🖤要使模态框背景透明，用rgba是一种简单方式" class="headerlink" title="12.【模态框】🖤要使模态框背景透明，用rgba是一种简单方式"></a>12.【模态框】🖤要使模态框背景透明，用rgba是一种简单方式</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/12.gif"></p><h4 id="13-【三角形】💝css绘制三角形的原理"><a href="#13-【三角形】💝css绘制三角形的原理" class="headerlink" title="13.【三角形】💝css绘制三角形的原理"></a>13.【三角形】💝css绘制三角形的原理</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/13.gif"></p><h4 id="14-【table布局】💞display-table实现多列等高布局"><a href="#14-【table布局】💞display-table实现多列等高布局" class="headerlink" title="14.【table布局】💞display:table实现多列等高布局"></a>14.【table布局】💞display:table实现多列等高布局</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/14.gif"></p><h4 id="15-【颜色对比度】❣蓝底红字，由于颜色对比度比较低，故而看不清，因此不是好的配色方案😂"><a href="#15-【颜色对比度】❣蓝底红字，由于颜色对比度比较低，故而看不清，因此不是好的配色方案😂" class="headerlink" title="15.【颜色对比度】❣蓝底红字，由于颜色对比度比较低，故而看不清，因此不是好的配色方案😂"></a>15.【颜色对比度】❣蓝底红字，由于颜色对比度比较低，故而看不清，因此不是好的配色方案😂</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/15.gif"></p><h4 id="16-【定宽高比】♥css实现定宽高比的原理：padding的百分比是相对于其包含块的宽度，而不是高度"><a href="#16-【定宽高比】♥css实现定宽高比的原理：padding的百分比是相对于其包含块的宽度，而不是高度" class="headerlink" title="16.【定宽高比】♥css实现定宽高比的原理：padding的百分比是相对于其包含块的宽度，而不是高度"></a>16.【定宽高比】♥css实现定宽高比的原理：padding的百分比是相对于其包含块的宽度，而不是高度</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/16.gif"></p><h4 id="17-【动画方向】🐹动画方向可以选择alternate，去回交替进行"><a href="#17-【动画方向】🐹动画方向可以选择alternate，去回交替进行" class="headerlink" title="17.【动画方向】🐹动画方向可以选择alternate，去回交替进行"></a>17.【动画方向】🐹动画方向可以选择alternate，去回交替进行</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/17.gif"></p><h4 id="18-【线性渐变应用】🐮css绘制彩带的原理"><a href="#18-【线性渐变应用】🐮css绘制彩带的原理" class="headerlink" title="18.【线性渐变应用】🐮css绘制彩带的原理"></a>18.【线性渐变应用】🐮css绘制彩带的原理</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/18.gif"></p><h4 id="19-【隐藏文本】🐯隐藏文字内容的两种办法"><a href="#19-【隐藏文本】🐯隐藏文字内容的两种办法" class="headerlink" title="19.【隐藏文本】🐯隐藏文字内容的两种办法"></a>19.【隐藏文本】🐯隐藏文字内容的两种办法</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/19.gif"></p><h4 id="20-【居中】🐰实现居中的一种简单方式"><a href="#20-【居中】🐰实现居中的一种简单方式" class="headerlink" title="20.【居中】🐰实现居中的一种简单方式"></a>20.【居中】🐰实现居中的一种简单方式</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/20.gif"></p><h4 id="21-【角向渐变】🐲新的渐变：角向渐变。可以用来实现饼图"><a href="#21-【角向渐变】🐲新的渐变：角向渐变。可以用来实现饼图" class="headerlink" title="21.【角向渐变】🐲新的渐变：角向渐变。可以用来实现饼图"></a>21.【角向渐变】🐲新的渐变：角向渐变。可以用来实现饼图</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/21.gif"></p><h4 id="22-【背景位置百分比】🐍background-position百分比的正确理解方式：图片自身的百分比位置与容器同样的百分比位置重合"><a href="#22-【背景位置百分比】🐍background-position百分比的正确理解方式：图片自身的百分比位置与容器同样的百分比位置重合" class="headerlink" title="22.【背景位置百分比】🐍background-position百分比的正确理解方式：图片自身的百分比位置与容器同样的百分比位置重合"></a>22.【背景位置百分比】🐍background-position百分比的正确理解方式：图片自身的百分比位置与容器同样的百分比位置重合</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/22.gif"></p><h4 id="23-【背景重复新值】🐴background-repeat新属性值：round和space。前者表示凑个整，后者表示留点缝"><a href="#23-【背景重复新值】🐴background-repeat新属性值：round和space。前者表示凑个整，后者表示留点缝" class="headerlink" title="23.【背景重复新值】🐴background-repeat新属性值：round和space。前者表示凑个整，后者表示留点缝"></a>23.【背景重复新值】🐴background-repeat新属性值：round和space。前者表示凑个整，后者表示留点缝</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/23.gif"></p><h4 id="24-【背景附着】🐐background-attachment指定背景如何附着在容器上，注意其属性值local和fixed的使用"><a href="#24-【背景附着】🐐background-attachment指定背景如何附着在容器上，注意其属性值local和fixed的使用" class="headerlink" title="24.【背景附着】🐐background-attachment指定背景如何附着在容器上，注意其属性值local和fixed的使用"></a>24.【背景附着】🐐background-attachment指定背景如何附着在容器上，注意其属性值local和fixed的使用</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/24.gif"></p><h4 id="25-【动画延时】🐵动画添加延迟时间可以使步调不一致"><a href="#25-【动画延时】🐵动画添加延迟时间可以使步调不一致" class="headerlink" title="25.【动画延时】🐵动画添加延迟时间可以使步调不一致"></a>25.【动画延时】🐵动画添加延迟时间可以使步调不一致</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/25.gif"></p><h4 id="26-【outline使用】🐔可以使用outline来描边，不占地方，它甚至可以在里面"><a href="#26-【outline使用】🐔可以使用outline来描边，不占地方，它甚至可以在里面" class="headerlink" title="26.【outline使用】🐔可以使用outline来描边，不占地方，它甚至可以在里面"></a>26.【outline使用】🐔可以使用outline来描边，不占地方，它甚至可以在里面</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/26.gif"></p><h4 id="27【背景定位】🐶当固定背景不随元素滚动时，背景定位是相对于视口的"><a href="#27【背景定位】🐶当固定背景不随元素滚动时，背景定位是相对于视口的" class="headerlink" title="27【背景定位】🐶当固定背景不随元素滚动时，背景定位是相对于视口的"></a>27【背景定位】🐶当固定背景不随元素滚动时，背景定位是相对于视口的</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/27.gif"></p><h4 id="28【tab-size】🐷浏览器默认显示tab为8个空格，tab-size可以指定空格长度"><a href="#28【tab-size】🐷浏览器默认显示tab为8个空格，tab-size可以指定空格长度" class="headerlink" title="28【tab-size】🐷浏览器默认显示tab为8个空格，tab-size可以指定空格长度"></a>28【tab-size】🐷浏览器默认显示tab为8个空格，tab-size可以指定空格长度</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/28.gif"></p><h4 id="29【动画暂停】🥝CSS动画其实是可以暂停的"><a href="#29【动画暂停】🥝CSS动画其实是可以暂停的" class="headerlink" title="29【动画暂停】🥝CSS动画其实是可以暂停的"></a>29【动画暂停】🥝CSS动画其实是可以暂停的</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/29.gif"></p><h4 id="30【object-fit】🍓图片在指定尺寸后，可以设置object-fit为contain或cover保持比例"><a href="#30【object-fit】🍓图片在指定尺寸后，可以设置object-fit为contain或cover保持比例" class="headerlink" title="30【object-fit】🍓图片在指定尺寸后，可以设置object-fit为contain或cover保持比例"></a>30【object-fit】🍓图片在指定尺寸后，可以设置object-fit为contain或cover保持比例</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/30.gif"></p><h4 id="31【鼠标状态】🍒按钮禁用时，不要忘了设置鼠标状态"><a href="#31【鼠标状态】🍒按钮禁用时，不要忘了设置鼠标状态" class="headerlink" title="31【鼠标状态】🍒按钮禁用时，不要忘了设置鼠标状态"></a>31【鼠标状态】🍒按钮禁用时，不要忘了设置鼠标状态</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/31.gif"></p><h4 id="32【背景虚化】🍑使用CSS滤镜实现背景虚化"><a href="#32【背景虚化】🍑使用CSS滤镜实现背景虚化" class="headerlink" title="32【背景虚化】🍑使用CSS滤镜实现背景虚化"></a>32【背景虚化】🍑使用CSS滤镜实现背景虚化</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/32.gif"></p><h4 id="33【fill-available】🍏设置宽度为fill-available，可以使inline-block像block那样填充整个空间"><a href="#33【fill-available】🍏设置宽度为fill-available，可以使inline-block像block那样填充整个空间" class="headerlink" title="33【fill-available】🍏设置宽度为fill-available，可以使inline-block像block那样填充整个空间"></a>33【fill-available】🍏设置宽度为fill-available，可以使inline-block像block那样填充整个空间</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/33.gif"></p><h4 id="34【fit-content】🍎设置宽度为fit-content，可以使block像inline-block那样实现收缩宽度包裹内容的效果"><a href="#34【fit-content】🍎设置宽度为fit-content，可以使block像inline-block那样实现收缩宽度包裹内容的效果" class="headerlink" title="34【fit-content】🍎设置宽度为fit-content，可以使block像inline-block那样实现收缩宽度包裹内容的效果"></a>34【fit-content】🍎设置宽度为fit-content，可以使block像inline-block那样实现收缩宽度包裹内容的效果</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/34.gif"></p><h4 id="35【自定义属性】🍋CSS自定义属性的简单使用"><a href="#35【自定义属性】🍋CSS自定义属性的简单使用" class="headerlink" title="35【自定义属性】🍋CSS自定义属性的简单使用"></a>35【自定义属性】🍋CSS自定义属性的简单使用</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/35.gif"></p><h4 id="36【min-content-max-content】🍍可以设置宽度为min-content和max-content，前者让内容尽可能地收缩，后者让内容尽可能地展开"><a href="#36【min-content-max-content】🍍可以设置宽度为min-content和max-content，前者让内容尽可能地收缩，后者让内容尽可能地展开" class="headerlink" title="36【min-content&#x2F;max-content】🍍可以设置宽度为min-content和max-content，前者让内容尽可能地收缩，后者让内容尽可能地展开"></a>36【min-content&#x2F;max-content】🍍可以设置宽度为min-content和max-content，前者让内容尽可能地收缩，后者让内容尽可能地展开</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/36.gif"></p><h4 id="37【进度条】🍊使用渐变，一个div实现进度条"><a href="#37【进度条】🍊使用渐变，一个div实现进度条" class="headerlink" title="37【进度条】🍊使用渐变，一个div实现进度条"></a>37【进度条】🍊使用渐变，一个div实现进度条</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/37.gif"></p><h4 id="38【打印】🍉可以在打印网页时，设置page相关属性。比如page-break-before属性来表示是否需要另起新页"><a href="#38【打印】🍉可以在打印网页时，设置page相关属性。比如page-break-before属性来表示是否需要另起新页" class="headerlink" title="38【打印】🍉可以在打印网页时，设置page相关属性。比如page-break-before属性来表示是否需要另起新页"></a>38【打印】🍉可以在打印网页时，设置page相关属性。比如page-break-before属性来表示是否需要另起新页</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/38.gif"></p><h4 id="39【逐帧动画】🍌利用CSS精灵实现逐帧动画"><a href="#39【逐帧动画】🍌利用CSS精灵实现逐帧动画" class="headerlink" title="39【逐帧动画】🍌利用CSS精灵实现逐帧动画"></a>39【逐帧动画】🍌利用CSS精灵实现逐帧动画</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/39.gif"></p><h4 id="40【resize】🍐普通元素也可以像textarea那样resize"><a href="#40【resize】🍐普通元素也可以像textarea那样resize" class="headerlink" title="40【resize】🍐普通元素也可以像textarea那样resize"></a>40【resize】🍐普通元素也可以像textarea那样resize</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/40.gif"></p><h4 id="41【面包屑】🍇使用before伪元素实现面包屑"><a href="#41【面包屑】🍇使用before伪元素实现面包屑" class="headerlink" title="41【面包屑】🍇使用before伪元素实现面包屑"></a>41【面包屑】🍇使用before伪元素实现面包屑</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/41.gif"></p><h4 id="42【sticky-footer】🍈使用grid布局实现sticky-footer"><a href="#42【sticky-footer】🍈使用grid布局实现sticky-footer" class="headerlink" title="42【sticky footer】🍈使用grid布局实现sticky footer"></a>42【sticky footer】🍈使用grid布局实现sticky footer</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/42.gif"></p><h4 id="43【动画填充状态】🍅CSS可以设置动画开始前和结束时所保持的状态"><a href="#43【动画填充状态】🍅CSS可以设置动画开始前和结束时所保持的状态" class="headerlink" title="43【动画填充状态】🍅CSS可以设置动画开始前和结束时所保持的状态"></a>43【动画填充状态】🍅CSS可以设置动画开始前和结束时所保持的状态</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/43.gif"></p><h4 id="44【动画负延迟】🥑CSS动画可以设置延迟时间为负数，表示动画仿佛开始前就已经运行过了那么长时间"><a href="#44【动画负延迟】🥑CSS动画可以设置延迟时间为负数，表示动画仿佛开始前就已经运行过了那么长时间" class="headerlink" title="44【动画负延迟】🥑CSS动画可以设置延迟时间为负数，表示动画仿佛开始前就已经运行过了那么长时间"></a>44【动画负延迟】🥑CSS动画可以设置延迟时间为负数，表示动画仿佛开始前就已经运行过了那么长时间</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/44.gif"></p><h4 id="45【过渡】🍆爱的魔力转圈圈"><a href="#45【过渡】🍆爱的魔力转圈圈" class="headerlink" title="45【过渡】🍆爱的魔力转圈圈"></a>45【过渡】🍆爱的魔力转圈圈</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/45.gif"></p><h4 id="46【动画案例】🍬水波效果原理"><a href="#46【动画案例】🍬水波效果原理" class="headerlink" title="46【动画案例】🍬水波效果原理"></a>46【动画案例】🍬水波效果原理</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/46.gif"></p><h4 id="47【动画案例】🌸CSS弹球动画效果的原理"><a href="#47【动画案例】🌸CSS弹球动画效果的原理" class="headerlink" title="47【动画案例】🌸CSS弹球动画效果的原理"></a>47【动画案例】🌸CSS弹球动画效果的原理</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/47.gif"></p><h4 id="48【outline】🌻outline属性的妙用"><a href="#48【outline】🌻outline属性的妙用" class="headerlink" title="48【outline】🌻outline属性的妙用"></a>48【outline】🌻outline属性的妙用</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/48.gif"></p><h4 id="49【grid】💕火狐浏览器grid布局检测器"><a href="#49【grid】💕火狐浏览器grid布局检测器" class="headerlink" title="49【grid】💕火狐浏览器grid布局检测器"></a>49【grid】💕火狐浏览器grid布局检测器</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/49.gif"></p><p>第二季：</p><h2 id="知识点篇"><a href="#知识点篇" class="headerlink" title="知识点篇"></a>知识点篇</h2><h4 id="01-🔢CSS计数器的使用"><a href="#01-🔢CSS计数器的使用" class="headerlink" title="01.🔢CSS计数器的使用"></a>01.🔢CSS计数器的使用</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/1.png"></p><p>演示地址：<a href="https://codepen.io/laoyao/pen/gOYrmaq">codepen</a></p><h4 id="02-📝文本缩进，块级用text-indent，内联用margin-left"><a href="#02-📝文本缩进，块级用text-indent，内联用margin-left" class="headerlink" title="02.📝文本缩进，块级用text-indent，内联用margin-left"></a>02.📝文本缩进，块级用text-indent，内联用margin-left</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/2.png"></p><h4 id="03-📖美化表格常用技巧。等比、定宽、错色等"><a href="#03-📖美化表格常用技巧。等比、定宽、错色等" class="headerlink" title="03.📖美化表格常用技巧。等比、定宽、错色等"></a>03.📖美化表格常用技巧。等比、定宽、错色等</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/3.png"></p><p>演示地址：<a href="https://codepen.io/laoyao/pen/NWKRBzY">codepen</a></p><h4 id="04-👔滚动条样式美化"><a href="#04-👔滚动条样式美化" class="headerlink" title="04.👔滚动条样式美化"></a>04.👔滚动条样式美化</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/4.png"></p><h4 id="05-👉使用文本对齐属性值justify，实现类似弹性布局的space-between效果"><a href="#05-👉使用文本对齐属性值justify，实现类似弹性布局的space-between效果" class="headerlink" title="05.👉使用文本对齐属性值justify，实现类似弹性布局的space-between效果"></a>05.👉使用文本对齐属性值justify，实现类似弹性布局的space-between效果</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/5.png"></p><h4 id="06-🐠使用selection选择器自定义文本选区的高亮样式"><a href="#06-🐠使用selection选择器自定义文本选区的高亮样式" class="headerlink" title="06.🐠使用selection选择器自定义文本选区的高亮样式"></a>06.🐠使用selection选择器自定义文本选区的高亮样式</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/6.png"></p><h4 id="07-🏩grid-template设置网格模板，实现三列两行布局"><a href="#07-🏩grid-template设置网格模板，实现三列两行布局" class="headerlink" title="07.🏩grid-template设置网格模板，实现三列两行布局"></a>07.🏩grid-template设置网格模板，实现三列两行布局</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/7.png"></p><h4 id="08-🏠grid-gap设置网格间隙，包括行和列"><a href="#08-🏠grid-gap设置网格间隙，包括行和列" class="headerlink" title="08.🏠grid-gap设置网格间隙，包括行和列"></a>08.🏠grid-gap设置网格间隙，包括行和列</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/8.png"></p><h4 id="09-🏡grid布局，使用fr单位实现等比例分配空间。fr是分数（fraction）的缩写"><a href="#09-🏡grid布局，使用fr单位实现等比例分配空间。fr是分数（fraction）的缩写" class="headerlink" title="09.🏡grid布局，使用fr单位实现等比例分配空间。fr是分数（fraction）的缩写"></a>09.🏡grid布局，使用fr单位实现等比例分配空间。fr是分数（fraction）的缩写</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/9.png"></p><h4 id="10-🏢grid布局使用repeat函数，可以少写些代码"><a href="#10-🏢grid布局使用repeat函数，可以少写些代码" class="headerlink" title="10.🏢grid布局使用repeat函数，可以少写些代码"></a>10.🏢grid布局使用repeat函数，可以少写些代码</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/10.png"></p><h4 id="11-🍧focus-within是为数不多的一个，可以由子操作父选择器"><a href="#11-🍧focus-within是为数不多的一个，可以由子操作父选择器" class="headerlink" title="11.🍧focus-within是为数不多的一个，可以由子操作父选择器"></a>11.🍧focus-within是为数不多的一个，可以由子操作父选择器</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/11.png"></p><p>演示地址：<a href="https://codepen.io/laoyao/pen/ZgRyeg">codepen</a></p><h4 id="12-♐容易被忽视的target选择器"><a href="#12-♐容易被忽视的target选择器" class="headerlink" title="12.♐容易被忽视的target选择器"></a>12.♐容易被忽视的target选择器</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/12.png"></p><h2 id="特效原理篇"><a href="#特效原理篇" class="headerlink" title="特效原理篇"></a>特效原理篇</h2><h4 id="13-⚽使用变换实现简单复合运动"><a href="#13-⚽使用变换实现简单复合运动" class="headerlink" title="13.⚽使用变换实现简单复合运动"></a>13.⚽使用变换实现简单复合运动</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/13.png"></p><h4 id="14-🌈看见彩虹，吃定彩虹"><a href="#14-🌈看见彩虹，吃定彩虹" class="headerlink" title="14.🌈看见彩虹，吃定彩虹"></a>14.🌈看见彩虹，吃定彩虹</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/14.png"></p><p>演示地址：<a href="https://codepen.io/laoyao/pen/NWKXKYd?editors=0110">codepen</a></p><h4 id="15-🙅人脸识别时用到的扫描图，之前我司的一个需求"><a href="#15-🙅人脸识别时用到的扫描图，之前我司的一个需求" class="headerlink" title="15.🙅人脸识别时用到的扫描图，之前我司的一个需求"></a>15.🙅人脸识别时用到的扫描图，之前我司的一个需求</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/15.png"></p><p>演示地址：<a href="https://codepen.io/laoyao/pen/MWgGzWb">codepen</a></p><h4 id="16-🗿立体感按钮"><a href="#16-🗿立体感按钮" class="headerlink" title="16.🗿立体感按钮"></a>16.🗿立体感按钮</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/16.png"></p><p>演示地址：<a href="https://codepen.io/laoyao/pen/LweeBp">codepen</a></p><h4 id="17-🔄实现一个混沌动态背景"><a href="#17-🔄实现一个混沌动态背景" class="headerlink" title="17.🔄实现一个混沌动态背景"></a>17.🔄实现一个混沌动态背景</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/17.png"></p><p>演示地址：<a href="https://codepen.io/laoyao/pen/OJLRLPL">codepen</a></p><h4 id="18-💞环绕椭圆轨道旋转。平移运动与圆周运动复合就能做到"><a href="#18-💞环绕椭圆轨道旋转。平移运动与圆周运动复合就能做到" class="headerlink" title="18.💞环绕椭圆轨道旋转。平移运动与圆周运动复合就能做到"></a>18.💞环绕椭圆轨道旋转。平移运动与圆周运动复合就能做到</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/18.png"></p><p>演示地址：<a href="https://codepen.io/laoyao/pen/MWgGWYm">codepen</a></p><h4 id="19-👓只用background就能实现简单滤镜效果"><a href="#19-👓只用background就能实现简单滤镜效果" class="headerlink" title="19.👓只用background就能实现简单滤镜效果"></a>19.👓只用background就能实现简单滤镜效果</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/19.png"></p><h4 id="20-🐍蛇形边框特效原理"><a href="#20-🐍蛇形边框特效原理" class="headerlink" title="20.🐍蛇形边框特效原理"></a>20.🐍蛇形边框特效原理</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/20.png"></p><p>演示地址：<a href="https://codepen.io/laoyao/pen/gOYgGYj">codepen</a></p><h4 id="21-🎁让你的女朋友动起来"><a href="#21-🎁让你的女朋友动起来" class="headerlink" title="21.🎁让你的女朋友动起来"></a>21.🎁让你的女朋友动起来</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/21.png"></p><p>演示地址：<a href="https://codepen.io/laoyao/pen/bGbWzvm">codepen</a></p><h4 id="22-🌖一个div，实现天狗吃月亮"><a href="#22-🌖一个div，实现天狗吃月亮" class="headerlink" title="22.🌖一个div，实现天狗吃月亮"></a>22.🌖一个div，实现天狗吃月亮</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/22.png"></p><p>演示地址：<a href="https://codepen.io/laoyao/pen/qBWqmbp">codepen</a></p><h4 id="23-🌖更简单的方案，实现天狗吃月亮"><a href="#23-🌖更简单的方案，实现天狗吃月亮" class="headerlink" title="23.🌖更简单的方案，实现天狗吃月亮"></a>23.🌖更简单的方案，实现天狗吃月亮</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/23.png"></p><p>演示地址：<a href="https://codepen.io/laoyao/pen/ZEzBPWr">codepen</a></p><h4 id="24-🌌画个土星，像不像三分样"><a href="#24-🌌画个土星，像不像三分样" class="headerlink" title="24.🌌画个土星，像不像三分样"></a>24.🌌画个土星，像不像三分样</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/24.png"></p><p>演示地址1：<a href="https://codepen.io/laoyao/pen/BaBRjzp">codepen</a></p><p>演示地址2：<a href="https://codepen.io/laoyao/pen/VwZbBbG">codepen</a></p><h4 id="25-🌈使用渐变，一个div画Chrome的logo"><a href="#25-🌈使用渐变，一个div画Chrome的logo" class="headerlink" title="25.🌈使用渐变，一个div画Chrome的logo"></a>25.🌈使用渐变，一个div画Chrome的logo</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/25.png"></p><p>演示地址：<a href="https://codepen.io/laoyao/pen/KOvZOd">codepen</a></p><h4 id="26-🉐一个div简单画铜钱"><a href="#26-🉐一个div简单画铜钱" class="headerlink" title="26.🉐一个div简单画铜钱"></a>26.🉐一个div简单画铜钱</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/26.png"></p><h4 id="27-🃏切牌特效原理"><a href="#27-🃏切牌特效原理" class="headerlink" title="27.🃏切牌特效原理"></a>27.🃏切牌特效原理</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/27.png"></p><p>演示地址：<a href="https://codepen.io/laoyao/pen/XWrgVWV">codepen</a></p><h4 id="28-✂给clip-path应用动画"><a href="#28-✂给clip-path应用动画" class="headerlink" title="28.✂给clip-path应用动画"></a>28.✂给clip-path应用动画</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/28.png"></p><p>演示地址：<a href="https://codepen.io/laoyao/pen/wvwgvoz">codepen</a></p><h2 id="工具篇"><a href="#工具篇" class="headerlink" title="工具篇"></a>工具篇</h2><h4 id="29-🚀vscode里是可以使用Emmet语法的，敲tab键结束命令，-表示返回上一层级"><a href="#29-🚀vscode里是可以使用Emmet语法的，敲tab键结束命令，-表示返回上一层级" class="headerlink" title="29.🚀vscode里是可以使用Emmet语法的，敲tab键结束命令，^表示返回上一层级"></a>29.🚀vscode里是可以使用Emmet语法的，敲tab键结束命令，^表示返回上一层级</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/29.png"></p><p><a href="https://docs.emmet.io/abbreviations/syntax/">语法说明</a></p><h4 id="30-⛲查看页面布局小技巧，觉得很好用"><a href="#30-⛲查看页面布局小技巧，觉得很好用" class="headerlink" title="30.⛲查看页面布局小技巧，觉得很好用"></a>30.⛲查看页面布局小技巧，觉得很好用</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/30.png"></p><p><a href="https://codepen.io/laoyao/pen/gOOaOXM?editors=0010">书签完整代码</a></p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS打印调试的多种方法</title>
      <link href="/2023/12/27/js-da-yin-diao-shi-de-duo-chong-fang-fa/"/>
      <url>/2023/12/27/js-da-yin-diao-shi-de-duo-chong-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="简单的console-log不要再用了！试试这个"><a href="#简单的console-log不要再用了！试试这个" class="headerlink" title="简单的console.log不要再用了！试试这个"></a>简单的console.log不要再用了！试试这个</h2><p><a href="https://juejin.cn/post/7310102466570321958">原文</a></p><h3 id="1-需求分析"><a href="#1-需求分析" class="headerlink" title="1. 需求分析"></a>1. 需求分析</h3><p>一般情况下，我们在项目中进行代码调试时，往往只会在逻辑中使用<code>console.log</code>进行控制台打印调试。</p><p>这种方式虽然比较常规直接，但是如果打印数据多了，就会导致你的控制台消息变得异常混乱。</p><p>所以，我们有了更好的选择，那就是<code>console</code>对象提供的其它API，来让我们能够更清晰的区分打印信息。</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/log-way/1.png" alt="图片"></p><h3 id="2-实现步骤"><a href="#2-实现步骤" class="headerlink" title="2. 实现步骤"></a>2. 实现步骤</h3><h4 id="2-1-console-warn"><a href="#2-1-console-warn" class="headerlink" title="2.1 console.warn"></a>2.1 console.warn</h4><p>当我们需要区分一些比较重要的打印信息时，可以使用<code>warn</code>进行警告提示。</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/log-way/2.png" alt="图片"></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h4 id="2-2-console-error"><a href="#2-2-console-error" class="headerlink" title="2.2 console.error"></a>2.2 console.error</h4><p>当我们需要区分一些异常错误的打印信息时，可以使用<code>error</code>进行错误提示。</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/log-way/3.png" alt="图片"></p><h4 id="2-3-console-time-timeEnd"><a href="#2-3-console-time-timeEnd" class="headerlink" title="2.3 console.time&#x2F;timeEnd"></a>2.3 console.time&#x2F;timeEnd</h4><p>想看看一段代码运行需要多长时间，可以使用<code>time</code>。</p><p>这对于需要一些时间的CPU密集型应用程序非常有用，例如<code>神经网络</code>或 <code>HTML Canvas</code>读取。</p><p>下面执行这段代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">"Loop timer"</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// Some code here</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">"Loop timer"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><p>结果如下：<img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/log-way/4.png" alt="图片"></p><h4 id="2-4-console-trace"><a href="#2-4-console-trace" class="headerlink" title="2.4 console.trace"></a>2.4 console.trace</h4><p>想看看函数的调用顺序是怎样的吗？可以使用<code>trace</code>。</p><p>下面执行这段代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script setup<span class="token operator">></span>  <span class="token keyword">function</span> <span class="token function">trace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">randomFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">trace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">randomFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>setup</code>中，<code>randomFunction</code> 调用<code>trace</code>，然后又调用<code>console.trace</code>。</p><p>因此，当您调用 <code>randomFunction</code> 时，您将得到类似的输出，结果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/log-way/10.png" alt="图片"></p><h3 id="2-5-console-group-groupEnd"><a href="#2-5-console-group-groupEnd" class="headerlink" title="2.5 console.group&#x2F;groupEnd"></a>2.5 console.group&#x2F;groupEnd</h3><p>当我们需要将一类打印信息进行分组时，可以使用<code>group</code>。</p><p>下面执行这段代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">"My message group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Test2!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Test2!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Test2!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">groupEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/log-way/5.png" alt="图片"></p><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><h4 id="2-6-console-table"><a href="#2-6-console-table" class="headerlink" title="2.6 console.table"></a>2.6 console.table</h4><p>在控制台中打印表格信息，可以使用<code>table</code>。</p><p>对！你没听错，就是让我们以表格形式展示打印信息。</p><p>如果使用<code>log</code>打印：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Weirdo"</span><span class="token punctuation">,</span> age <span class="token operator">:</span> <span class="token string">"-23"</span><span class="token punctuation">,</span> hobby<span class="token operator">:</span> <span class="token string">"singing"</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"SomeName"</span><span class="token punctuation">,</span> age <span class="token operator">:</span> <span class="token string">"Infinity"</span><span class="token punctuation">,</span> hobby<span class="token operator">:</span> <span class="token string">"programming"</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">,</span> person2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下：</p><p>这样做是不是让数据看起来很混乱。</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/log-way/6.png" alt="图片"></p><p>反之，如果我们使用<code>table</code>输出：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Weirdo"</span><span class="token punctuation">,</span> age <span class="token operator">:</span> <span class="token string">"-23"</span><span class="token punctuation">,</span> hobby<span class="token operator">:</span> <span class="token string">"singing"</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"SomeName"</span><span class="token punctuation">,</span> age <span class="token operator">:</span> <span class="token string">"Infinity"</span><span class="token punctuation">,</span> hobby<span class="token operator">:</span> <span class="token string">"programming"</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>person1<span class="token punctuation">,</span> person2<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下：</p><p>怎么样！从来不知道控制台可以看起来如此干净，对吧！</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/log-way/7.png" alt="图片"></p><h4 id="2-7-console-clear"><a href="#2-7-console-clear" class="headerlink" title="2.7 console.clear"></a>2.7 console.clear</h4><p>最后，使用<code>clear</code>把控制台清空吧！</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/log-way/8.png" alt="图片"></p><h3 id="3-问题详解"><a href="#3-问题详解" class="headerlink" title="3. 问题详解"></a>3. 问题详解</h3><h4 id="3-1-可以自定义log的样式吗？"><a href="#3-1-可以自定义log的样式吗？" class="headerlink" title="3.1 可以自定义log的样式吗？"></a>3.1 可以自定义log的样式吗？</h4><p>答案当然是可以的，只需要借助<code>%c</code>这个占位符。</p><p><code>%c</code> 是console的占位符，用于指定输出样式或应用 CSS 样式到特定的输出文本。</p><p>但请注意，<code>%c</code> 占位符只在部分浏览器中支持，如 Chrome、Firefox 等。</p><p>通过使用 <code>%c</code> 占位符，可以在 <code>console.log</code> 中为特定的文本应用自定义的 CSS 样式。这样可以改变输出文本的颜色、字体、背景等样式属性，以便在控制台中以不同的样式突出显示特定的信息。</p><p>以下是使用<code>%c</code> 占位符应用样式的示例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c Hello, World!"</span><span class="token punctuation">,</span>   <span class="token string">"color: red; font-weight: bold;border: 1px solid red;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>结果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/log-way/1.png" alt="图片"></p><p>通过使用 <code>%c</code> 占位符和自定义的样式规则，可以在控制台输出中以不同的样式突出显示特定的文本，使得输出更加清晰和易于识别。</p><p>这在调试和日志记录过程中非常有用，特别是当需要突出显示特定类型的信息或错误时。</p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多种样式的&lt;hr&gt;花样标签</title>
      <link href="/2023/12/17/duo-chong-yang-shi-de-hr-hua-yang-biao-qian/"/>
      <url>/2023/12/17/duo-chong-yang-shi-de-hr-hua-yang-biao-qian/</url>
      
        <content type="html"><![CDATA[<h2 id="666，看hr标签实现分隔线如何玩出花"><a href="#666，看hr标签实现分隔线如何玩出花" class="headerlink" title="666，看hr标签实现分隔线如何玩出花"></a>666，看hr标签实现分隔线如何玩出花</h2><p>日常开发经常会用到网页分隔线，例如列表下拉到最后，类似于“我是有底线的”这样的提示，就会伴随分隔线。</p><p>通常，这样的分隔线是使用<code>&lt;div&gt;</code>标签模拟的，其实我们可以使用语义更好的<code>&lt;hr&gt;</code>标签模拟。</p><p>HTML <code>&lt;hr&gt;</code>元素虽然是一个非闭合标签，但是也是支持<code>::before</code>和<code>::after</code>伪元素的。</p><p>因此，我们可以使用<code>&lt;hr&gt;</code>标签实现各种样式的分隔线效果。</p><h3 id="一、基础分隔线效果"><a href="#一、基础分隔线效果" class="headerlink" title="一、基础分隔线效果"></a>一、基础分隔线效果</h3><h5 id="实线"><a href="#实线" class="headerlink" title="实线"></a>实线</h5><p>相关HTML和CSS代码如下所示：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-solid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.hr-solid &#123;    border: 0;    border-top: 1px solid #d0d0d5;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>渲染效果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/hr-css-lines/1.png"></p><h5 id="点线（1px和2px）"><a href="#点线（1px和2px）" class="headerlink" title="点线（1px和2px）"></a>点线（1px和2px）</h5><p>相关HTML和CSS代码如下所示，使用的是浏览器默认效果，因此，不同浏览器下看到的虚点的细节可能会有所差异：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-dotted<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-dotted2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.hr-dotted &#123;    border: 0;    border-top: 1px dotted #a2a9b6;&#125;.hr-dotted2 &#123;    border: 0;    border-top: 2px dotted #a2a9b6;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>渲染效果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/hr-css-lines/2.png"></p><h5 id="虚线（1px和2px）"><a href="#虚线（1px和2px）" class="headerlink" title="虚线（1px和2px）"></a>虚线（1px和2px）</h5><p>相关HTML和CSS代码如下所示，同样的，浏览器默认虚线样式，不同浏览器表现细节有差异：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-dashed<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-dashed2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.hr-dashed &#123;    border: 0;    border-top: 1px dashed #a2a9b6;&#125;.hr-dashed2 &#123;    border: 0;    border-top: 2px dashed #a2a9b6;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>渲染效果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/hr-css-lines/3.png"></p><h5 id="双实线"><a href="#双实线" class="headerlink" title="双实线"></a>双实线</h5><p>相关HTML和CSS代码如下所示：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-double<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.hr-double &#123;    border: 0;    border-top: 3px double #d0d0d5;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>渲染效果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/hr-css-lines/4.png"></p><h5 id="疏密可控的虚线"><a href="#疏密可控的虚线" class="headerlink" title="疏密可控的虚线"></a>疏密可控的虚线</h5><p>这里使用线性渐变模拟虚线效果，优点是虚线的虚实比例是可以精确控制的，实现原理和细节以前介绍过，可参见“<a href="https://www.zhangxinxu.com/wordpress/?p=6494">CSS3 linear-gradient线性渐变实现虚线</a>”一文。</p><p>现在有如下所示的HTML和CSS代码：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-dashed-fixed<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.hr-dashed-fixed &#123;    border: 0;    padding-top: 1px;    background: repeating-linear-gradient(to right, #a2a9b6 0px, #a2a9b6 4px, transparent 0px, transparent 10px);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>渲染效果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/hr-css-lines/5.png"></p><p>这里，为了方便大家使用，我又使用CSS变量，把虚线实线比例做成可配置的了。</p><p>其中<code>--dashed-filled</code>是实线尺寸，变量<code>--dashed-filled</code>是虚线的尺寸，代码示意：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-dashed-fixed<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">--dashed-filled</span><span class="token punctuation">:</span> 6px<span class="token punctuation">;</span> <span class="token property">--dashed-open</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.hr-dashed-fixed &#123;    border: 0;    padding-top: 1px;    /* for 现代浏览器 */    background: repeating-linear-gradient(to right, #a2a9b6 0 var(--dashed-filled, 4px), transparent 0 calc(var(--dashed-filled, 4px) + var(--dashed-open, 6px)));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只有在现代浏览器中才有效果，因为IE不支持CSS变量，因此，IE浏览器无效。</p><p>渲染效果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/hr-css-lines/6.png"></p><p>为了全兼容，大家可以把上面两段CSS合二为一，例如：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.hr-dashed-fixed &#123;    border: 0;    padding-top: 1px;    /* for IE浏览器 */    background: repeating-linear-gradient(to right, #a2a9b6 0px, #a2a9b6 4px, transparent 0px, transparent 10px);    /* for 现代浏览器 */    background: repeating-linear-gradient(to right, #a2a9b6 0 var(--dashed-filled, 4px), transparent 0 calc(var(--dashed-filled, 4px) + var(--dashed-open, 6px)));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="两头虚的分隔线"><a href="#两头虚的分隔线" class="headerlink" title="两头虚的分隔线"></a>两头虚的分隔线</h5><p>这是个比较常见的分隔线效果，线的两端淡出，中间是完整的颜色。</p><p>此效果实现方法很多，我这里使用的是CSS渐变模拟的，相关HTML和CSS代码如下所示：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-edge-weak<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.hr-edge-weak &#123;    border: 0;    padding-top: 1px;    background: linear-gradient(to right, transparent, #d0d0d5, transparent);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>渲染效果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/hr-css-lines/7.png"></p><h5 id="斜纹分隔线"><a href="#斜纹分隔线" class="headerlink" title="斜纹分隔线"></a>斜纹分隔线</h5><p>有时候需要分界线更加明显的分隔线，则可以试试下面的代码，对应的效果是斜纹分隔线。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-twill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.hr-twill &#123;    border: 0;    padding: 3px;    background: repeating-linear-gradient(135deg, #a2a9b6 0px, #a2a9b6 1px, transparent 1px, transparent 6px);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>渲染效果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/hr-css-lines/8.png"></p><p>我们也可以让斜纹表现为多彩的颜色，这里使用了遮罩实现，HTML和CSS代码为：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-twill-colorful<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">/* 现代浏览器only */.hr-twill-colorful &#123;    border: 0;    padding: 3px;    background: linear-gradient(135deg, red, orange,green, blue, purple);    --mask-image: repeating-linear-gradient(135deg, #000 0px, #000 1px, transparent 1px, transparent 6px);    -webkit-mask-image: var(--mask-image);    mask-image: var(--mask-image);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>渲染效果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/hr-css-lines/9.png"></p><h5 id="波浪线"><a href="#波浪线" class="headerlink" title="波浪线"></a>波浪线</h5><p>这里的波浪线实现使用了特别的技巧，相关原理和细节之前专门撰文介绍过，详见：“<a href="https://www.zhangxinxu.com/wordpress/?p=9333">CSS text-decoration实现宽度100%波浪线效果</a>”。</p><p>这里演示使用的前端代码则是：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-wavy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.hr-wavy &#123;    border: 0;    color: #d0d0d5;    height: .5em;    white-space: nowrap;    letter-spacing: 100vw;    padding-top: .5em;&#125;.hr-wavy::before &#123;    content: "\2000\2000";    /* IE浏览器实线代替 */    text-decoration: overline;    /* 现代浏览器 */    text-decoration: overline wavy;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>渲染效果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/hr-css-lines/10.png"></p><h5 id="阴影线"><a href="#阴影线" class="headerlink" title="阴影线"></a>阴影线</h5><p>这个实现比较简单，就是使用CSS <code>box-shadow</code>盒阴影属性，多用在表示层次的分隔场景中。</p><p>相关HTML和CSS代码如下所示：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-shadow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.hr-shadow &#123;    border: 0;    padding-top: 10px;    color: #d0d0d5;    border-top: 1px solid rgba(0,0,0,.1);    box-shadow: inset 0 10px 10px -10px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>渲染效果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/hr-css-lines/11.png"></p><h3 id="二、带点图形装饰的分隔线"><a href="#二、带点图形装饰的分隔线" class="headerlink" title="二、带点图形装饰的分隔线"></a>二、带点图形装饰的分隔线</h3><p>这里主要演示几个生产环境可以使用的几个样式，那些花里胡哨的分隔线这里就不展示了。</p><h5 id="中间有装饰"><a href="#中间有装饰" class="headerlink" title="中间有装饰"></a>中间有装饰</h5><p>中间有一些图形或图像，实现原理大同小异，这里使用圆和方块抛砖引玉示意下。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-mid-circle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-mid-square<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里的线条使用CSS渐变绘制，而中间的图形就需要借助伪元素实现了。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.hr-mid-circle,.hr-mid-square &#123;    border: 0;    color: #d0d0d5;    background: linear-gradient(currentColor, currentColor) no-repeat center;    background-size: 100% 1px;&#125;.hr-mid-circle::before &#123;    content: '';    display: block;    width: .75em; height: .75em;    border-radius: 50%;    background-color: currentColor;    margin: auto;&#125;.hr-mid-square::before &#123;    content: '';    display: block;    width: .75em; height: .75em;    transform: rotate(45deg);    background-color: currentColor;    margin: 3px auto;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>渲染效果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/hr-css-lines/12.png"></p><h5 id="中间有多个装饰"><a href="#中间有多个装饰" class="headerlink" title="中间有多个装饰"></a>中间有多个装饰</h5><p>如果中间是多个圆，多个方块，那该怎么办呢？</p><p>一种方法是变成背景图，平铺，在本例中，因为是实色图形，则可以使用 <code>box-shadow</code> 进行图形复制。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-mid-circle<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-mid-square<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>只需要在上面CSS代码基础上加上下面这几行CSS就可以了：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.hr-mid-circle[multiple]::before &#123;    box-shadow: 1.5em 0, -1.5em 0;&#125;.hr-mid-square[multiple]::before &#123;    box-shadow: 1.25em -1.25em, -1.25em 1.25em;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>渲染效果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/hr-css-lines/13.png"></p><h5 id="装饰在两端"><a href="#装饰在两端" class="headerlink" title="装饰在两端"></a>装饰在两端</h5><p>装饰有可能在两端，而不是中间，这里演示一个钻石图形在两侧对齐的例子，HTML和CSS使用的是：</p><pre class="line-numbers language-none"><code class="language-none">&lt;hr class&#x3D;&quot;hr-space-square&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.hr-space-square &#123;    border: 0;    color: #d0d0d5;    background: linear-gradient(currentColor, currentColor) no-repeat center;    background-size: calc(100% - 1.5em - 6px) 1px;    display: flex;    justify-content: space-between;&#125;.hr-space-square::before,.hr-space-square::after &#123;    content: '';    display: block;    width: .75em; height: .75em;    transform: rotate(45deg);    box-sizing: border-box;    border: 1px solid;    margin: 3px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>渲染效果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/hr-css-lines/14.png"></p><h5 id="装饰复杂一点点"><a href="#装饰复杂一点点" class="headerlink" title="装饰复杂一点点"></a>装饰复杂一点点</h5><p>就是线条多一点，图形的造型也稍微复杂一点的装饰效果，HTML比较简单：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-double-arrow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>CSS这里用到了定位还有一些常见的CSS图形生成技巧：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.hr-double-arrow &#123;    color: #d0d0d5;    border: double;    border-width: 3px 5px;    border-color: #d0d0d5 transparent;    height: 1px;    overflow: visible;    margin-left: 20px;    margin-right: 20px;    position: relative;&#125;.hr-double-arrow:before, .hr-double-arrow:after &#123;    content: '';    position: absolute;    width: 5px; height: 5px;    border-width: 0 3px 3px 0;    border-style: double;    top: -3px;    background: radial-gradient(2px at 1px 1px, currentColor 2px, transparent 0) no-repeat;&#125;.hr-double-arrow:before &#123;    transform: rotate(-45deg);    left: -20px;&#125;.hr-double-arrow:after &#123;    transform: rotate(135deg);    right: -20px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>渲染效果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/hr-css-lines/15.png"></p><p>还有其他一些装饰效果，例如一些星星啊，加一些花朵之类的，篇幅原因（实际上懒得折腾，需要使用SVG图形），就不展示了。</p><h3 id="三、带文字内容的分隔线"><a href="#三、带文字内容的分隔线" class="headerlink" title="三、带文字内容的分隔线"></a>三、带文字内容的分隔线</h3><p>这个可能用得更多一点，然后这里演示的效果CSS代码都大同小异，因此有些重复的CSS就不再展示了。</p><h5 id="两端实线"><a href="#两端实线" class="headerlink" title="两端实线"></a>两端实线</h5><p>HTML代码这样的：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-solid-content<span class="token punctuation">"</span></span> <span class="token attr-name">data-content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>分隔线<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-solid-content<span class="token punctuation">"</span></span> <span class="token attr-name">data-content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>文字自适应，背景透明<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>CSS代码如下，这里的实现还是需要点基本功的，因为要让左右图形自适应于文字内容，同时文字后面不能有背景色。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.hr-solid-content &#123;    color: #a2a9b6;    border: 0;    font-size: 12px;    padding: 1em 0;    position: relative;&#125;.hr-solid-content::before &#123;    content: attr(data-content);    position: absolute;    padding: 0 1ch;    line-height: 1px;    border: solid #d0d0d5;    border-width: 0 99vw;    width: fit-content;    /* for 不支持fit-content浏览器 */    white-space: nowrap;    left: 50%;    transform: translateX(-50%);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>渲染效果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/hr-css-lines/16.png"></p><h5 id="两端虚线"><a href="#两端虚线" class="headerlink" title="两端虚线"></a>两端虚线</h5><p>实现原理和上面实线有些类似，也是使用一个巨大的边框，但是，此时使用dashed虚线边框是没有效果的，因为边框宽度太宽，高度为0，虚线的渲染是按照比例来的。</p><p>这里我是使用的<code>border-image</code>配合重复线性渐变模拟的虚线边框效果，HTML代码为：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-dashed-content<span class="token punctuation">"</span></span> <span class="token attr-name">data-content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>分隔线<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>CSS代码，<code>.hr-dashed-content</code>需要的CSS代码和上面<code>.hr-solid-content</code>一模一样，然后，额外增加下面这行CSS：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.hr-dashed-content::before &#123;    border-image: repeating-linear-gradient(90deg, #d0d0d5, #d0d0d5 1px, transparent 1px, transparent 2px) 0 85% / / 0 repeat;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面的语法看不懂没关系，知道上面代码有效果就可以了，然后85%修改可以控制虚线的尺寸大小。</p><p>渲染效果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/hr-css-lines/17.png"></p><h5 id="两端淡出"><a href="#两端淡出" class="headerlink" title="两端淡出"></a>两端淡出</h5><p>代码：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-fade-content<span class="token punctuation">"</span></span> <span class="token attr-name">data-content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>分隔线<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在原来实线效果基础上使用渐变作为遮罩就可以实现这样的效果了：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">// ... 一致代码略.hr-fade-content &#123;    -webkit-mask-image: linear-gradient(to right, transparent, black, transparent);    mask-image: linear-gradient(to right, transparent, black, transparent);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>渲染效果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/hr-css-lines/18.png"></p><h5 id="内容装饰"><a href="#内容装饰" class="headerlink" title="内容装饰"></a>内容装饰</h5><p>如果希望内容用框框起来，加个背景什么的，则需要借助另外一个伪元素，因为<code>::before</code>的尺寸高度被限制在了1px, 此时只能<code>::after</code>伪元素出马，同样不展示一致的CSS代码。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-mid-border-content<span class="token punctuation">"</span></span> <span class="token attr-name">data-content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>分隔线<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.hr-mid-border-content::after&#123;    content: attr(data-content);    position: absolute;    padding: 4px 1ch;    top: 50%; left: 50%;    transform: translate(-50%, -50%);    color: transparent;    border: 1px solid #d0d0d5;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>渲染效果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/hr-css-lines/19.png"></p><h3 id="四、专门弄了个项目开源了"><a href="#四、专门弄了个项目开源了" class="headerlink" title="四、专门弄了个项目开源了"></a>四、专门弄了个项目开源了</h3><p>一个人再怎么想破脑袋，所能实现的且实用的分隔线效果也是有限的，此时，就需要大家的智慧了。</p><p>因此，我专门在gitee上把相关CSS代码都开源出去了。</p><p>项目地址是：<a href="https://gitee.com/zhangxinxu/css-hr">https://gitee.com/zhangxinxu/css-hr</a><br>原文：<a href="https://www.zhangxinxu.com/wordpress/2021/05/css-html-hr/">https://www.zhangxinxu.com/wordpress/2021/05/css-html-hr/</a><br>参见：一些相当华丽的 hr 装饰效果：<a href="https://css-tricks.com/examples/hrs/">https://css-tricks.com/examples/hrs/</a></p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 数组常用方法</title>
      <link href="/2023/12/17/javascript-shu-zu-chang-yong-fang-fa/"/>
      <url>/2023/12/17/javascript-shu-zu-chang-yong-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript-数组常用方法"><a href="#Javascript-数组常用方法" class="headerlink" title="Javascript 数组常用方法"></a>Javascript 数组常用方法</h1><h1 id="返回新数组，不改变原数组"><a href="#返回新数组，不改变原数组" class="headerlink" title="返回新数组，不改变原数组"></a>返回新数组，不改变原数组</h1><h2 id="join"><a href="#join" class="headerlink" title="join"></a>join</h2><p>把数组中所有元素放入一个字符串中，返回字符串。</p><pre class="line-numbers language-Javascript" data-language="Javascript"><code class="language-Javascript">&#x2F;&#x2F; 0.0.2&#x2F;join.jsconst arr &#x3D; [&#39;pr&#39;, &#39;is&#39;, 18];console.log(arr.join(&#39; &#39;)); &#x2F;&#x2F; pr is 18console.log(&#39;&#x3D;&gt;&#39;);console.log(arr); &#x2F;&#x2F; [ &#39;pr&#39;, &#39;is&#39;, 18 ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h2><p>连接多个（含两个）数组，两边的原始数组都不会变化，返回被连接数组的一个副本，可继续 <code>concat</code>。</p><pre class="line-numbers language-Javascript" data-language="Javascript"><code class="language-Javascript">&#x2F;&#x2F; 0.0.2&#x2F;concat.jsconst arr &#x3D; [1, 2, 3, 4];const arr1 &#x3D; [&#39;pr&#39;, &#39;is&#39;, &#39;a&#39;, &#39;boy&#39;];const arr2 &#x3D; [5, 6, 7];console.log(arr.concat(arr1, arr2).concat(8, 9)); &#x2F;&#x2F; [1, 2, 3, 4, &#39;pr&#39;, &#39;is&#39;, &#39;a&#39;, &#39;boy&#39;, 5, 6, 7, 8, 9 ]console.log(&#39;&#x3D;&gt;&#39;);console.log(arr); &#x2F;&#x2F; [ 1, 2, 3, 4 ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h2><p>从开始到结束（<code>[)</code>左闭右开，即不包括结束）选择数组的一部分<strong>浅拷贝</strong>到一个新数组。</p><pre class="line-numbers language-Javascript" data-language="Javascript"><code class="language-Javascript">&#x2F;&#x2F; 0.0.2&#x2F;slice.jsconst arr &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];console.log(arr.slice(1, 5)); &#x2F;&#x2F; [ 1, 2, 3, 4 ]console.log(&#39;&#x3D;&gt;&#39;);console.log(arr); &#x2F;&#x2F; [ 0,1,2,3,4,5,6,7,8,9 ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>slice(1, 5)</code> 可见里面最多含 4（<code>5 - 1</code>） 个元素，而且从第 1 位开始取。</p><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>创建一个新数组并返回，新数组的每个元素由原数组中的每一个元素执行提供的函数而来，其中原始数组不会发生改变。</p><pre class="line-numbers language-Javascript" data-language="Javascript"><code class="language-Javascript">&#x2F;&#x2F; 0.0.2&#x2F;map.jsconst arr &#x3D; [1, 2, 3, 4];console.log(arr.map(i &#x3D;&gt; i * 10 - 5)); &#x2F;&#x2F; [ 5, 15, 25, 35 ]console.log(&#39;&#x3D;&gt;&#39;);console.log(arr); &#x2F;&#x2F; [ 1, 2, 3, 4 ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="every"><a href="#every" class="headerlink" title="every"></a>every</h2><p>检测数组所有元素是否都符合指定条件.</p><ul><li>如果数组中检测到有一个元素不满足，则整个表达式返回 <code>false</code>，且剩余的元素不会再进行检测；</li><li>如果所有元素都满足条件，则返回 <code>true</code>；</li></ul><pre class="line-numbers language-Javascript" data-language="Javascript"><code class="language-Javascript">&#x2F;&#x2F; 0.0.2&#x2F;every.jsconst arr &#x3D; [1, 2, 3, 4];console.log(arr.every(i &#x3D;&gt; i &gt; 2)); &#x2F;&#x2F; falseconsole.log(arr.every(i &#x3D;&gt; i &gt; 0)); &#x2F;&#x2F; trueconsole.log([].every(i &#x3D;&gt; i &#x3D;&#x3D;&#x3D; &#39;pr&#39;)); &#x2F;&#x2F; trueconsole.log(&#39;&#x3D;&gt;&#39;);console.log(arr); &#x2F;&#x2F; [ 1, 2, 3, 4 ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="some"><a href="#some" class="headerlink" title="some"></a>some</h2><p>用于检测数组中的元素是否满足指定条件。</p><ul><li>如果有一个元素满足条件，则表达式返回 <code>true</code>, 剩余的元素不会再执行检测;</li><li>如果没有满足条件的元素，则返回 <code>false</code>;</li></ul><pre class="line-numbers language-Javascript" data-language="Javascript"><code class="language-Javascript">&#x2F;&#x2F; 0.0.2&#x2F;some.jsconst arr &#x3D; [1, 2, 3, 4];console.log(arr.some(i &#x3D;&gt; i &gt; 4)); &#x2F;&#x2F; falseconsole.log(arr.some(i &#x3D;&gt; i &gt; 0)); &#x2F;&#x2F; trueconsole.log([].some(i &#x3D;&gt; i &#x3D;&#x3D;&#x3D; &#39;pr&#39;)); &#x2F;&#x2F; falseconsole.log(&#39;&#x3D;&gt;&#39;);console.log(arr); &#x2F;&#x2F; [ 1, 2, 3, 4 ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p>创建一个新的数组，新数组中的元素是通过检查符合条件的所有元素。</p><pre class="line-numbers language-Javascript" data-language="Javascript"><code class="language-Javascript">&#x2F;&#x2F; 0.0.2&#x2F;filter.jsconst arr &#x3D; [1, 2, 3, 4];console.log(arr.filter(i &#x3D;&gt; i &gt; 2)); &#x2F;&#x2F; [3, 4]console.log([].filter(i &#x3D;&gt; i &#x3D;&#x3D;&#x3D; &#39;pr&#39;)); &#x2F;&#x2F; []console.log(&#39;&#x3D;&gt;&#39;);console.log(arr); &#x2F;&#x2F; [ 1, 2, 3, 4 ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><p>用于调用数组的每个元素，并将元素传递给回调函数，返回 <code>undefiend</code>。</p><pre class="line-numbers language-Javascript" data-language="Javascript"><code class="language-Javascript">&#x2F;&#x2F; 0.0.2&#x2F;forEach.jsconst arr &#x3D; [1, 2, 3, 4];const copy &#x3D; [];console.log(arr.forEach(i &#x3D;&gt; &#123;    copy.push(i * 2);&#125;));console.log(copy); &#x2F;&#x2F; [ 2, 4, 6, 8 ]console.log(&#39;&#x3D;&gt;&#39;);console.log(arr); &#x2F;&#x2F; [ 1, 2, 3, 4 ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><p>接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。若是空数组是不会执行回调函数的;</p><pre class="line-numbers language-Javascript" data-language="Javascript"><code class="language-Javascript">&#x2F;&#x2F; 0.0.2&#x2F;reduce.jsconst arr &#x3D; [1, 2, 3, 4];console.log(arr.reduce((prev, cur) &#x3D;&gt; prev + cur, 0)); &#x2F;&#x2F; 10console.log(&#39;&#x3D;&gt;&#39;);console.log(arr); &#x2F;&#x2F; [ 1, 2, 3, 4 ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="返回新数组，改变原数组"><a href="#返回新数组，改变原数组" class="headerlink" title="返回新数组，改变原数组"></a>返回新数组，改变原数组</h1><h2 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h2><p>删除数组的最后一个元素，并返回这个元素（即被删除的元素）。</p><ul><li>如果数组为空，则不改变数组，返 <code>undefined</code>；</li></ul><pre class="line-numbers language-Javascript" data-language="Javascript"><code class="language-Javascript">&#x2F;&#x2F; 0.0.2&#x2F;pop.jsconst arr &#x3D; [1, 2, 3, 4];const arr1 &#x3D; [];console.log(arr.pop()); &#x2F;&#x2F; 4console.log(arr1.pop()); &#x2F;&#x2F; undefinedconsole.log(&#39;&#x3D;&gt;&#39;);console.log(arr); &#x2F;&#x2F; [ 1, 2, 3 ]console.log(arr1); &#x2F;&#x2F; []<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="push"><a href="#push" class="headerlink" title="push"></a>push</h2><p>将一个或多个元素添加到数组的末尾，返回值是<strong>改变后的数组的长度</strong>。</p><pre class="line-numbers language-Javascript" data-language="Javascript"><code class="language-Javascript">&#x2F;&#x2F; 0.0.2&#x2F;push.jsconst arr &#x3D; [1, 2, 3, 4];console.log(arr.push(5)); &#x2F;&#x2F; 5console.log(arr.push([1, 2])); &#x2F;&#x2F; 6console.log(&#39;&#x3D;&gt;&#39;);console.log(arr); &#x2F;&#x2F; [ 1, 2, 3, 4, 5, [ 1, 2 ] ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="shift"><a href="#shift" class="headerlink" title="shift"></a>shift</h2><p>删除数组的第一个元素，并返回这个元素。</p><pre class="line-numbers language-Javascript" data-language="Javascript"><code class="language-Javascript">&#x2F;&#x2F; 0.0.2&#x2F;shift.jsconst arr &#x3D; [1, 2, 3, 4];console.log(arr.shift()); &#x2F;&#x2F; 1console.log(&#39;&#x3D;&gt;&#39;);console.log(arr); &#x2F;&#x2F; [ 2, 3, 4 ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="unshift"><a href="#unshift" class="headerlink" title="unshift"></a>unshift</h2><p>将一个或多个元素添加到数组的开头，返回值是<strong>改变后的数组的长度</strong>。</p><pre class="line-numbers language-Javascript" data-language="Javascript"><code class="language-Javascript">&#x2F;&#x2F; 0.0.2&#x2F;unshift.jsconst arr &#x3D; [1, 2, 3, 4];console.log(arr.unshift(5, 6)); &#x2F;&#x2F; 6console.log(arr.unshift([1, 2])); &#x2F;&#x2F; 7console.log(&#39;&#x3D;&gt;&#39;);console.log(arr); &#x2F;&#x2F; [ [ 1, 2 ], 5, 6, 1, 2, 3, 4 ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><p>颠倒数组中元素的位置，返回该数组的引用。</p><pre class="line-numbers language-Javascript" data-language="Javascript"><code class="language-Javascript">&#x2F;&#x2F; 0.0.2&#x2F;reverse.jsconst arr &#x3D; [1, 2, 3, 4];const hello &#x3D; &#39;hello&#39;;const helloArray &#x3D; hello.split(&#39;&#39;);console.log(helloArray.reverse().join(&#39;&#39;)); &#x2F;&#x2F; ollehconsole.log(arr.reverse()); &#x2F;&#x2F; [ 4, 3, 2, 1 ]console.log(&#39;&#x3D;&gt;&#39;);console.log(arr); &#x2F;&#x2F; [ 4, 3, 2, 1 ]console.log(helloArray); &#x2F;&#x2F; [ &#39;o&#39;, &#39;l&#39;, &#39;l&#39;, &#39;e&#39;, &#39;h&#39; ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><p>对数组的元素进行排序，并返回数组。排序不一定是稳定的。默认排序顺序是根据字符串 Unicode 码点。</p><pre class="line-numbers language-Javascript" data-language="Javascript"><code class="language-Javascript">&#x2F;&#x2F; 0.0.2&#x2F;sort.jsconst arr &#x3D; [1, 2, 3, 4, 10, 12, 22];console.log(arr.sort()); &#x2F;&#x2F; [ 1, 10, 12, 2, 22, 3, 4];console.log(&#39;&#x3D;&gt;&#39;);console.log(arr); &#x2F;&#x2F; [ 1, 10, 12, 2, 22, 3, 4];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h2><p>向数组中添加&#x2F;删除项目，然后返回被删除项目。</p><pre class="line-numbers language-Javascript" data-language="Javascript"><code class="language-Javascript">&#x2F;&#x2F; 0.0.2&#x2F;splice.jsconst arr &#x3D; [1, 2, 3, 4];console.log(arr.splice(1, 2, 10, 12)); &#x2F;&#x2F; [ 2, 3 ]console.log(&#39;&#x3D;&gt;&#39;);console.log(arr); &#x2F;&#x2F; [ 1, 10, 12, 4 ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="你可以…"><a href="#你可以…" class="headerlink" title="你可以…"></a>你可以…</h1><ul><li><a href="https://juejin.cn/post/6844903897723568141">Javascript 数组常用算法</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS八种让人眼前一亮的HOVER效果</title>
      <link href="/2023/12/17/css-ba-chong-rang-ren-yan-qian-yi-liang-de-hover-xiao-guo/"/>
      <url>/2023/12/17/css-ba-chong-rang-ren-yan-qian-yi-liang-de-hover-xiao-guo/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS八种让人眼前一亮的HOVER效果"><a href="#CSS八种让人眼前一亮的HOVER效果" class="headerlink" title="CSS八种让人眼前一亮的HOVER效果"></a>CSS八种让人眼前一亮的HOVER效果</h1><h3 id="一-发送效果"><a href="#一-发送效果" class="headerlink" title="一.发送效果"></a>一.发送效果</h3><h4 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>send-btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>25px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>25px<span class="token punctuation">"</span></span> <span class="token attr-name">viewBox</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0 0 402 403<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.1<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2000/svg<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xlink</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xlink<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>g</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Page-1<span class="token punctuation">"</span></span> <span class="token attr-name">stroke</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span> <span class="token attr-name">stroke-width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span> <span class="token attr-name">fill-rule</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>evenodd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>g</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">transform</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>translate(-65.000000, -45.000000)<span class="token punctuation">"</span></span> <span class="token attr-name">fill-rule</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nonzero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>M462.409,75.155 L242.847,390.775 L139.609,372.39 L457.101,53.485 L460.81,57.194 C465.62,62.005 466.294,69.57 462.409,75.155 Z<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Path<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#55A4F9<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>M139.61,372.39 L121.225,269.152 L436.767,49.645 C442.397,45.729 450.023,46.408 454.873,51.257 L458.515,54.899 L139.61,372.39 Z M242.847,390.775 L263.045,370.577 L213.856,333.5 L242.847,390.775 Z<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Shape<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#1380E2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>polygon</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Path<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#4172CC<span class="token punctuation">"</span></span> <span class="token attr-name">points</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>184.157 303.801 121.225 269.153 139.61 250.768<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>polygon</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>M454.998,51.383 L184.176,303.82 L68.873,188.517 C63.654,183.298 65.694,174.417 72.667,171.998 L434.216,46.609 C441.486,44.088 449.557,45.942 454.998,51.383 Z M460.617,57.002 L213.837,333.48 L323.483,443.126 C328.702,448.345 337.583,446.305 340.002,439.332 L465.391,77.784 C467.912,70.514 466.058,62.443 460.617,57.002 Z<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Shape<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#A7D0FC<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>M465.391,77.785 L394.817,281.279 C382.208,317.636 335.906,328.271 308.696,301.061 C289.148,281.513 288.257,250.104 306.666,229.48 L460.617,57.002 C466.058,62.443 467.912,70.514 465.391,77.785 L465.391,77.785 Z M434.215,46.609 L230.721,117.183 C194.364,129.792 183.729,176.093 210.939,203.304 L214.46,206.825 C234.316,226.681 266.331,227.243 286.872,208.096 L454.998,51.383 C449.557,45.942 441.486,44.088 434.215,46.609 L434.215,46.609 Z<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Shape<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#C8E2FD<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>M199.979,352.149 L130.682,421.445 C129.706,422.422 128.426,422.91 127.147,422.91 C125.868,422.91 124.587,422.422 123.612,421.445 C121.659,419.493 121.659,416.327 123.612,414.375 L192.909,345.079 C194.86,343.126 198.028,343.126 199.979,345.079 C201.932,347.031 201.932,350.197 199.979,352.149 Z M206.519,375.661 C204.568,373.708 201.4,373.708 199.449,375.661 L164.095,411.016 C162.142,412.968 162.142,416.134 164.095,418.086 C165.071,419.063 166.351,419.551 167.63,419.551 C168.909,419.551 170.19,419.063 171.165,418.086 L206.519,382.731 C208.472,380.779 208.472,377.613 206.519,375.661 Z M149.95,425.158 L135.808,439.301 C133.856,441.253 133.856,444.419 135.809,446.372 C136.786,447.348 138.065,447.836 139.344,447.836 C140.623,447.836 141.904,447.348 142.88,446.371 L157.022,432.228 C158.974,430.276 158.974,427.11 157.021,425.157 C155.068,423.206 151.903,423.205 149.95,425.158 Z M194.765,414.816 L180.622,428.958 C178.669,430.911 178.669,434.077 180.621,436.029 C181.598,437.006 182.878,437.494 184.157,437.494 C185.436,437.494 186.717,437.006 187.692,436.03 L201.835,421.888 C203.788,419.935 203.788,416.769 201.836,414.817 C199.883,412.864 196.716,412.865 194.765,414.816 Z<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Shape<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#FFFFFF<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>g</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>g</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span>    Send  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h4><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">#send-btn&#123;  display: flex;  align-items: center;  justify-content: center;  height: 100vh;&#125;button &#123;  background: #5f55af;  border: 0;  border-radius: 5px;  padding: 10px 30px 10px 20px;  color: white;  text-transform: uppercase;  font-weight: bold;&#125;button svg &#123;  display: inline-block;  vertical-align: middle;  padding-right: 5px;&#125;button:hover svg &#123;  animation: fly 2s ease 1;&#125;@keyframes fly &#123;  0% &#123;    transform: translateX(0%);  &#125;  50% &#123;    transform: translateX(300%);  &#125;  100% &#123;    transform: translateX(0);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="GIF图"><a href="#GIF图" class="headerlink" title="GIF图"></a>GIF图</h4><p><img src="https://raw.githubusercontent.com/reng99/blogs/master/capture/hover-effect/hover_effect_send.gif" alt="hover\_effect\_send"></p><h3 id="二-霓虹效果"><a href="#二-霓虹效果" class="headerlink" title="二.霓虹效果"></a>二.霓虹效果</h3><h4 id="HTML-1"><a href="#HTML-1" class="headerlink" title="HTML"></a>HTML</h4><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;div id&#x3D;&quot;neon-btn&quot;&gt;  &lt;button class&#x3D;&quot;btn one&quot;&gt;Hover me&lt;&#x2F;button&gt;  &lt;button  class&#x3D;&quot;btn two&quot;&gt;Hover me&lt;&#x2F;button&gt;  &lt;button  class&#x3D;&quot;btn three&quot;&gt;Hover me&lt;&#x2F;button&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="CSS-1"><a href="#CSS-1" class="headerlink" title="CSS"></a>CSS</h4><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">#neon-btn &#123;  display: flex;  align-items: center;  justify-content: space-around;  height: 100vh;  background: #031628; &#125;.btn &#123;  border: 1px solid;  background-color: transparent;  text-transform: uppercase;  font-size: 14px;  padding: 10px 20px;  font-weight: 300;&#125;.one &#123;  color: #4cc9f0;&#125;.two &#123;  color: #f038ff; &#125;.three &#123;  color: #b9e769;&#125;.btn:hover &#123;  color: white;  border: 0;&#125;.one:hover &#123;  background-color: #4cc9f0;  -webkit-box-shadow: 10px 10px 99px 6px rgba(76,201,240,1);  -moz-box-shadow: 10px 10px 99px 6px rgba(76,201,240,1);  box-shadow: 10px 10px 99px 6px rgba(76,201,240,1);&#125;.two:hover &#123;  background-color: #f038ff;  -webkit-box-shadow: 10px 10px 99px 6px rgba(240, 56, 255, 1);  -moz-box-shadow: 10px 10px 99px 6px rgba(240, 56, 255, 1);  box-shadow: 10px 10px 99px 6px rgba(240, 56, 255, 1);&#125;.three:hover &#123;  background-color: #b9e769;  -webkit-box-shadow: 10px 10px 99px 6px rgba(185, 231, 105, 1);  -moz-box-shadow: 10px 10px 99px 6px rgba(185, 231, 105, 1);  box-shadow: 10px 10px 99px 6px rgba(185, 231, 105, 1);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="GIF图-1"><a href="#GIF图-1" class="headerlink" title="GIF图"></a>GIF图</h4><p><img src="https://raw.githubusercontent.com/reng99/blogs/master/capture/hover-effect/hover_effect_neon.gif" alt="hover\_effect\_neon">](<a href="https://raw.githubusercontent.com/reng99/blogs/master/capture/hover-effect/hover_effect_neon.gif">https://raw.githubusercontent.com/reng99/blogs/master/capture/hover-effect/hover_effect_neon.gif</a>)</p><h3 id="三-边框效果"><a href="#三-边框效果" class="headerlink" title="三.边框效果"></a>三.边框效果</h3><h4 id="HTML-2"><a href="#HTML-2" class="headerlink" title="HTML"></a>HTML</h4><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;div id&#x3D;&quot;draw-border&quot;&gt;  &lt;button&gt;Hover me&lt;&#x2F;button&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="CSS-2"><a href="#CSS-2" class="headerlink" title="CSS"></a>CSS</h4><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">#draw-border &#123;  display: flex;  align-items: center;  justify-content: center;  height: 100vh;&#125;button &#123;  border: 0;  background: none;  text-transform: uppercase;  color: #4361ee;  font-weight: bold;  position: relative;  outline: none;  padding: 10px 20px;  box-sizing: border-box;&#125;button::before, button::after &#123;  box-sizing: inherit;  position: absolute;  content: &#39;&#39;;  border: 2px solid transparent;  width: 0;  height: 0;&#125;button::after &#123;  bottom: 0;  right: 0;&#125;button::before &#123;  top: 0;  left: 0;&#125;button:hover::before, button:hover::after &#123;  width: 100%;  height: 100%;&#125;button:hover::before &#123;  border-top-color: #4361ee;  border-right-color: #4361ee;  transition: width 0.3s ease-out, height 0.3s ease-out 0.3s;&#125;button:hover::after &#123;  border-bottom-color: #4361ee;  border-left-color: #4361ee;  transition: border-color 0s ease-out 0.6s, width 0.3s ease-out 0.6s, height 0.3s ease-out 1s;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="GIF效果"><a href="#GIF效果" class="headerlink" title="GIF效果"></a>GIF效果</h4><p><img src="https://raw.githubusercontent.com/reng99/blogs/master/capture/hover-effect/hover_effect_draw.gif" alt="hover\_effect\_draw"></p><h3 id="四-圆形效果"><a href="#四-圆形效果" class="headerlink" title="四.圆形效果"></a>四.圆形效果</h3><h4 id="HTML-3"><a href="#HTML-3" class="headerlink" title="HTML"></a>HTML</h4><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;div id&#x3D;&quot;circle-btn&quot;&gt;  &lt;div class&#x3D;&quot;btn-container&quot;&gt;    &#x2F;&#x2F; 这里有一个svg元素    &lt;button&gt;Hover me&lt;&#x2F;button&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="CSS-3"><a href="#CSS-3" class="headerlink" title="CSS"></a>CSS</h4><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">#circle-btn &#123;   display: flex;  align-items: center;  justify-content: center;  height: 100vh;&#125;.btn-container &#123;  position: relative;  &#125;button &#123;  border: 0;  border-radius: 50px;  color: white;  background: #5f55af;  padding: 15px 20px 16px 60px;  text-transform: uppercase;  background: linear-gradient(to right, #f72585 50%, #5f55af 50%);  background-size: 200% 100%;  background-position: right bottom;  transition:all 2s ease;&#125;svg &#123;  background: #f72585;  padding: 8px;  border-radius: 50%;  position: absolute;  left: 0;  top: 0%;&#125;button:hover &#123;   background-position: left bottom;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="GIF图-2"><a href="#GIF图-2" class="headerlink" title="GIF图"></a>GIF图</h4><p><img src="https://raw.githubusercontent.com/reng99/blogs/master/capture/hover-effect/hover_effect_circle.gif" alt="hover\_effect\_circle"></p><h3 id="五-圆角效果"><a href="#五-圆角效果" class="headerlink" title="五.圆角效果"></a>五.圆角效果</h3><h4 id="HTML-4"><a href="#HTML-4" class="headerlink" title="HTML"></a>HTML</h4><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;div id&#x3D;&quot;border-btn&quot;&gt;  &lt;button&gt;Hover me&lt;&#x2F;button&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="CSS-4"><a href="#CSS-4" class="headerlink" title="CSS"></a>CSS</h4><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">#border-btn &#123;   display: flex;  align-items: center;  justify-content: center;  height: 100vh;&#125;button &#123;  border: 0;  border-radius: 10px;  background: #2ec4b6;  text-transform: uppercase;  color: white;  font-size: 16px;  font-weight: bold;  padding: 15px 30px;  outline: none;  position: relative;  transition: border-radius 3s;  -webkit-transition: border-radius 3s;&#125;button:hover &#123;   border-bottom-right-radius: 50px;   border-top-left-radius: 50px;   border-bottom-left-radius: 10px;   border-top-right-radius: 10px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="GIF图-3"><a href="#GIF图-3" class="headerlink" title="GIF图"></a>GIF图</h4><p><img src="https://raw.githubusercontent.com/reng99/blogs/master/capture/hover-effect/hover_effect_radius.gif" alt="hover\_effect\_radius"></p><h3 id="六-冰冻效果"><a href="#六-冰冻效果" class="headerlink" title="六.冰冻效果"></a>六.冰冻效果</h3><h4 id="HTML-5"><a href="#HTML-5" class="headerlink" title="HTML"></a>HTML</h4><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;div id&#x3D;&quot;frozen-btn&quot;&gt;  &lt;button class&#x3D;&quot;green&quot;&gt;Hover me&lt;&#x2F;button&gt;  &lt;button class&#x3D;&quot;purple&quot;&gt;Hover me&lt;&#x2F;button&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="CSS-5"><a href="#CSS-5" class="headerlink" title="CSS"></a>CSS</h4><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">#frozen-btn &#123;  display: flex;  align-items: center;  justify-content: center;  height: 100vh;&#125;button &#123;  border: 0;  margin: 20px;  text-transform: uppercase;  font-size: 20px;  font-weight: bold;  padding: 15px 50px;  border-radius: 50px;  color: white;  outline: none;  position: relative;&#125;button:before&#123;  content: &#39;&#39;;  display: block;  background: linear-gradient(to left, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.4) 50%);  background-size: 210% 100%;  background-position: right bottom;  height: 100%;  width: 100%;  position: absolute;  top: 0;  bottom:0;  right:0;  left: 0;  border-radius: 50px;  transition: all 1s;  -webkit-transition: all 1s;&#125;.green &#123;   background-image: linear-gradient(to right, #25aae1, #40e495);   box-shadow: 0 4px 15px 0 rgba(49, 196, 190, 0.75);&#125;.purple &#123;   background-image: linear-gradient(to right, #6253e1, #852D91);   box-shadow: 0 4px 15px 0 rgba(236, 116, 149, 0.75);&#125;  .purple:hover:before &#123;  background-position: left bottom;&#125;.green:hover:before &#123;  background-position: left bottom;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="GIF图-4"><a href="#GIF图-4" class="headerlink" title="GIF图"></a>GIF图</h4><p><img src="https://raw.githubusercontent.com/reng99/blogs/master/capture/hover-effect/hover_effect_frozen.gif" alt="hover\_effect\_frozen"></p><h3 id="七-闪亮效果"><a href="#七-闪亮效果" class="headerlink" title="七.闪亮效果"></a>七.闪亮效果</h3><h4 id="HTML-6"><a href="#HTML-6" class="headerlink" title="HTML"></a>HTML</h4><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;div id&#x3D;&quot;shiny-shadow&quot;&gt;  &lt;button&gt;&lt;span&gt;Hover me&lt;&#x2F;span&gt;&lt;&#x2F;button&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="CSS-6"><a href="#CSS-6" class="headerlink" title="CSS"></a>CSS</h4><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">#shiny-shadow &#123;  display: flex;  align-items: center;  justify-content: center;  height: 100vh;  background: #1c2541;&#125;button &#123;  border: 2px solid white;  background: transparent;  text-transform: uppercase;  color: white;  padding: 15px 50px;  outline: none;  overflow: hidden;  position: relative;&#125;span &#123;  z-index: 20;  &#125;button:after &#123;  content: &#39;&#39;;    display: block;    position: absolute;    top: -36px;    left: -100px;    background: white;    width: 50px;    height: 125px;    opacity: 20%;    transform: rotate(-45deg);&#125;button:hover:after &#123;  left: 120%;  transition: all 600ms cubic-bezier(0.3, 1, 0.2, 1);   -webkit-transition: all 600ms cubic-bezier(0.3, 1, 0.2, 1);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="GIF图-5"><a href="#GIF图-5" class="headerlink" title="GIF图"></a>GIF图</h4><p><img src="https://raw.githubusercontent.com/reng99/blogs/master/capture/hover-effect/hover_effect_shiny.gif" alt="hover\_effect\_shiny"></p><h3 id="八-加载效果"><a href="#八-加载效果" class="headerlink" title="八.加载效果"></a>八.加载效果</h3><h4 id="HTML-7"><a href="#HTML-7" class="headerlink" title="HTML"></a>HTML</h4><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;div id&#x3D;&quot;loading-btn&quot;&gt;  &lt;button&gt;&lt;span&gt;Hover me&lt;&#x2F;span&gt;&lt;&#x2F;button&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="CSS-7"><a href="#CSS-7" class="headerlink" title="CSS"></a>CSS</h4><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">#loading-btn &#123;  display: flex;  align-items: center;  justify-content: center;  height: 100vh;&#125;button &#123;  background: transparent;  border: 0;  border-radius: 0;  text-transform: uppercase;  font-weight: bold;  font-size: 20px;  padding: 15px 50px;  position: relative;&#125;button:before &#123;  transition: all 0.8s cubic-bezier(0.7, -0.5, 0.2, 2);  content: &#39;&#39;;  width: 1%;  height: 100%;  background: #ff5964;  position: absolute;  top: 0;  left: 0;&#125;button span &#123;  mix-blend-mode: darken;&#125;button:hover:before &#123;  background: #ff5964;  width: 100%;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="GIF图-6"><a href="#GIF图-6" class="headerlink" title="GIF图"></a>GIF图</h4><p><img src="https://raw.githubusercontent.com/reng99/blogs/master/capture/hover-effect/hover_effect_load.gif" alt="hover\_effect\_load"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>巧用伪元素<code>:before</code>、<code>:after</code>等，让你的页面按钮眼前一亮。原文链接：<a href="https://www.blog.duomly.com/html-button-hover-effects/">8 amazing HTML button hover effects, that will make your website memorable</a>。</p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>各种页面常见布局+知名网站实例分析+相关阅读推CSS</title>
      <link href="/2023/12/10/ge-chong-ye-mian-chang-jian-bu-ju-zhi-ming-wang-zhan-shi-li-fen-xi-xiang-guan-yue-du-tui-css/"/>
      <url>/2023/12/10/ge-chong-ye-mian-chang-jian-bu-ju-zhi-ming-wang-zhan-shi-li-fen-xi-xiang-guan-yue-du-tui-css/</url>
      
        <content type="html"><![CDATA[<h1 id="干货-各种常见布局实现-知名网站实例分析"><a href="#干货-各种常见布局实现-知名网站实例分析" class="headerlink" title="干货!各种常见布局实现+知名网站实例分析"></a>干货!各种常见布局实现+知名网站实例分析</h1><h2 id="各种页面常见布局-知名网站实例分析-相关阅读推荐"><a href="#各种页面常见布局-知名网站实例分析-相关阅读推荐" class="headerlink" title="各种页面常见布局+知名网站实例分析+相关阅读推荐"></a>各种页面常见布局+知名网站实例分析+相关阅读推荐</h2><p>**阅前必看：本文总结了常见的布局实现,每个方法的优缺点分析</p><blockquote><p>from github <a href="https://github.com/Sweet-KK/css-layout">github.com&#x2F;Sweet-KK&#x2F;cs…</a></p></blockquote><hr><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>注：PC端推荐用法后面加▲，至于移动端在兼容性允许的情况下优先考虑flex</p><p><a href="#1" title="#1">一、水平居中</a><br><a href="#1.1" title="#1.1">(1)文本&#x2F;行内元素&#x2F;行内块级元素▲</a><br><a href="#1.2" title="#1.2">(2)单个块级元素▲</a><br><a href="#1.3" title="#1.3">(3)多个块级元素</a><br><a href="#1.4" title="#1.4">(4)使用绝对定位实现▲</a><br><a href="#1.5" title="#1.5">(5)任意个元素(flex)</a><br><a href="#1.6" title="#1.6">★本章小结：</a></p><p><a href="#2" title="#2">二、垂直居中</a><br><a href="#2.1" title="#2.1">(1)单行文本&#x2F;行内元素&#x2F;行内块级元素▲</a><br><a href="#2.2" title="#2.2">(2)多行文本&#x2F;行内元素&#x2F;行内块级元素</a><br><a href="#2.3" title="#2.3">(3)图片▲</a><br><a href="#2.4" title="#2.4">(4)单个块级元素</a><br><a href="#2.4.1" title="#2.4.1">–(1) 使用tabel-cell实现:</a><br><a href="#2.4.2" title="#2.4.2">–(2) 使用绝对定位实现:▲</a><br><a href="#2.4.3" title="#2.4.3">–(3) 使用flex实现:</a><br><a href="#2.5" title="#2.5">(5)任意个元素(flex)</a><br><a href="#2.6" title="#2.6">★本章小结：</a></p><p><a href="#3" title="#3">三、水平垂直居中</a><br><a href="#3.1" title="#3.1">(1)行内&#x2F;行内块级&#x2F;图片▲</a><br><a href="#3.2" title="#3.2">(2)table-cell</a><br><a href="#3.3" title="#3.3">(3)button作为父元素</a><br><a href="#3.4" title="#3.4">(4)绝对定位▲</a><br><a href="#3.5" title="#3.5">(5)绝对居中▲</a><br><a href="#3.6" title="#3.6">(6)flex</a><br><a href="#3.7" title="#3.7">(7)视窗居中</a><br><a href="#3.8" title="#3.8">★本章小结：</a></p><p><a href="#4" title="#4">四、两列布局</a><br><a href="#4.1" title="#4.1">4.1 左列定宽,右列自适应</a><br><a href="#4.1.1" title="#4.1.1">–(1)利用float+margin实现</a><br><a href="#4.1.2" title="#4.1.2">–(2)利用float+margin(fix)实现</a><br><a href="#4.1.3" title="#4.1.3">–(3)使用float+overflow实现▲</a><br><a href="#4.1.4" title="#4.1.4">–(4)使用table实现▲</a><br><a href="#4.1.5" title="#4.1.5">–(5)使用绝对定位实现</a><br><a href="#4.1.6" title="#4.1.6">–(6)使用flex实现</a><br><a href="#4.1.7" title="#4.1.7">–(7)使用Grid实现</a><br><a href="#4.2" title="#4.2">4.2 左列自适应,右列定宽</a><br><a href="#4.2.1" title="#4.2.1">–(1)使用float+margin实现</a><br><a href="#4.2.2" title="#4.2.2">–(2)使用float+overflow实现▲</a><br><a href="#4.2.3" title="#4.2.3">–(3)使用table实现▲</a><br><a href="#4.2.4" title="#4.2.4">–(4)使用绝对定位实现</a><br><a href="#4.2.5" title="#4.2.5">–(5)使用flex实现</a><br><a href="#4.2.6" title="#4.2.6">–(6)使用Grid实现</a><br><a href="#4.3" title="#4.3">4.3 一列不定,一列自适应</a><br><a href="#4.3.1" title="#4.3.1">–(1)使用float+overflow实现▲</a><br><a href="#4.3.2" title="#4.3.2">–(2)使用flex实现</a><br><a href="#4.3.3" title="#4.3.3">–(3)使用Grid实现</a></p><p><a href="#5" title="#5">五、三列布局</a><br><a href="#5.1" title="#5.1">5.1 两列定宽,一列自适应</a><br><a href="#5.1.1" title="#5.1.1">–(1)使用float+margin实现</a><br><a href="#5.1.2" title="#5.1.2">–(2)使用float+overflow实现▲</a><br><a href="#5.1.3" title="#5.1.3">–(3)使用table实现▲</a><br><a href="#5.1.4" title="#5.1.4">–(4)使用flex实现</a><br><a href="#5.1.5" title="#5.1.5">–(5)使用Grid实现</a><br><a href="#5.2" title="#5.2">5.2 两侧定宽,中间自适应</a><br><a href="#5.2.1" title="#5.2.1">5.2.1 双飞翼布局方法</a><br><a href="#5.2.2" title="#5.2.2">5.2.2 圣杯布局方法</a><br><a href="#5.2.3" title="#5.2.3">5.2.3 使用Grid实现</a><br><a href="#5.2.4" title="#5.2.4">5.2.4 其他方法</a><br><a href="#5.2.4.1" title="#5.2.4.1">–(1)使用table实现▲</a><br><a href="#5.2.4.2" title="#5.2.4.2">–(2)使用flex实现</a><br><a href="#5.2.4.3" title="#5.2.4.3">–(3)使用position实现▲</a></p><p><a href="#6" title="#6">六、多列布局</a><br><a href="#6.1" title="#6.1">6.1 等宽布局</a><br><a href="#6.1.1" title="#6.1.1">6.1.1四列等宽</a><br><a href="#6.1.1.1" title="#6.1.1.1">–(1)使用float实现▲</a><br><a href="#6.1.1.2" title="#6.1.1.2">–(2)使用table实现▲</a><br><a href="#6.1.1.3" title="#6.1.1.3">–(3)使用flex实现</a><br><a href="#6.1.2" title="#6.1.2">6.1.2多列等宽</a><br><a href="#6.1.2.1" title="#6.1.2.1">–(1)使用float实现▲</a><br><a href="#6.1.2.2" title="#6.1.2.2">–(2)使用table实现▲</a><br><a href="#6.1.2.3" title="#6.1.2.3">–(3)使用flex实现</a><br><a href="#6.1.2.4" title="#6.1.2.4">–(4)使用Grid实现</a><br><a href="#6.2" title="#6.2">6.2 九宫格布局</a><br><a href="#6.2.1" title="#6.2.1">–(1)使用table实现▲</a><br><a href="#6.2.2" title="#6.2.2">–(2)使用flex实现</a><br><a href="#6.2.3" title="#6.2.3">–(3)使用Grid实现</a><br><a href="#6.3" title="#6.3">6.3 栅格系统▲</a><br><a href="#6.3.1" title="#6.3.1">–(1)用Less生成</a></p><p><a href="#7" title="#7">七、全屏布局</a><br><a href="#7.1" title="#7.1">(1)使用绝对定位实现▲</a><br><a href="#7.2" title="#7.2">(2)使用flex实现</a><br><a href="#7.3" title="#7.3">(3)使用Grid实现</a></p><p><a href="#8" title="#8">八、网站实例布局分析：</a><br><a href="#8.1" title="#8.1">8.1 小米官网</a><br><a href="#8.1.1" title="#8.1.1">8.1.1 兼容IE9+的方法</a><br><a href="#8.1.1.1" title="#8.1.1.1">–(1)页面整体</a><br><a href="#8.1.1.2" title="#8.1.1.2">–(2)局部——header</a><br><a href="#8.1.1.3" title="#8.1.1.3">–(3)局部——top</a><br><a href="#8.1.1.4" title="#8.1.1.4">–(4)局部——center</a><br><a href="#8.1.1.5" title="#8.1.1.5">–(5)局部——bottom</a><br><a href="#8.1.1.6" title="#8.1.1.6">–(6)局部——footer</a><br><a href="#8.1.1.7" title="#8.1.1.7">–(7)全部代码(优化后)</a><br><a href="#8.1.2" title="#8.1.2">8.1.2 Flexbox+Grid搭配用法(未来…)</a></p><p><a href="#9" title="#9">九、其他补充：</a><br><a href="#9.1" title="#9.1">9.1 移动端viewport</a><br><a href="#9.1.1" title="#9.1.1">–设置viewport：</a><br><a href="#9.1.2" title="#9.1.2">–阅读推荐：</a><br><a href="#9.2" title="#9.2">9.2 媒体查询</a><br><a href="#9.2.1" title="#9.2.1">–代码示例：</a><br><a href="#9.2.2" title="#9.2.2">–阅读推荐：</a><br><a href="#9.3" title="#9.3">9.3 REM</a><br><a href="#9.3.1" title="#9.3.1">–阅读推荐：</a><br><a href="#9.4" title="#9.4">9.4 Flexbox</a><br><a href="#9.4.1" title="#9.4.1">–阅读推荐：</a><br><a href="#9.5" title="#9.5">9.5 CSS Grid</a><br><a href="#9.5.1" title="#9.5.1">–阅读推荐：</a></p><p><a href="#99" title="#99">End：感谢</a><br>​<br>​<br>​</p><h3 id="一、水平居中"><a href="#一、水平居中" class="headerlink" title="一、水平居中"></a>一、水平居中</h3><p><em>一,二,三章都是parent+son的简单结构,html代码和效果图就不贴出来了,第四章以后才有</em></p><h5 id="1-文本-行内元素-行内块级元素▲"><a href="#1-文本-行内元素-行内块级元素▲" class="headerlink" title="(1)文本&#x2F;行内元素&#x2F;行内块级元素▲"></a>(1)文本&#x2F;行内元素&#x2F;行内块级元素▲</h5><p>原理：text-align只控制行内内容(文字、行内元素、行内块级元素)如何相对他的块父元素对齐</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    text-align: center;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>优缺点</p><ul><li>优点：简单快捷，容易理解，兼容性非常好</li><li>缺点：只对行内内容有效；属性会继承影响到后代行内内容；如果子元素宽度大于父元素宽度则无效，只有后代行内内容中宽度小于设置text-align属性的元素宽度的时候，才会水平居中</li></ul><h5 id="2-单个块级元素▲"><a href="#2-单个块级元素▲" class="headerlink" title="(2)单个块级元素▲"></a>(2)单个块级元素▲</h5><p>原理：根据<a href="https://www.w3.org/TR/CSS21/visudet.html#Computing_widths_and_margins">规范</a> 介绍得很清楚了，有这么一种情况：在margin有节余的同时如果左右margin设置了auto，将会均分剩余空间。另外，如果上下的margin设置了auto，其计算值为0</p><pre class="line-numbers language-none"><code class="language-none">#son&#123;    width: 100px; &#x2F;*必须定宽*&#x2F;    margin: 0 auto;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点</p><ul><li>优点：简单；兼容性好</li><li>缺点：必须定宽，并且值不能为auto；宽度要小于父元素，否则无效</li></ul><h5 id="3-多个块级元素"><a href="#3-多个块级元素" class="headerlink" title="(3)多个块级元素"></a>(3)多个块级元素</h5><p>原理：text-align只控制行内内容(文字、行内元素、行内块级元素)如何相对他的块父元素对齐</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    text-align: center;&#125;.son&#123;    display: inline-block; &#x2F;*改为行内或者行内块级形式，以达到text-align对其生效*&#x2F;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点</p><ul><li>优点：简单，容易理解，兼容性非常好</li><li>缺点：只对行内内容有效；属性会继承影响到后代行内内容；块级改为inline-block换行、空格会产生元素间隔</li></ul><h5 id="4-使用绝对定位实现▲"><a href="#4-使用绝对定位实现▲" class="headerlink" title="(4)使用绝对定位实现▲"></a>(4)使用绝对定位实现▲</h5><p>原理：子绝父相，top、right、bottom、left的值是相对于父元素尺寸的，然后margin或者transform是相对于自身尺寸的，组合使用达到水平居中的目的</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    height: 200px;    width: 200px;  &#x2F;*定宽*&#x2F;    position: relative;  &#x2F;*父相*&#x2F;    background-color: #f00;&#125;#son&#123;    position: absolute;  &#x2F;*子绝*&#x2F;    left: 50%;  &#x2F;*父元素宽度一半,这里等同于left:100px*&#x2F;    transform: translateX(-50%);  &#x2F;*自身宽度一半,等同于margin-left: -50px;*&#x2F;    width: 100px;  &#x2F;*定宽*&#x2F;    height: 100px;    background-color: #00ff00;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点</p><ul><li>优点：使用margin-left兼容性好；不管是块级还是行内元素都可以实现</li><li>缺点：代码较多；脱离文档流；使用margin-left需要知道宽度值；使用transform兼容性不好（ie9+）</li></ul><h5 id="5-任意个元素-flex"><a href="#5-任意个元素-flex" class="headerlink" title="(5)任意个元素(flex)"></a>(5)任意个元素(flex)</h5><p>原理：就是设置当前主轴对齐方式为居中。说不上为什么，flex无非就是主轴侧轴是重点，然后就是排列方式的设置，可以去看看文末的flex阅读推荐</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    display: flex;    justify-content: center;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点</p><ul><li>优点：功能强大；简单方便；容易理解</li><li>缺点：PC端<a href="https://link.juejin.cn/?target=https://caniuse.com/%23search=flex" title="https://caniuse.com/#search=flex">兼容性不好</a>，移动端（Android4.0+）</li></ul><h5 id="本章小结："><a href="#本章小结：" class="headerlink" title="本章小结："></a>本章小结：</h5><ul><li>对于水平居中，我们应该先考虑，哪些元素有自带的居中效果，最先想到的应该就是 <code>text-align:center</code> 了，但是这个只对行内内容有效，所以我们要使用 <code>text-align:center</code> 就必须将子元素设置为 <code>display: inline;</code> 或者 <code>display: inline-block;</code> ；</li><li>其次就是考虑能不能用<code>margin: 0 auto;</code> ，因为这都是一两句代码能搞定的事，实在不行就是用绝对定位去实现了。</li><li>移动端能用flex就用flex，简单方便，灵活并且功能强大，无愧为网页布局的一大利器！</li></ul><h3 id="二、垂直居中"><a href="#二、垂直居中" class="headerlink" title="二、垂直居中"></a>二、垂直居中</h3><p><em>一,二,三章都是parent+son的简单结构,html代码和效果图就不贴出来了,第四章以后才有</em></p><h5 id="1-单行文本-行内元素-行内块级元素▲"><a href="#1-单行文本-行内元素-行内块级元素▲" class="headerlink" title="(1)单行文本&#x2F;行内元素&#x2F;行内块级元素▲"></a>(1)单行文本&#x2F;行内元素&#x2F;行内块级元素▲</h5><p>原理：line-height的最终表现是通过inline box实现的，而无论inline box所占据的高度是多少（无论比文字大还是比文字小），其占据的空间都是与文字内容公用水平中垂线的。</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    height: 150px;    line-height: 150px;  &#x2F;*与height等值*&#x2F;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点</p><ul><li>优点：简单；兼容性好</li><li>缺点：只能用于单行行内内容；要知道高度的值</li></ul><h5 id="2-多行文本-行内元素-行内块级元素"><a href="#2-多行文本-行内元素-行内块级元素" class="headerlink" title="(2)多行文本&#x2F;行内元素&#x2F;行内块级元素"></a>(2)多行文本&#x2F;行内元素&#x2F;行内块级元素</h5><p>原理同上</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;  &#x2F;*或者用span把所有文字包裹起来，设置display：inline-block转换成图片的方式解决*&#x2F;    height: 150px;    line-height: 30px;  &#x2F;*元素在页面呈现为5行,则line-height的值为height&#x2F;5*&#x2F;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点</p><ul><li>优点：简单；兼容性好</li><li>缺点：只能用于行内内容；需要知道高度和最终呈现多少行来计算出line-height的值，建议用span包裹多行文本</li></ul><h5 id="3-图片▲"><a href="#3-图片▲" class="headerlink" title="(3)图片▲"></a>(3)图片▲</h5><p>原理：<a href="https://link.juejin.cn/?target=http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/" title="http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/">vertical-align和line-height的基友关系</a></p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    height: 150px;    line-height: 150px;    font-size: 0;&#125;img#son&#123;vertical-align: middle;&#125; &#x2F;*默认是基线对齐，改为middle*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点</p><ul><li>优点：简单；兼容性好</li><li>缺点：需要添加font-size: 0; 才可以完全的垂直居中；不过需要主要，html#parent包裹img之间需要有换行或空格</li></ul><h5 id="4-单个块级元素"><a href="#4-单个块级元素" class="headerlink" title="(4)单个块级元素"></a>(4)单个块级元素</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;son&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="4-1-使用tabel-cell实现"><a href="#4-1-使用tabel-cell实现" class="headerlink" title="(4-1) 使用tabel-cell实现:"></a>(4-1) 使用tabel-cell实现:</h6><p>原理：CSS Table，使表格内容对齐方式为middle</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    display: table-cell;    vertical-align: middle;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点</p><ul><li>优点：简单；宽高不定；兼容性好（ie8+）</li><li>缺点：设置tabl-cell的元素，宽度和高度的值设置百分比无效，需要给它的父元素设置display: table; 才生效；table-cell不感知margin，在父元素上设置table-row等属性，也会使其不感知height；设置float或position会对默认布局造成破坏，可以考虑为之增加一个父div定义float等属性；内容溢出时会自动撑开父元素</li></ul><h6 id="4-2-使用绝对定位实现-▲"><a href="#4-2-使用绝对定位实现-▲" class="headerlink" title="(4-2) 使用绝对定位实现:▲"></a>(4-2) 使用绝对定位实现:▲</h6><pre class="line-numbers language-none"><code class="language-none">&#x2F;*原理：子绝父相，top、right、bottom、left的值是相对于父元素尺寸的，然后margin或者transform是相对于自身尺寸的，组合使用达到水平居中的目的*&#x2F;#parent&#123;    height: 150px;    position: relative;  &#x2F;*父相*&#x2F;&#125;#son&#123;    position: absolute;  &#x2F;*子绝*&#x2F;    top: 50%;  &#x2F;*父元素高度一半,这里等同于top:75px;*&#x2F;    transform: translateY(-50%);  &#x2F;*自身高度一半,这里等同于margin-top:-25px;*&#x2F;    height: 50px;&#125;&#x2F;*优缺点- 优点：使用margin-top兼容性好；不管是块级还是行内元素都可以实现- 缺点：代码较多；脱离文档流；使用margin-top需要知道高度值；使用transform兼容性不好（ie9+）*&#x2F;或&#x2F;*原理：当top、bottom为0时,margin-top&amp;bottom会无限延伸占满空间并且平分*&#x2F;#parent&#123;position: relative;&#125;#son&#123;    position: absolute;    margin: auto 0;    top: 0;    bottom: 0;    height: 50px;&#125;&#x2F;*优缺点- 优点：简单;兼容性较好(ie8+)- 缺点：脱离文档流*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="4-3-使用flex实现"><a href="#4-3-使用flex实现" class="headerlink" title="(4-3) 使用flex实现:"></a>(4-3) 使用flex实现:</h6><p>原理：flex设置对齐方式罢了，请查阅文末flex阅读推荐</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    display: flex;    align-items: center;&#125;或#parent&#123;display: flex;&#125;#son&#123;align-self: center;&#125;或&#x2F;*原理：这个尚未搞清楚，应该是flex使margin上下边界无限延伸至剩余空间并平分了*&#x2F;#parent&#123;display: flex;&#125;#son&#123;margin: auto 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点</p><ul><li>优点：简单灵活；功能强大</li><li>缺点：PC端<a href="https://link.juejin.cn/?target=https://caniuse.com/%23search=flex" title="https://caniuse.com/#search=flex">兼容性不好</a>，移动端（Android4.0+）</li></ul><h5 id="5-任意个元素-flex-1"><a href="#5-任意个元素-flex-1" class="headerlink" title="(5)任意个元素(flex)"></a>(5)任意个元素(flex)</h5><p>原理：flex设置对齐方式罢了，请查阅文末flex阅读推荐</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    display: flex;    align-items: center;&#125;或#parent&#123;    display: flex;&#125;.son&#123;    align-self: center;&#125;或 #parent&#123;    display: flex;    flex-direction: column;    justify-content: center;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点</p><ul><li>优点：简单灵活；功能强大</li><li>缺点：PC端<a href="https://link.juejin.cn/?target=https://caniuse.com/%23search=flex" title="https://caniuse.com/#search=flex">兼容性不好</a>，移动端（Android4.0+）</li></ul><h5 id="★本章小结："><a href="#★本章小结：" class="headerlink" title="★本章小结："></a>★本章小结：</h5><ul><li>对于垂直居中，最先想到的应该就是 <code>line-height</code> 了，但是这个只能用于行内内容；</li><li>其次就是考虑能不能用<code>vertical-align: middle;</code> ，不过这个一定要熟知原理才能用得顺手，建议看下<a href="https://link.juejin.cn/?target=http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/" title="http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/">vertical-align和line-height的基友关系</a> ；</li><li>然后便是绝对定位，虽然代码多了点，但是胜在适用于不同情况；</li><li>移动端兼容性允许的情况下能用flex就用flex</li></ul><h3 id="三、水平垂直居中"><a href="#三、水平垂直居中" class="headerlink" title="三、水平垂直居中"></a>三、水平垂直居中</h3><p><em>一,二,三章都是parent+son的简单结构,html代码和效果图就不贴出来了,第四章以后才有</em></p><h5 id="1-行内-行内块级-图片▲"><a href="#1-行内-行内块级-图片▲" class="headerlink" title="(1)行内&#x2F;行内块级&#x2F;图片▲"></a>(1)行内&#x2F;行内块级&#x2F;图片▲</h5><p>原理：<code>text-align: center;</code> 控制行内内容相对于块父元素水平居中,然后就是<code>line-height</code>和<code>vertical-align</code>的基友关系使其垂直居中，<code>font-size: 0;</code> 是为了消除近似居中的bug</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    height: 150px;    line-height: 150px;  &#x2F;*行高的值与height相等*&#x2F;    text-align: center;    font-size: 0;   &#x2F;*消除幽灵空白节点的bug*&#x2F;&#125;#son&#123;    &#x2F;*display: inline-block;*&#x2F;  &#x2F;*如果是块级元素需改为行内或行内块级才生效*&#x2F;    vertical-align: middle;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点</p><ul><li>优点：代码简单；兼容性好（ie8+）</li><li>缺点：只对行内内容有效；需要添加<code>font-size: 0;</code> 才可以完全的垂直居中；不过需要注意html中#parent包裹#son之间需要有换行或空格；熟悉<code>line-height</code>和<code>vertical-align</code>的基友关系较难</li></ul><h5 id="2-table-cell"><a href="#2-table-cell" class="headerlink" title="(2)table-cell"></a>(2)table-cell</h5><p>原理：CSS Table，使表格内容垂直对齐方式为middle,然后根据是行内内容还是块级内容采取不同的方式达到水平居中</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    height: 150px;    width: 200px;    display: table-cell;    vertical-align: middle;    &#x2F;*text-align: center;*&#x2F;   &#x2F;*如果是行内元素就添加这个*&#x2F;&#125;#son&#123;    &#x2F;*margin: 0 auto;*&#x2F;    &#x2F;*如果是块级元素就添加这个*&#x2F;    width: 100px;    height: 50px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点</p><ul><li>优点：简单；适用于宽度高度未知情况；兼容性好（ie8+）</li><li>缺点：设置tabl-cell的元素，宽度和高度的值设置百分比无效，需要给它的父元素设置<code>display: table;</code> 才生效；table-cell不感知margin，在父元素上设置table-row等属性，也会使其不感知height；设置float或position会对默认布局造成破坏，可以考虑为之增加一个父div定义float等属性；内容溢出时会自动撑开父元素</li></ul><h5 id="3-button作为父元素"><a href="#3-button作为父元素" class="headerlink" title="(3)button作为父元素"></a>(3)button作为父元素</h5><p>原理：button的默认样式，再把需要居中的元素表现形式改为行内或行内块级就好</p><pre class="line-numbers language-none"><code class="language-none">button#parent&#123;  &#x2F;*改掉button默认样式就好了,不需要居中处理*&#x2F;    height: 150px;    width: 200px;    outline: none;      border: none;&#125;#son&#123;    display: inline-block; &#x2F;*button自带text-align: center,改为行内水平居中生效*&#x2F;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点</p><ul><li>优点：简单方便，充分利用默认样式</li><li>缺点：只适用于行内内容；需要清除部分默认样式；水平垂直居中兼容性很好，但是ie下点击会有凹陷效果！</li></ul><h5 id="4-绝对定位"><a href="#4-绝对定位" class="headerlink" title="(4)绝对定位"></a>(4)绝对定位</h5><p>原理：子绝父相，top、right、bottom、left的值是相对于父元素尺寸的，然后margin或者transform是相对于自身尺寸的，组合使用达到几何上的水平垂直居中</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    position: relative;&#125;#son&#123;    position: absolute;    top: 50%;    left: 50%;    &#x2F;*定宽高时等同于margin-left:负自身宽度一半;margin-top:负自身高度一半;*&#x2F;    transform: translate(-50%,-50%); &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点</p><ul><li>优点：使用margin兼容性好；不管是块级还是行内元素都可以实现</li><li>缺点：代码较多；脱离文档流；使用margin需要知道宽高；使用transform兼容性不好（ie9+）</li></ul><h5 id="5-绝对居中"><a href="#5-绝对居中" class="headerlink" title="(5)绝对居中"></a>(5)绝对居中</h5><p>原理：当top、bottom为0时,margin-top&amp;bottom设置auto的话会无限延伸占满空间并且平分；当left、right为0时,margin-left&amp;right设置auto的话会无限延伸占满空间并且平分</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    position: relative;&#125;#son&#123;    position: absolute;    margin: auto;    width: 100px;    height: 50px;    top: 0;    bottom: 0;    left: 0;    right: 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点</p><ul><li>优点：无需关注宽高；兼容性较好(ie8+)</li><li>缺点：代码较多；脱离文档流</li></ul><h5 id="6-flex"><a href="#6-flex" class="headerlink" title="(6)flex"></a>(6)flex</h5><p>原理：flex设置对齐方式罢了，请查阅文末flex阅读推荐</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    display: flex;&#125;#son&#123;    margin: auto;&#125;或#parent&#123;    display: flex;    justify-content: center;    align-items: center;&#125;或#parent&#123;    display: flex;    justify-content: center;&#125;#son&#123;    align-self: center;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点</p><ul><li>优点：简单灵活；功能强大</li><li>缺点：PC端<a href="https://link.juejin.cn/?target=https://caniuse.com/%23search=flex" title="https://caniuse.com/#search=flex">兼容性不好</a>，移动端（Android4.0+）</li></ul><h5 id="7-视窗居中"><a href="#7-视窗居中" class="headerlink" title="(7)视窗居中"></a>(7)视窗居中</h5><p>原理：vh为视口单位，视口即文档可视的部分，50vh就是视口高度的50&#x2F;100，设置50vh上边距再</p><pre class="line-numbers language-none"><code class="language-none">#son&#123;&#x2F;*0如果去掉，则会多出滚动条并且上下都是50vh的margin。如果去掉就给body加上overflow:hidden;*&#x2F;    margin: 50vh auto 0;      transform: translateY(-50%);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点</p><ul><li>优点：简单；容易理解；两句代码达到屏幕水平垂直居中</li><li>缺点：兼容性不好（ie9+，Android4.4+）</li></ul><h5 id="★本章小结：-1"><a href="#★本章小结：-1" class="headerlink" title="★本章小结："></a>★本章小结：</h5><ul><li>一般情况下，水平垂直居中，我们最常用的就是绝对定位加负边距了，缺点就是需要知道宽高，使用transform倒是可以不需要，但是兼容性不好（ie9+）；</li><li>其次就是绝对居中，绝对定位设置top、left、right、bottom为0，然后<code>margin:auto;</code> 让浏览器自动平分边距以达到水平垂直居中的目的；</li><li>如果是行内&#x2F;行内块级&#x2F;图片这些内容，可以优先考虑<code>line-height</code>和<code>vertical-align</code> 结合使用，不要忘了还有<code>text-align</code> ，这个方法代码其实不多，就是理解原理有点困难，想要熟练应对各种情况还需好好研究；</li><li>移动端兼容性允许的情况下能用flex就用flex。</li></ul><h3 id="四、两列布局"><a href="#四、两列布局" class="headerlink" title="四、两列布局"></a>四、两列布局</h3><h4 id="4-1-左列定宽-右列自适应"><a href="#4-1-左列定宽-右列自适应" class="headerlink" title="4.1 左列定宽,右列自适应"></a>4.1 左列定宽,右列自适应</h4><p>效果:</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a136d179e360~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp"></p><h5 id="1-利用float-margin实现"><a href="#1-利用float-margin实现" class="headerlink" title="(1)利用float+margin实现"></a>(1)利用float+margin实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;&lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#left &#123;    background-color: #f00;    float: left;    width: 100px;    height: 500px;&#125;#right &#123;    background-color: #0f0;    height: 500px;    margin-left: 100px; &#x2F;*大于等于#left的宽度*&#x2F;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-利用float-margin-fix-实现"><a href="#2-利用float-margin-fix-实现" class="headerlink" title="(2)利用float+margin(fix)实现"></a>(2)利用float+margin(fix)实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;&lt;div id&#x3D;&quot;right-fix&quot;&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#left &#123;    background-color: #f00;    float: left;    width: 100px;    height: 500px;&#125;#right-fix &#123;    float: right;    width: 100%;    margin-left: -100px; &#x2F;*正值大于或等于#left的宽度,才能显示在同一行*&#x2F;&#125;#right&#123;    margin-left: 100px; &#x2F;*大于或等于#left的宽度*&#x2F;    background-color: #0f0;    height: 500px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-使用float-overflow实现"><a href="#3-使用float-overflow实现" class="headerlink" title="(3)使用float+overflow实现"></a>(3)使用float+overflow实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;&lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#left &#123;    background-color: #f00;    float: left;    width: 100px;    height: 500px;&#125;#right &#123;    background-color: #0f0;    height: 500px;    overflow: hidden; &#x2F;*触发bfc达到自适应*&#x2F;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点：</p><ul><li>优点：代码简单，容易理解，无需关注定宽的宽度，利用bfc达到自适应效果</li><li>缺点：浮动脱离文档流，需要手动清除浮动，否则会产生高度塌陷；不支持ie6</li></ul><h5 id="4-使用table实现"><a href="#4-使用table实现" class="headerlink" title="(4)使用table实现"></a>(4)使用table实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    width: 100%;    display: table;    height: 500px;&#125;#left &#123;    width: 100px;    background-color: #f00;&#125;#right &#123;    background-color: #0f0;&#125;#left,#right&#123;    display: table-cell;  &#x2F;*利用单元格自动分配宽度*&#x2F;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点：</p><ul><li>优点：代码简单，容易理解，无需关注定宽的宽度，利用单元格自动分配达到自适应效果</li><li>缺点：margin失效；设置间隔比较麻烦；不支持ie8-</li></ul><h5 id="5-使用绝对定位实现"><a href="#5-使用绝对定位实现" class="headerlink" title="(5)使用绝对定位实现"></a>(5)使用绝对定位实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    position: relative;  &#x2F;*子绝父相*&#x2F;&#125;#left &#123;    position: absolute;    top: 0;    left: 0;    background-color: #f00;    width: 100px;    height: 500px;&#125;#right &#123;    position: absolute;    top: 0;    left: 100px;  &#x2F;*值大于等于#left的宽度*&#x2F;    right: 0;    background-color: #0f0;    height: 500px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="6-使用flex实现"><a href="#6-使用flex实现" class="headerlink" title="(6)使用flex实现"></a>(6)使用flex实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    width: 100%;    height: 500px;    display: flex;&#125;#left &#123;    width: 100px;    background-color: #f00;&#125;#right &#123;    flex: 1; &#x2F;*均分了父元素剩余空间*&#x2F;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="7-使用Grid实现"><a href="#7-使用Grid实现" class="headerlink" title="(7)使用Grid实现"></a>(7)使用Grid实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent &#123;    width: 100%;    height: 500px;    display: grid;    grid-template-columns: 100px auto;  &#x2F;*设定2列就ok了,auto换成1fr也行*&#x2F;&#125;#left &#123;    background-color: #f00;&#125;#right &#123;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-左列自适应-右列定宽"><a href="#4-2-左列自适应-右列定宽" class="headerlink" title="4.2 左列自适应,右列定宽"></a>4.2 左列自适应,右列定宽</h4><p>效果:</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a136cf625c79~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><h5 id="1-使用float-margin实现"><a href="#1-使用float-margin实现" class="headerlink" title="(1)使用float+margin实现"></a>(1)使用float+margin实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列自适应&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    height: 500px;    padding-left: 100px;  &#x2F;*抵消#left的margin-left以达到#parent水平居中*&#x2F;&#125;#left &#123;    width: 100%;    height: 500px;    float: left;    margin-left: -100px; &#x2F;*正值等于#right的宽度*&#x2F;    background-color: #f00;&#125;#right &#123;    height: 500px;    width: 100px;    float: right;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-使用float-overflow实现"><a href="#2-使用float-overflow实现" class="headerlink" title="(2)使用float+overflow实现"></a>(2)使用float+overflow实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列自适应&lt;&#x2F;div&gt;   &lt;!--顺序要换一下--&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#left &#123;    overflow: hidden;  &#x2F;*触发bfc*&#x2F;    height: 500px;    background-color: #f00;&#125;#right &#123;    margin-left: 10px;  &#x2F;*margin需要定义在#right中*&#x2F;    float: right;    width: 100px;    height: 500px;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点：</p><ul><li>优点：代码简单，容易理解，无需关注定宽的宽度，利用bfc达到自适应效果</li><li>缺点：浮动脱离文档流，需要手动清除浮动，否则会产生高度塌陷；不支持ie6</li></ul><h5 id="3-使用table实现"><a href="#3-使用table实现" class="headerlink" title="(3)使用table实现"></a>(3)使用table实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列自适应&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    width: 100%;    height: 500px;    display: table;&#125;#left &#123;    background-color: #f00;    display: table-cell;&#125;#right &#123;    width: 100px;    background-color: #0f0;    display: table-cell;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点：</p><ul><li>优点：代码简单，容易理解，无需关注定宽的宽度，利用单元格自动分配达到自适应效果</li><li>缺点：margin失效；设置间隔比较麻烦；不支持ie8-</li></ul><h5 id="4-使用绝对定位实现"><a href="#4-使用绝对定位实现" class="headerlink" title="(4)使用绝对定位实现"></a>(4)使用绝对定位实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列自适应&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    position: relative;  &#x2F;*子绝父相*&#x2F;&#125;#left &#123;    position: absolute;    top: 0;    left: 0;    right: 100px;  &#x2F;*大于等于#rigth的宽度*&#x2F;    background-color: #f00;    height: 500px;&#125;#right &#123;    position: absolute;    top: 0;    right: 0;    background-color: #0f0;    width: 100px;    height: 500px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-使用flex实现"><a href="#5-使用flex实现" class="headerlink" title="(5)使用flex实现"></a>(5)使用flex实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列自适应&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    height: 500px;    display: flex;&#125;#left &#123;    flex: 1;    background-color: #f00;&#125;#right &#123;    width: 100px;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="6-使用Grid实现"><a href="#6-使用Grid实现" class="headerlink" title="(6)使用Grid实现"></a>(6)使用Grid实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列自适应&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent &#123;    height: 500px;    display: grid;    grid-template-columns: auto 100px;  &#x2F;*设定2列,auto换成1fr也行*&#x2F;&#125;#left &#123;    background-color: #f00;&#125;#right &#123;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-一列不定-一列自适应"><a href="#4-3-一列不定-一列自适应" class="headerlink" title="4.3 一列不定,一列自适应"></a>4.3 一列不定,一列自适应</h4><p>(盒子宽度随着内容增加或减少发生变化,另一个盒子自适应)</p><p>效果图:</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a136d1676e57~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p>变化后:</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a136d19c5afc~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><h5 id="1-使用float-overflow实现"><a href="#1-使用float-overflow实现" class="headerlink" title="(1)使用float+overflow实现"></a>(1)使用float+overflow实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列不定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#left &#123;    margin-right: 10px;    float: left;  &#x2F;*只设置浮动,不设宽度*&#x2F;    height: 500px;    background-color: #f00;&#125;#right &#123;    overflow: hidden;  &#x2F;*触发bfc*&#x2F;    height: 500px;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点：</p><ul><li>优点：代码简单，容易理解，无需关注宽度，利用bfc达到自适应效果</li><li>缺点：浮动脱离文档流，需要手动清除浮动，否则会产生高度塌陷；不支持ie6</li></ul><h5 id="2-使用flex实现"><a href="#2-使用flex实现" class="headerlink" title="(2)使用flex实现"></a>(2)使用flex实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列不定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    display: flex;&#125;#left &#123; &#x2F;*不设宽度*&#x2F;    margin-right: 10px;    height: 500px;    background-color: #f00;&#125;#right &#123;    height: 500px;    background-color: #0f0;    flex: 1;  &#x2F;*均分#parent剩余的部分*&#x2F;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-使用Grid实现"><a href="#3-使用Grid实现" class="headerlink" title="(3)使用Grid实现"></a>(3)使用Grid实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列不定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    display: grid;    grid-template-columns: auto 1fr;  &#x2F;*auto和1fr换一下顺序就是左列自适应,右列不定宽了*&#x2F;&#125;#left &#123;    margin-right: 10px;    height: 500px;    background-color: #f00;&#125;#right &#123;    height: 500px;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>左列自适应,右列不定宽同理(参考4.1和4.3对应代码示例)</em></p><h3 id="五、三列布局"><a href="#五、三列布局" class="headerlink" title="五、三列布局"></a>五、三列布局</h3><h4 id="5-1-两列定宽-一列自适应"><a href="#5-1-两列定宽-一列自适应" class="headerlink" title="5.1 两列定宽,一列自适应"></a>5.1 两列定宽,一列自适应</h4><p>效果图:</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a136d1ea53c5~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><h5 id="1-使用float-margin实现-1"><a href="#1-使用float-margin实现-1" class="headerlink" title="(1)使用float+margin实现"></a>(1)使用float+margin实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;center&quot;&gt;中间定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    min-width: 310px; &#x2F;*100+10+200,防止宽度不够,子元素换行*&#x2F;&#125;#left &#123;    margin-right: 10px;  &#x2F;*#left和#center间隔*&#x2F;    float: left;    width: 100px;    height: 500px;    background-color: #f00;&#125;#center&#123;    float: left;    width: 200px;    height: 500px;    background-color: #eeff2b;&#125;#right &#123;    margin-left: 320px;  &#x2F;*等于#left和#center的宽度之和加上间隔,多出来的就是#right和#center的间隔*&#x2F;    height: 500px;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-使用float-overflow实现-1"><a href="#2-使用float-overflow实现-1" class="headerlink" title="(2)使用float+overflow实现"></a>(2)使用float+overflow实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;center&quot;&gt;中间定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    min-width: 320px; &#x2F;*100+10+200+20,防止宽度不够,子元素换行*&#x2F;&#125;#left &#123;    margin-right: 10px; &#x2F;*间隔*&#x2F;    float: left;    width: 100px;    height: 500px;    background-color: #f00;&#125;#center&#123;    margin-right: 10px; &#x2F;*在此定义和#right的间隔*&#x2F;    float: left;    width: 200px;    height: 500px;    background-color: #eeff2b;&#125;#right &#123;    overflow: hidden;  &#x2F;*触发bfc*&#x2F;    height: 500px;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点：</p><ul><li>优点：代码简单，容易理解，无需关注定宽的宽度，利用bfc达到自适应效果</li><li>缺点：浮动脱离文档流，需要手动清除浮动，否则会产生高度塌陷；不支持ie6</li></ul><h5 id="3-使用table实现-1"><a href="#3-使用table实现-1" class="headerlink" title="(3)使用table实现"></a>(3)使用table实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;center&quot;&gt;中间定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent &#123;    width: 100%;     height: 520px; &#x2F;*抵消上下间距10*2的高度影响*&#x2F;    margin: -10px 0;  &#x2F;*抵消上下边间距10的位置影响*&#x2F;    display: table;    &#x2F;*左右两边间距大了一点,子元素改用padding设置盒子间距就没有这个问题*&#x2F;    border-spacing: 10px;  &#x2F;*关键!!!设置间距*&#x2F;&#125;#left &#123;    display: table-cell;    width: 100px;    background-color: #f00;&#125;#center &#123;    display: table-cell;    width: 200px;    background-color: #eeff2b;&#125;#right &#123;    display: table-cell;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点：</p><ul><li>优点：代码简单，容易理解，无需关注定宽的宽度，利用单元格自动分配达到自适应效果</li><li>缺点：margin失效；设置间隔比较麻烦；不支持ie8-</li></ul><h5 id="4-使用flex实现"><a href="#4-使用flex实现" class="headerlink" title="(4)使用flex实现"></a>(4)使用flex实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;center&quot;&gt;中间定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent &#123;    height: 500px;    display: flex;&#125;#left &#123;    margin-right: 10px;  &#x2F;*间距*&#x2F;    width: 100px;    background-color: #f00;&#125;#center &#123;    margin-right: 10px;  &#x2F;*间距*&#x2F;    width: 200px;    background-color: #eeff2b;&#125;#right &#123;    flex: 1;  &#x2F;*均分#parent剩余的部分达到自适应*&#x2F;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-使用Grid实现"><a href="#5-使用Grid实现" class="headerlink" title="(5)使用Grid实现"></a>(5)使用Grid实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;center&quot;&gt;中间定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent &#123;    height: 500px;    display: grid;    grid-template-columns: 100px 200px auto; &#x2F;*设置3列,固定第一第二列的宽度,第三列auto或者1fr*&#x2F;&#125;#left &#123;    margin-right: 10px;  &#x2F;*间距*&#x2F;    background-color: #f00;&#125;#center &#123;    margin-right: 10px;  &#x2F;*间距*&#x2F;    background-color: #eeff2b;&#125;#right &#123;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-2-两侧定宽-中间自适应"><a href="#5-2-两侧定宽-中间自适应" class="headerlink" title="5.2 两侧定宽,中间自适应"></a>5.2 两侧定宽,中间自适应</h4><h5 id="5-2-1-双飞翼布局方法"><a href="#5-2-1-双飞翼布局方法" class="headerlink" title="5.2.1 双飞翼布局方法"></a>5.2.1 双飞翼布局方法</h5><p>效果图:</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a136d1cc24f8~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;header&quot;&gt;&lt;&#x2F;div&gt;&lt;!--中间栏需要放在前面--&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;center&quot;&gt;        &lt;div id&#x3D;&quot;center_inbox&quot;&gt;中间自适应&lt;&#x2F;div&gt;        &lt;hr&gt;  &lt;!--方便观察原理--&gt;    &lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;div id&#x3D;&quot;footer&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#header &#123;    height: 60px;    background-color: #ccc;&#125;#left &#123;    float: left;    width: 100px;    height: 500px;    margin-left: -100%; &#x2F;*调整#left的位置,值等于自身宽度*&#x2F;    background-color: #f00;    opacity: 0.5;&#125;#center &#123;    height: 500px;    float: left;    width: 100%;    background-color: #eeff2b;&#125;#center_inbox&#123;    height: 480px;    border: 1px solid #000;    margin: 0 220px 0 120px;  &#x2F;*关键!!!左右边界等于左右盒子的宽度,多出来的为盒子间隔*&#x2F;&#125;#right &#123;    float: left;    width: 200px;    height: 500px;    margin-left: -200px;  &#x2F;*使right到指定的位置,值等于自身宽度*&#x2F;    background-color: #0f0;    opacity: 0.5;&#125;#footer &#123;    clear: both;  &#x2F;*注意清除浮动!!*&#x2F;    height: 60px;    background-color: #ccc;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-2-2-圣杯布局方法"><a href="#5-2-2-圣杯布局方法" class="headerlink" title="5.2.2 圣杯布局方法"></a>5.2.2 圣杯布局方法</h5><p>效果图:</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a136f3b3a4aa~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;header&quot;&gt;&lt;&#x2F;div&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;!--#center需要放在前面--&gt;    &lt;div id&#x3D;&quot;center&quot;&gt;中间自适应        &lt;hr&gt;    &lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;div id&#x3D;&quot;footer&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#header&#123;    height: 60px;    background-color: #ccc;&#125;#parent &#123;    box-sizing: border-box;    height: 500px;    padding: 0 215px 0 115px;  &#x2F;*为了使#center摆正,左右padding分别等于左右盒子的宽,可以结合左右盒子相对定位的left调整间距*&#x2F;&#125;#left &#123;    margin-left: -100%;  &#x2F;*使#left上去一行*&#x2F;    position: relative;    left: -115px;  &#x2F;*相对定位调整#left的位置,正值大于或等于自身宽度*&#x2F;    float: left;    width: 100px;    height: 500px;    background-color: #f00;    opacity: 0.5;&#125;#center &#123;    float: left;    width: 100%;  &#x2F;*由于#parent的padding,达到自适应的目的*&#x2F;    height: 500px;    box-sizing: border-box;    border: 1px solid #000;    background-color: #eeff2b;&#125;#right &#123;    position: relative;    left: 215px; &#x2F;*相对定位调整#right的位置,大于或等于自身宽度*&#x2F;    width: 200px;    height: 500px;    margin-left: -200px;  &#x2F;*使#right上去一行*&#x2F;    float: left;    background-color: #0f0;    opacity: 0.5;&#125;#footer&#123;    height: 60px;    background-color: #ccc;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-2-3-使用Grid实现"><a href="#5-2-3-使用Grid实现" class="headerlink" title="5.2.3 使用Grid实现"></a>5.2.3 使用Grid实现</h5><p>效果图:</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a136ee8a6109~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;header&quot;&gt;&lt;&#x2F;div&gt;    &lt;!--#center需要放在前面--&gt;    &lt;div id&#x3D;&quot;center&quot;&gt;中间自适应        &lt;hr&gt;    &lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;footer&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent &#123;    height: 500px;    display: grid;    grid-template-columns: 100px auto 200px; &#x2F;*设定3列*&#x2F;    grid-template-rows: 60px auto 60px; &#x2F;*设定3行*&#x2F;    &#x2F;*设置网格区域分布*&#x2F;    grid-template-areas:         &quot;header header header&quot;         &quot;leftside main rightside&quot;         &quot;footer footer footer&quot;;&#125;#header &#123;    grid-area: header; &#x2F;*指定在哪个网格区域*&#x2F;    background-color: #ccc;&#125;#left &#123;    grid-area: leftside;    background-color: #f00;    opacity: 0.5;&#125;#center &#123;    grid-area: main; &#x2F;*指定在哪个网格区域*&#x2F;    margin: 0 15px; &#x2F;*设置间隔*&#x2F;    border: 1px solid #000;    background-color: #eeff2b;&#125;#right &#123;    grid-area: rightside; &#x2F;*指定在哪个网格区域*&#x2F;    background-color: #0f0;    opacity: 0.5;&#125;#footer &#123;    grid-area: footer; &#x2F;*指定在哪个网格区域*&#x2F;    background-color: #ccc;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-2-4-其他方法"><a href="#5-2-4-其他方法" class="headerlink" title="5.2.4 其他方法"></a>5.2.4 其他方法</h5><p>效果图:</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a136f71b55c0~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><h5 id="1-使用table实现"><a href="#1-使用table实现" class="headerlink" title="(1)使用table实现"></a>(1)使用table实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;center&quot;&gt;中间自适应&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent &#123;    width: 100%;    height: 500px;    display: table;&#125;#left &#123;    display: table-cell;    width: 100px;    background-color: #f00;&#125;#center &#123;    display: table-cell;    background-color: #eeff2b;&#125;#right &#123;    display: table-cell;    width: 200px;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点：</p><ul><li>优点：代码简洁，容易理解；</li><li>缺点：margin失效，采用border-spacing表格两边的间隔无法消除；不支持ie8-</li></ul><h5 id="2-使用flex实现-1"><a href="#2-使用flex实现-1" class="headerlink" title="(2)使用flex实现"></a>(2)使用flex实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;center&quot;&gt;中间自适应&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent &#123;    height: 500px;    display: flex;&#125;#left &#123;    width: 100px;    background-color: #f00;&#125;#center &#123;    flex: 1;  &#x2F;*均分#parent剩余的部分*&#x2F;    background-color: #eeff2b;&#125;#right &#123;    width: 200px;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-使用position实现"><a href="#3-使用position实现" class="headerlink" title="(3)使用position实现"></a>(3)使用position实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;center&quot;&gt;中间自适应&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent &#123;    position: relative; &#x2F;*子绝父相*&#x2F;&#125;#left &#123;    position: absolute;    top: 0;    left: 0;    width: 100px;    height: 500px;    background-color: #f00;&#125;#center &#123;    height: 500px;    margin-left: 100px; &#x2F;*大于等于#left的宽度,或者给#parent添加同样大小的padding-left*&#x2F;    margin-right: 200px;  &#x2F;*大于等于#right的宽度,或者给#parent添加同样大小的padding-right*&#x2F;    background-color: #eeff2b;&#125;#right &#123;    position: absolute;    top: 0;    right: 0;    width: 200px;    height: 500px;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点：</p><ul><li>优点：容易理解，兼容性比较好</li><li>缺点：需手动计算宽度确定边距；脱离文档流；代码繁多</li></ul><h3 id="六、多列布局"><a href="#六、多列布局" class="headerlink" title="六、多列布局"></a>六、多列布局</h3><h4 id="6-1-等宽布局"><a href="#6-1-等宽布局" class="headerlink" title="6.1 等宽布局"></a>6.1 等宽布局</h4><h5 id="6-1-1-四列等宽"><a href="#6-1-1-四列等宽" class="headerlink" title="6.1.1 四列等宽"></a>6.1.1 四列等宽</h5><h5 id="1-使用float实现"><a href="#1-使用float实现" class="headerlink" title="(1)使用float实现"></a>(1)使用float实现</h5><p>效果图:</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a136f835236f~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;1 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;2 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;3 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;4 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent &#123;    margin-left: -20px; &#x2F;*使整体内容看起来居中,抵消padding-left的影响*&#x2F;&#125;.column&#123;    padding-left: 20px;  &#x2F;*盒子的边距*&#x2F;    width: 25%;    float: left;    box-sizing: border-box;    border: 1px solid #000;    background-clip: content-box; &#x2F;*背景色从内容开始绘制,方便观察*&#x2F;    height: 500px;&#125;.column:nth-child(odd)&#123;    background-color: #f00;&#125;.column:nth-child(even)&#123;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点：</p><ul><li>优点：代码简单，容易理解；兼容性较好</li><li>缺点：需要手动清除浮动，否则会产生高度塌陷</li></ul><h5 id="2-使用table实现"><a href="#2-使用table实现" class="headerlink" title="(2)使用table实现"></a>(2)使用table实现</h5><p>效果图:</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a136ffc5df62~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;1 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;2 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;3 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;4 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent &#123;    height: 540px;  &#x2F;*抵消上下边20*2间距的高度影响*&#x2F;    display: table;    margin: -20px 0;  &#x2F;*抵消上下边20*2间距的位置影响*&#x2F;    &#x2F;*两边离页面间距较大,改用子元素设置padding来当成间隔就不会有这样的问题*&#x2F;    border-spacing: 20px;  &#x2F;*设置间距*&#x2F;&#125;.column&#123;    display: table-cell;&#125;.column:nth-child(odd)&#123;    background-color: #f00;&#125;.column:nth-child(even)&#123;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点：</p><ul><li>优点：代码简单，容易理解；无需关注宽度，单元格自动等分</li><li>缺点：margin失效；设置间隔比较麻烦；不支持ie8-</li></ul><h5 id="3-使用flex实现"><a href="#3-使用flex实现" class="headerlink" title="(3)使用flex实现"></a>(3)使用flex实现</h5><p>效果图:</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a137025dbc4c~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;1 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;2 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;3 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;4 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent &#123;    margin-left: -15px;  &#x2F;*使内容看起来居中*&#x2F;    height: 500px;    display: flex;&#125;.column&#123;    flex: 1; &#x2F;*一起平分#parent*&#x2F;    margin-left: 15px; &#x2F;*设置间距*&#x2F;&#125;.column:nth-child(odd)&#123;    background-color: #f00;&#125;.column:nth-child(even)&#123;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="多列等宽"><a href="#多列等宽" class="headerlink" title="多列等宽"></a>多列等宽</h5><p>效果图:</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a137120f99b7~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><h5 id="1-使用float实现-1"><a href="#1-使用float实现-1" class="headerlink" title="(1)使用float实现"></a>(1)使用float实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;1 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;2 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;3 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;4 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;5 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;6 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent &#123;    height: 500px;&#125;.column&#123;    float: left;  &#x2F;*添加浮动*&#x2F;    width: 16.66666666666667%;  &#x2F;*100÷列数,得出百分比*&#x2F;    height: 500px;&#125;.column:nth-child(odd)&#123;    background-color: #f00;&#125;.column:nth-child(even)&#123;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点：</p><ul><li>优点：代码简单，容易理解；兼容性较好</li><li>缺点：需要手动清除浮动，否则会产生高度塌陷</li></ul><h5 id="2-使用table实现-1"><a href="#2-使用table实现-1" class="headerlink" title="(2)使用table实现"></a>(2)使用table实现</h5><p>html代码</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;1 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;2 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;3 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;4 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;5 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;6 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent &#123;    width: 100%;    height: 500px;    display: table;&#125;.column&#123;    display: table-cell; &#x2F;*无需关注列数,单元格自动平分*&#x2F;&#125;.column:nth-child(odd)&#123;    background-color: #f00;&#125;.column:nth-child(even)&#123;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点：</p><ul><li>优点：代码简单，容易理解；无需关注宽度。单元格自动等分</li><li>缺点：margin失效；设置间隔比较麻烦；不兼容ie8-</li></ul><h5 id="3-使用flex实现-1"><a href="#3-使用flex实现-1" class="headerlink" title="(3)使用flex实现"></a>(3)使用flex实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;1 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;2 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;3 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;4 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;5 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;6 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent &#123;    height: 500px;    display: flex;&#125;.column&#123;    flex: 1;  &#x2F;*无需关注列数,一起平分#parent*&#x2F;&#125;.column:nth-child(odd)&#123;    background-color: #f00;&#125;.column:nth-child(even)&#123;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-使用Grid实现"><a href="#4-使用Grid实现" class="headerlink" title="(4)使用Grid实现"></a>(4)使用Grid实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;1 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;2 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;3 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;4 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;5 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;6 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent &#123;    height: 500px;    display: grid;    grid-template-columns: repeat(6,1fr);  &#x2F;*6就是列数*&#x2F;&#125;.column&#123;&#125;.column:nth-child(odd)&#123;    background-color: #f00;&#125;.column:nth-child(even)&#123;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-2-九宫格布局"><a href="#6-2-九宫格布局" class="headerlink" title="6.2 九宫格布局"></a>6.2 九宫格布局</h4><p>效果图:</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a1371229c1cb~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><h5 id="1-使用table实现-1"><a href="#1-使用table实现-1" class="headerlink" title="(1)使用table实现"></a>(1)使用table实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div class&#x3D;&quot;row&quot;&gt;        &lt;div class&#x3D;&quot;item&quot;&gt;1&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;item&quot;&gt;2&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;item&quot;&gt;3&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;row&quot;&gt;        &lt;div class&#x3D;&quot;item&quot;&gt;4&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;item&quot;&gt;5&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;item&quot;&gt;6&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;row&quot;&gt;        &lt;div class&#x3D;&quot;item&quot;&gt;7&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;item&quot;&gt;8&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;item&quot;&gt;9&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent &#123;    width: 1200px;    height: 500px;    margin: 0 auto;    display: table;&#125;.row &#123;    display: table-row;&#125;.item &#123;    border: 1px solid #000;    display: table-cell;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点：</p><ul><li>优点：代码简洁，容易理解；</li><li>缺点：margin失效，采用border-spacing表格两边的间隔无法消除；不支持ie8-</li></ul><h5 id="2-使用flex实现-2"><a href="#2-使用flex实现-2" class="headerlink" title="(2)使用flex实现"></a>(2)使用flex实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div class&#x3D;&quot;row&quot;&gt;        &lt;div class&#x3D;&quot;item&quot;&gt;1&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;item&quot;&gt;2&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;item&quot;&gt;3&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;row&quot;&gt;        &lt;div class&#x3D;&quot;item&quot;&gt;4&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;item&quot;&gt;5&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;item&quot;&gt;6&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;row&quot;&gt;        &lt;div class&#x3D;&quot;item&quot;&gt;7&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;item&quot;&gt;8&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;item&quot;&gt;9&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent &#123;    width: 1200px;    height: 500px;    margin: 0 auto;    display: flex;    flex-direction: column;&#125;.row &#123;    display: flex;    flex: 1;&#125;.item &#123;    flex: 1;    border: 1px solid #000;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-使用Grid实现-1"><a href="#3-使用Grid实现-1" class="headerlink" title="(3)使用Grid实现"></a>(3)使用Grid实现</h5><p><em>CSS Grid非常强大,可以实现各种各样的三维布局,可查阅本文结尾的阅读推荐</em></p><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div class&#x3D;&quot;item&quot;&gt;1&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;item&quot;&gt;2&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;item&quot;&gt;3&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;item&quot;&gt;4&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;item&quot;&gt;5&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;item&quot;&gt;6&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;item&quot;&gt;7&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;item&quot;&gt;8&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;item&quot;&gt;9&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent &#123;    width: 1200px;    height: 500px;    margin: 0 auto;    display: grid;    grid-template-columns: repeat(3, 1fr); &#x2F;*等同于1fr 1fr 1fr,此为重复的合并写法*&#x2F;    grid-template-rows: repeat(3, 1fr);  &#x2F;*等同于1fr 1fr 1fr,此为重复的合并写法*&#x2F;&#125;.item &#123;    border: 1px solid #000;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-3-栅格系统"><a href="#6-3-栅格系统" class="headerlink" title="6.3 栅格系统"></a>6.3 栅格系统</h4><p>优缺点：</p><ul><li>优点：代码简洁，容易理解；提高页面内容的流动性，能适应多种设备；</li></ul><h5 id="1-用Less生成"><a href="#1-用Less生成" class="headerlink" title="(1)用Less生成"></a>(1)用Less生成</h5><pre class="line-numbers language-none"><code class="language-none">&#x2F;*生成栅格系统*&#x2F;@media screen and (max-width: 768px)&#123;  .generate-columns(12);     &#x2F;*此处设置生成列数*&#x2F;  .generate-columns(@n, @i: 1) when (@i &lt;&#x3D; @n) &#123;    .column-xs-@&#123;i&#125; &#123;      width: (@i * 100% &#x2F; @n);    &#125;    .generate-columns(@n, (@i+1));  &#125;&#125;@media screen and (min-width: 768px)&#123;  .generate-columns(12);    &#x2F;*此处设置生成列数*&#x2F;  .generate-columns(@n, @i: 1) when (@i &lt;&#x3D; @n) &#123;    .column-sm-@&#123;i&#125; &#123;      width: (@i * 100% &#x2F; @n);    &#125;    .generate-columns(@n, (@i+1));  &#125;&#125;div[class^&#x3D;&quot;column-xs-&quot;]&#123;float: left;&#125;div[class^&#x3D;&quot;column-sm-&quot;]&#123;float: left;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译后的CSS代码:</p><pre class="line-numbers language-none"><code class="language-none">@media screen and (max-width: 768px) &#123;  .column-xs-1 &#123;  width: 8.33333333%;  &#125;  .column-xs-2 &#123;  width: 16.66666667%;  &#125;  .column-xs-3 &#123;  width: 25%;  &#125;  .column-xs-4 &#123;  width: 33.33333333%;  &#125;  .column-xs-5 &#123;  width: 41.66666667%;  &#125;  .column-xs-6 &#123;  width: 50%;  &#125;  .column-xs-7 &#123;  width: 58.33333333%;  &#125;  .column-xs-8 &#123;  width: 66.66666667%;  &#125;  .column-xs-9 &#123;  width: 75%;  &#125;  .column-xs-10 &#123;  width: 83.33333333%;  &#125;  .column-xs-11 &#123;  width: 91.66666667%;  &#125;  .column-xs-12 &#123;  width: 100%;  &#125;&#125;@media screen and (min-width: 768px) &#123;  .column-sm-1 &#123;  width: 8.33333333%;  &#125;  .column-sm-2 &#123;  width: 16.66666667%;  &#125;  .column-sm-3 &#123;  width: 25%;  &#125;  .column-sm-4 &#123;  width: 33.33333333%;  &#125;  .column-sm-5 &#123;  width: 41.66666667%;  &#125;  .column-sm-6 &#123;  width: 50%;  &#125;  .column-sm-7 &#123;  width: 58.33333333%;  &#125;  .column-sm-8 &#123;  width: 66.66666667%;  &#125;  .column-sm-9 &#123;  width: 75%;  &#125;  .column-sm-10 &#123;  width: 83.33333333%;  &#125;  .column-sm-11 &#123;  width: 91.66666667%;  &#125;    .column-sm-12 &#123;  width: 100%;  &#125;&#125;div[class^&#x3D;&quot;column-xs-&quot;]&#123;float: left;&#125;div[class^&#x3D;&quot;column-sm-&quot;]&#123;float: left;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="七、全屏布局"><a href="#七、全屏布局" class="headerlink" title="七、全屏布局"></a>七、全屏布局</h3><p>效果图:</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a13716f2d8c3~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><h5 id="1-使用绝对定位实现"><a href="#1-使用绝对定位实现" class="headerlink" title="(1)使用绝对定位实现"></a>(1)使用绝对定位实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;top&quot;&gt;top&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;left&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;right&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;bottom&quot;&gt;bottom&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">html, body, #parent &#123;height: 100%;overflow: hidden;&#125;#parent &gt; div &#123;    border: 1px solid #000;&#125;#top &#123;    position: absolute;    top: 0;    left: 0;    right: 0;    height: 100px;&#125;#left &#123;    position: absolute;    top: 100px;  &#x2F;*值大于等于#top的高度*&#x2F;    left: 0;    bottom: 50px;  &#x2F;*值大于等于#bottom的高度*&#x2F;    width: 200px;&#125;#right &#123;    position: absolute;    overflow: auto;    left: 200px;  &#x2F;*值大于等于#left的宽度*&#x2F;    right: 0;    top: 100px;  &#x2F;*值大于等于#top的高度*&#x2F;    bottom: 50px;  &#x2F;*值大于等于#bottom的高度*&#x2F;&#125;#bottom &#123;    position: absolute;    left: 0;    right: 0;    bottom: 0;    height: 50px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点：</p><ul><li>优点：容易理解</li><li>缺点：代码繁多；需要计算好各个盒子的宽高；</li></ul><h5 id="2-使用flex实现-3"><a href="#2-使用flex实现-3" class="headerlink" title="(2)使用flex实现"></a>(2)使用flex实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;top&quot;&gt;top&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;middle&quot;&gt;        &lt;div id&#x3D;&quot;left&quot;&gt;left&lt;&#x2F;div&gt;        &lt;div id&#x3D;&quot;right&quot;&gt;right&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;bottom&quot;&gt;bottom&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">*&#123;    margin: 0;    padding: 0;&#125;html,body,#parent&#123;    height:100%;&#125;#parent &#123;    display: flex;    flex-direction: column;&#125;#top &#123;    height: 100px;&#125;#bottom &#123;    height: 50px;&#125;#middle &#123;    flex: 1;    display: flex;&#125;#left &#123;    width: 200px;&#125;#right &#123;    flex: 1;    overflow: auto;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-使用Grid实现-2"><a href="#3-使用Grid实现-2" class="headerlink" title="(3)使用Grid实现"></a>(3)使用Grid实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;top&quot;&gt;top&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;left&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;right&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;bottom&quot;&gt;bottom&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">*&#123;    margin: 0;    padding: 0;&#125;html, body, #parent &#123;    height: 100%;&#125;#parent &#123;    width: 100%;    height: 100%;    display: grid;    &#x2F;*分成2列,第一列宽度200px,第二列1fr平分剩余的部分,此处换成auto也行*&#x2F;    grid-template-columns: 200px 1fr;      &#x2F;*分成3行,第一行高度100px,第二行auto为自适应,此处换成1fr也行,第3行高度为50px*&#x2F;    grid-template-rows: 100px auto 50px;     &#x2F;*定义网格区域分布*&#x2F;    grid-template-areas:        &quot;header header&quot;        &quot;aside main&quot;        &quot;footer footer&quot;;&#125;#parent&gt;div&#123;    border: 1px solid #000;&#125;#top&#123;    grid-area: header;  &#x2F;*指定在哪个网格区域*&#x2F;&#125;#left&#123;    grid-area: aside;  &#x2F;*指定在哪个网格区域*&#x2F;&#125;#right&#123;    grid-area: main;  &#x2F;*指定在哪个网格区域*&#x2F;&#125;#bottom&#123;    grid-area: footer;  &#x2F;*指定在哪个网格区域*&#x2F;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="八、网站实例布局分析："><a href="#八、网站实例布局分析：" class="headerlink" title="八、网站实例布局分析："></a>八、网站实例布局分析：</h3><p>由于方法众多,分析的时候想到哪种用哪种了，只要IE9和谷歌上表现一致，我就不一一测试其他浏览器了，如果有什么问题或意见，请留言！</p><h4 id="8-1-小米官网"><a href="#8-1-小米官网" class="headerlink" title="8.1 小米官网"></a>8.1 小米官网</h4><p><a href="https://www.mi.com/">https://www.mi.com/</a></p><h5 id="8-1-1-兼容IE9-的方法"><a href="#8-1-1-兼容IE9-的方法" class="headerlink" title="8.1.1 兼容IE9+的方法"></a>8.1.1 兼容IE9+的方法</h5><h5 id="1-页面整体"><a href="#1-页面整体" class="headerlink" title="(1)页面整体"></a>(1)页面整体</h5><p>整个页面我们可以分成顶、上、中、下、底五个结构,如图所示:</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a137243cef07~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div class&#x3D;&quot;header&quot;&gt;&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;top&quot;&gt;&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;center&quot;&gt;&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;bottom&quot;&gt;&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;footer&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">*&#123;  &#x2F;*为了方便,就这样清空默认样式了*&#x2F;    margin: 0;    padding: 0;    box-sizing: border-box;    list-style: none;&#125;body&#123;    background-color: #f5f5f5;&#125;.header&#123;    margin-bottom: 20px;    height: 40px;    background-color: #333;&#125;.top&#123;    height: 1210px;    background-color: #fff;&#125;.center&#123;    width: 1226px;    margin: 0 auto;    margin-bottom: 60px;    height: 1791px;    background-color: #fff;&#125;.bottom&#123;    height: 274px;    background-color: #fff;&#125;.footer&#123;    margin: 0 auto;    width: 1226px;    height: 166px;    border: 1px solid #000;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-局部——header"><a href="#2-局部——header" class="headerlink" title="(2)局部——header"></a>(2)局部——header</h5><p>header部分首先是一个水平居中的内容，内容盒子可以分成左右两个部分，如图所示：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a1372efcf139~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p>html代码：</p><pre class="line-numbers language-none"><code class="language-none">&lt;div class&#x3D;&quot;header&quot;&gt;    &lt;div class&#x3D;&quot;container&quot;&gt;        &lt;div class&#x3D;&quot;header-left&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;header-rigth&quot;&gt;&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码：</p><pre class="line-numbers language-none"><code class="language-none">.container&#123;  &#x2F;*后面会继续用到*&#x2F;    width: 1226px;    height: 100%;    margin: 0 auto;    border: 1px solid #f00;&#125;.header-left&#123;    width: 380px;    height: 100%;    float: left;    background-color: #0f0;&#125;.header-rigth&#123;    width: 260px;    height: 100%;    float: right;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-局部——top"><a href="#3-局部——top" class="headerlink" title="(3)局部——top"></a>(3)局部——top</h5><p>top部分先有一个水平居中的内容，再就是内容由上到下可以分成四个部分，然后每个部分再细分……说不下去了，直接上图：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a1373121044d~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p>html代码：</p><pre class="line-numbers language-none"><code class="language-none">&lt;div class&#x3D;&quot;top&quot;&gt;    &lt;div class&#x3D;&quot;container&quot;&gt;        &lt;div class&#x3D;&quot;top-nav&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;top-slider&quot;&gt;            &lt;div class&#x3D;&quot;slider-navbar&quot;&gt;&lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;top-recommend&quot;&gt;            &lt;div class&#x3D;&quot;recommend-left&quot;&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;recommend-right&quot;&gt;                &lt;ul&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                &lt;&#x2F;ul&gt;            &lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;top-flashsale&quot;&gt;            &lt;div class&#x3D;&quot;flashsale-title&quot;&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;flashsale-content&quot;&gt;                &lt;div class&#x3D;&quot;content-timer&quot;&gt;&lt;&#x2F;div&gt;                &lt;ul class&#x3D;&quot;content-shops&quot;&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                &lt;&#x2F;ul&gt;            &lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码：</p><pre class="line-numbers language-none"><code class="language-none">.top &#123;    height: 1210px;    background-color: #fff;&#125;.top-nav &#123;    height: 100px;    background-color: #f00;&#125;.top-slider &#123;    margin-bottom: 14px;    position: relative;    height: 460px;    background-color: #00f;&#125;.slider-navbar &#123;    position: absolute;    top: 0;    left: 0;    width: 234px;    height: 100%;    background-color: black;    opacity: .5;&#125;.top-recommend &#123;    margin-bottom: 26px;    height: 170px;    background-color: #0f0;&#125;.recommend-left &#123;    float: left;    height: 100%;    width: 234px;    background-color: skyblue;&#125;.recommend-right &#123;    float: right;    width: 978px;    height: 100%;    border: 1px solid #000;&#125;.recommend-right &gt; ul &#123;    height: 100%;&#125;.recommend-right &gt; ul li &#123;    float: left;    width: 316px;    height: 100%;    background-color: deepskyblue;&#125;.recommend-right &gt; ul li + li &#123;    margin-left: 14px;&#125;.top-flashsale &#123;    height: 438px;    background-color: #ff4455;&#125;.flashsale-title &#123;    height: 58px;    background-color: purple;&#125;.flashsale-content &#123;    border: 1px solid #000;    padding-bottom: 40px;    height: 380px;&#125;.content-timer &#123;    margin-right: 14px;    float: left;    width: 234px;    height: 100%;    background-color: #fff;&#125;.content-shops &#123;    overflow: hidden;    height: 100%;    background-color: #6effb1;&#125;.content-shops &gt; li &#123;    float: left;    width: 234px;    height: 100%;    background-color: #fff;&#125;.content-shops &gt; li+li &#123;    margin-left: 12.5px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-局部——center"><a href="#4-局部——center" class="headerlink" title="(4)局部——center"></a>(4)局部——center</h5><p>center部分都是一些单元格展示,有很多类似的模块,就挑几个来实现了，直接看图吧：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a13734239fca~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a1373825a330~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a137421eddba~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p>html代码：</p><pre class="line-numbers language-none"><code class="language-none">&lt;div class&#x3D;&quot;center&quot;&gt;    &lt;div class&#x3D;&quot;center-phone&quot;&gt;        &lt;div class&#x3D;&quot;phone-title&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;phone-content&quot;&gt;            &lt;div class&#x3D;&quot;phone-left&quot;&gt;&lt;&#x2F;div&gt;            &lt;ul class&#x3D;&quot;phone-right&quot;&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;            &lt;&#x2F;ul&gt;        &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;center-household&quot;&gt;        &lt;div class&#x3D;&quot;household-title&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;household-content&quot;&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;                &lt;p&gt;&lt;&#x2F;p&gt;                &lt;p&gt;&lt;&#x2F;p&gt;            &lt;&#x2F;li&gt;        &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;center-video&quot;&gt;        &lt;div class&#x3D;&quot;video-title&quot;&gt;&lt;&#x2F;div&gt;        &lt;ul class&#x3D;&quot;video-content&quot;&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;        &lt;&#x2F;ul&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码：</p><pre class="line-numbers language-none"><code class="language-none">.center &#123;    margin: 0 auto;    margin-bottom: 60px;    padding-top: 60px;    width: 1226px;    height: 1791px;    background-color: #fff;&#125;.center-phone&#123;    margin-bottom: 8px;    height: 686px;    background-color: yellow;&#125;.phone-title&#123;    height: 58px;    background-color: black;&#125;.phone-content&#123;    height: 628px;    background-color: pink;&#125;.phone-left&#123;    margin-right: 14px;    float: left;    width: 234px;    height: 100%;    background-color: darkseagreen;&#125;.phone-right&#123;    overflow: hidden;    height: 100%;    background-color: #ccc;&#125;.phone-right&gt;li&#123;    margin-bottom: 28px;    padding-left: 14px;    float: left;    width: 25%;    height: 300px;    border: 1px solid #000;    background-color: #f00;    background-clip: content-box;&#125;.phone-right&gt;li:nth-child(1),.phone-right&gt;li:nth-child(5)&#123;    margin-left: 0;&#125;.center-household&#123;    margin-bottom: 8px;    height: 686px;    background-color: yellow;&#125;.household-title&#123;    height: 58px;    background-color: black;&#125;.household-content&#123;    height: 614px;&#125;.household-content&gt;li&#123;    position: relative;    margin-left: 14px;    margin-bottom: 28px;    float: left;    width: 234px;    height: 300px;    background-color: #d7d7d7;&#125;.household-content&gt;li:nth-child(1),.household-content&gt;li:nth-child(6)&#123;    margin-left: 0;&#125;.household-content&gt;li:last-child p:first-child&#123;    position: absolute;    top: 0;    left: 0;    right: 0;    height: 143px;    border: 1px solid #000;&#125;.household-content&gt;li:last-child p:last-child&#123;    position: absolute;    bottom: 0;    left: 0;    right: 0;    height: 143px;    border: 1px solid #000;&#125;.center-video&#123;    height: 343px;    background-color: pink;&#125;.video-title&#123;    height: 58px;    background-color: black;&#125;.video-content&#123;    height: 285px;&#125;.video-content&gt;li&#123;    float: left;    width: 296px;    height: 100%;    border: 1px solid #000;&#125;.video-content&gt;li+li&#123;    margin-left: 14px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-局部——bottom"><a href="#5-局部——bottom" class="headerlink" title="(5)局部——bottom"></a>(5)局部——bottom</h5><p>bottom部分首先是一个水平居中的内容,然后内容可以划分为上下两部分,每个部分都是浮动的li,如图:</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a1374b14d7d6~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;div class&#x3D;&quot;bottom&quot;&gt;    &lt;div class&#x3D;&quot;container&quot;&gt;        &lt;div class&#x3D;&quot;bottom-service&quot;&gt;            &lt;ul&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;            &lt;&#x2F;ul&gt;        &lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;bottom-links&quot;&gt;            &lt;div class&#x3D;&quot;links-left&quot;&gt;                &lt;ul&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                &lt;&#x2F;ul&gt;            &lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;links-right&quot;&gt;&lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">.bottom &#123;    height: 274px;    background-color: #fff;&#125;.bottom-service&#123;    height: 80px;    background-color: seagreen;&#125;.bottom-service&gt;ul&#123;    height: 100%;&#125;.bottom-service&gt;ul li&#123;    position: relative;    padding: 0 50px;    float: left;    width: 20%;    height: 100%;    background-color: goldenrod;    background-clip: content-box;&#125;.bottom-service&gt;ul li+li::before&#123;    position: absolute;    top: 28px;    left: 0;    content: &#39;&#39;;    width: 1px;    height: 24px;    background-color: #999;&#125;.bottom-links&#123;    height: 192px;    background-color: #8545e0;&#125;.links-left&#123;    float: left;    width: 960px;    height: 100%;    background-color: yellow;&#125;.links-left&gt;ul&#123;    height: 100%;&#125;.links-left&gt;ul li&#123;    padding-right: 60px;    float: left;    width: 16.666666666666667%;    height: 100%;    border: 1px solid #000;    background-color: #ff0000;    background-clip: content-box;&#125;.links-right&#123;    float: right;    width: 252px;    height: 100%;    background-color: yellow;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="6-局部——footer"><a href="#6-局部——footer" class="headerlink" title="(6)局部——footer"></a>(6)局部——footer</h5><p>footer划分如图:</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a13756dfa54f~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;div class&#x3D;&quot;footer&quot;&gt;    &lt;div class&#x3D;&quot;footer-info&quot;&gt;        &lt;div class&#x3D;&quot;info-left&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;info-right&quot;&gt;&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;footer-slogan&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">.footer &#123;    margin: 0 auto;    padding: 30px 0;    width: 1226px;    height: 166px;    border: 1px solid #000;&#125;.footer-info&#123;    height: 57px;    background-color: #6effb1;&#125;.info-left&#123;    float: left;    width: 630px;    height: 100%;    border: 1px solid #000;&#125;.info-right&#123;    float: right;    width: 436px;    height: 100%;    border: 1px solid #000;&#125;.footer-slogan&#123;    margin-top: 30px;    height: 19px;    background-color: #8545e0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="7-全部代码-优化后"><a href="#7-全部代码-优化后" class="headerlink" title="(7)全部代码(优化后)"></a>(7)全部代码(优化后)</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div class&#x3D;&quot;header&quot;&gt;    &lt;div class&#x3D;&quot;container&quot;&gt;        &lt;div class&#x3D;&quot;header-left fl&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;header-rigth fr&quot;&gt;&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;top&quot;&gt;    &lt;div class&#x3D;&quot;container&quot;&gt;        &lt;div class&#x3D;&quot;top-nav&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;top-slider&quot;&gt;            &lt;div class&#x3D;&quot;slider-navbar&quot;&gt;&lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;top-recommend&quot;&gt;            &lt;div class&#x3D;&quot;recommend-left fl&quot;&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;recommend-right fr&quot;&gt;                &lt;ul&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                &lt;&#x2F;ul&gt;            &lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;top-flashsale&quot;&gt;            &lt;div class&#x3D;&quot;flashsale-title common-title&quot;&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;flashsale-content&quot;&gt;                &lt;div class&#x3D;&quot;content-timer fl&quot;&gt;&lt;&#x2F;div&gt;                &lt;ul class&#x3D;&quot;content-shops&quot;&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                &lt;&#x2F;ul&gt;            &lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;center&quot;&gt;    &lt;div class&#x3D;&quot;center-phone module-box&quot;&gt;        &lt;div class&#x3D;&quot;phone-title common-title&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;phone-content&quot;&gt;            &lt;div class&#x3D;&quot;phone-left fl&quot;&gt;&lt;&#x2F;div&gt;            &lt;ul class&#x3D;&quot;phone-right&quot;&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;            &lt;&#x2F;ul&gt;        &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;center-household module-box&quot;&gt;        &lt;div class&#x3D;&quot;household-title common-title&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;household-content&quot;&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;                &lt;p&gt;&lt;&#x2F;p&gt;                &lt;p&gt;&lt;&#x2F;p&gt;            &lt;&#x2F;li&gt;        &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;center-video&quot;&gt;        &lt;div class&#x3D;&quot;video-title common-title&quot;&gt;&lt;&#x2F;div&gt;        &lt;ul class&#x3D;&quot;video-content&quot;&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;        &lt;&#x2F;ul&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;bottom&quot;&gt;    &lt;div class&#x3D;&quot;container&quot;&gt;        &lt;div class&#x3D;&quot;bottom-service&quot;&gt;            &lt;ul&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;            &lt;&#x2F;ul&gt;        &lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;bottom-links&quot;&gt;            &lt;div class&#x3D;&quot;links-left fl&quot;&gt;                &lt;ul&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                &lt;&#x2F;ul&gt;            &lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;links-right fr&quot;&gt;&lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;footer&quot;&gt;    &lt;div class&#x3D;&quot;footer-info&quot;&gt;        &lt;div class&#x3D;&quot;info-left fl&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;info-right fr&quot;&gt;&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;footer-slogan&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;*-------------------抽取公共样式-----------------*&#x2F;* &#123; &#x2F;*为了方便,就这样清空默认样式了*&#x2F;    margin: 0;    padding: 0;    box-sizing: border-box;    list-style: none;&#125;body &#123;    background-color: #f5f5f5;&#125;.container &#123;  &#x2F;*水平居中的内容盒子*&#x2F;    width: 1226px;    height: 100%;    margin: 0 auto;    border: 1px solid #f00;&#125;.common-title &#123;    height: 58px;    background-color: #000;&#125;.fl &#123;float: left;&#125;.fr &#123;float: right;&#125;.recommend-right,.flashsale-content,.phone-right &gt; li,.household-content &gt; li:last-child &gt; p,.video-content &gt; li,.links-left &gt; ul li,.footer,.info-left,.info-right &#123;border: 1px solid #000;&#125;  &#x2F;*添加边框样式只是为了方便观察,不是布局必须,可删*&#x2F;&#x2F;*-----header部分-----*&#x2F;.header &#123;    margin-bottom: 20px;    height: 40px;    background-color: #333;&#125;.header-left &#123;    width: 380px;    height: 100%;    background-color: #0f0;&#125;.header-rigth &#123;    width: 260px;    height: 100%;    background-color: #0f0;&#125;&#x2F;*--------top部分--------*&#x2F;.top &#123;    &#x2F;*height: 1210px;*&#x2F;    background-color: #fff;&#125;.top-nav &#123;    height: 100px;    background-color: #f00;&#125;.top-slider &#123;    margin-bottom: 14px;    position: relative; &#x2F;*父相*&#x2F;    height: 460px;    background-color: #00f;&#125;.slider-navbar &#123;    position: absolute; &#x2F;*子绝*&#x2F;    top: 0;    left: 0;    width: 234px;    height: 100%;    background-color: black;    opacity: .5;&#125;.top-recommend &#123;    margin-bottom: 26px;    height: 170px;    background-color: #0f0;&#125;.recommend-left &#123;    height: 100%;    width: 234px;    background-color: skyblue;&#125;.recommend-right &#123;    width: 978px;    height: 100%;&#125;.recommend-right &gt; ul &#123;height: 100%;&#125;.recommend-right &gt; ul li &#123;    float: left; &#x2F;*三列等宽,浮动布局*&#x2F;    width: 316px;    height: 100%;    background-color: deepskyblue;&#125;.recommend-right &gt; ul li + li &#123; margin-left: 14px;&#125;  &#x2F;*设置浮动间隔*&#x2F;.top-flashsale &#123;    height: 438px;    background-color: #ff4455;&#125;.flashsale-title &#123;&#125;.flashsale-content &#123;    padding-bottom: 40px;    height: 380px;&#125;.content-timer &#123;    margin-right: 14px;    width: 234px;    height: 100%;    background-color: #fff;&#125;.content-shops &#123;    overflow: hidden; &#x2F;*触发bfc,以达到自适应*&#x2F;    height: 100%;    background-color: #6effb1;&#125;.content-shops &gt; li &#123;    float: left; &#x2F;*四列等宽,浮动布局*&#x2F;    width: 234px;    height: 100%;    background-color: #fff;&#125;.content-shops &gt; li + li &#123;margin-left: 12.5px;&#125;  &#x2F;*设置浮动间隔*&#x2F;&#x2F;*--------center部分--------*&#x2F;.module-box &#123;  &#x2F;*类似的模块*&#x2F;    margin-bottom: 8px;    height: 686px;&#125;.center &#123;    margin: 0 auto;    margin-bottom: 60px;    padding-top: 60px;    width: 1226px;    &#x2F;*height: 1791px;*&#x2F;    background-color: #fff;&#125;.center-phone &#123;background-color: yellow;&#125;.phone-title &#123;&#125;.phone-content &#123;    height: 628px;    background-color: pink;&#125;.phone-left &#123;    width: 234px;    height: 100%;    background-color: darkseagreen;&#125;.phone-right &#123;    overflow: hidden; &#x2F;*触发bfc以达到自适应*&#x2F;    height: 100%;    background-color: #ccc;&#125;.phone-right &gt; li &#123;    margin-bottom: 28px; &#x2F;*设置下边距*&#x2F;    padding-left: 14px; &#x2F;*用padding模拟盒子间隔*&#x2F;    float: left; &#x2F;*四列等宽,浮动布局*&#x2F;    width: 25%;    height: 300px;    background-color: #f00;    background-clip: content-box; &#x2F;*背景色从content开始绘起*&#x2F;&#125;.center-household &#123;background-color: yellow;&#125;.household-title &#123;&#125;.household-content &#123;height: 614px;&#125;.household-content &gt; li &#123;    position: relative; &#x2F;*父相*&#x2F;    margin-left: 14px; &#x2F;*设置浮动间隔*&#x2F;    margin-bottom: 28px; &#x2F;*设置下边距*&#x2F;    float: left; &#x2F;*五列等宽,浮动布局*&#x2F;    width: 234px;    height: 300px;    background-color: #d7d7d7;&#125;.household-content &gt; li:nth-child(1),.household-content &gt; li:nth-child(6) &#123;margin-left: 0; &#125;  &#x2F;*消除每行第一个的间隔*&#x2F;.household-content &gt; li:last-child p:first-child &#123;    position: absolute; &#x2F;*子绝*&#x2F;    top: 0;    left: 0;    right: 0;    height: 143px;&#125;.household-content &gt; li:last-child p:last-child &#123;    position: absolute; &#x2F;*子绝*&#x2F;    bottom: 0;    left: 0;    right: 0;    height: 143px;&#125;.center-video &#123;    height: 343px;    background-color: pink;&#125;.video-title &#123;&#125;.video-content &#123;height: 285px;&#125;.video-content &gt; li &#123;    float: left; &#x2F;*四列等宽,浮动布局*&#x2F;    width: 296px;    height: 100%;&#125;.video-content &gt; li + li &#123;margin-left: 14px; &#125;   &#x2F;*设定浮动间隔*&#x2F;&#x2F;*--------bottom部分--------*&#x2F;.bottom &#123;    &#x2F;*height: 274px;*&#x2F;    background-color: #fff;&#125;.bottom-service &#123;    height: 80px;    background-color: seagreen;&#125;.bottom-service &gt; ul &#123;height: 100%;&#125;.bottom-service &gt; ul li &#123;    position: relative; &#x2F;*父相*&#x2F;    padding: 0 50px; &#x2F;*用padding模拟盒子间隔*&#x2F;    float: left; &#x2F;*五列等宽,浮动布局*&#x2F;    width: 20%;    height: 100%;    background-color: goldenrod;    background-clip: content-box; &#x2F;*背景色从content开始绘起*&#x2F;&#125;.bottom-service &gt; ul li + li::before &#123; &#x2F;*用伪元素模拟分割线*&#x2F;    position: absolute; &#x2F;*子绝*&#x2F;    top: 28px;    left: 0;    content: &#39;&#39;; &#x2F;*伪元素必须有content*&#x2F;    width: 1px;    height: 24px;    background-color: #999;&#125;.bottom-links &#123;    height: 192px;    background-color: #8545e0;&#125;.links-left &#123;    width: 960px;    height: 100%;    background-color: yellow;&#125;.links-left &gt; ul &#123;height: 100%;&#125;.links-left &gt; ul li &#123;    padding-right: 60px;    float: left; &#x2F;*六列等宽,浮动布局*&#x2F;    width: 16.666666666666667%;    height: 100%;    background-color: #ff0000;    background-clip: content-box; &#x2F;*背景色从content开始绘起*&#x2F;&#125;.links-right &#123;    width: 252px;    height: 100%;    background-color: yellow;&#125;&#x2F;*--------footer部分---------*&#x2F;.footer &#123;    margin: 0 auto;    padding: 30px 0;    width: 1226px;    height: 166px;&#125;.footer-info &#123;    height: 57px;    background-color: #6effb1;&#125;.info-left &#123;    width: 630px;    height: 100%;&#125;.info-right &#123;    width: 436px;    height: 100%;&#125;.footer-slogan &#123;    margin-top: 30px;    height: 19px;    background-color: #8545e0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上就是优化后的代码了，由于在下才疏学浅，所用方法不敢保证是最简单的，优化也肯定不是最优的，仅仅是的我的一种思路而已，各位参考参考就好。</p><h5 id="8-1-2-Flexbox-Grid搭配用法-未来…"><a href="#8-1-2-Flexbox-Grid搭配用法-未来…" class="headerlink" title="8.1.2 Flexbox+Grid搭配用法(未来…)"></a>8.1.2 Flexbox+Grid搭配用法(未来…)</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div class&#x3D;&quot;header&quot;&gt;    &lt;div class&#x3D;&quot;container&quot;&gt;        &lt;div class&#x3D;&quot;header-left&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;header-rigth&quot;&gt;&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;top&quot;&gt;    &lt;div class&#x3D;&quot;container&quot;&gt;        &lt;div class&#x3D;&quot;top-nav&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;top-slider&quot;&gt;            &lt;div class&#x3D;&quot;slider-navbar&quot;&gt;&lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;top-recommend-left&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;top-recommend-right&quot;&gt;            &lt;ul&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;            &lt;&#x2F;ul&gt;        &lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;top-flashsale-title&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;top-flashsale-timer&quot;&gt;&lt;&#x2F;div&gt;        &lt;ul class&#x3D;&quot;top-flashsale-shops&quot;&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;        &lt;&#x2F;ul&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;center&quot;&gt;    &lt;div class&#x3D;&quot;center-phone-title&quot;&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;center-phone-content&quot;&gt;        &lt;div class&#x3D;&quot;phone-content-item1&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;phone-content-item2&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;phone-content-item3&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;phone-content-item4&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;phone-content-item5&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;phone-content-item6&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;phone-content-item7&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;phone-content-item8&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;phone-content-item9&quot;&gt;&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;center-household-title&quot;&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;center-household-content&quot;&gt;        &lt;div class&#x3D;&quot;row&quot;&gt;            &lt;div class&#x3D;&quot;household-content-item&quot;&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;household-content-item&quot;&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;household-content-item&quot;&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;household-content-item&quot;&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;household-content-item&quot;&gt;&lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;row&quot;&gt;            &lt;div class&#x3D;&quot;household-content-item&quot;&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;household-content-item&quot;&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;household-content-item&quot;&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;household-content-item&quot;&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;household-content-item&quot;&gt;                &lt;p&gt;&lt;&#x2F;p&gt;                &lt;p&gt;&lt;&#x2F;p&gt;            &lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;center-video-title&quot;&gt;&lt;&#x2F;div&gt;    &lt;ul class&#x3D;&quot;center-video-content&quot;&gt;        &lt;li&gt;&lt;&#x2F;li&gt;        &lt;li&gt;&lt;&#x2F;li&gt;        &lt;li&gt;&lt;&#x2F;li&gt;        &lt;li&gt;&lt;&#x2F;li&gt;    &lt;&#x2F;ul&gt;&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;bottom&quot;&gt;    &lt;div class&#x3D;&quot;container&quot;&gt;        &lt;div class&#x3D;&quot;bottom-service&quot;&gt;            &lt;div class&#x3D;&quot;service-item&quot;&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;service-item&quot;&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;service-item&quot;&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;service-item&quot;&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;service-item&quot;&gt;&lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;bottom-links-left&quot;&gt;            &lt;div class&#x3D;&quot;links-left-item&quot;&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;links-left-item&quot;&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;links-left-item&quot;&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;links-left-item&quot;&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;links-left-item&quot;&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;links-left-item&quot;&gt;&lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;bottom-links-right&quot;&gt;&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;footer&quot;&gt;    &lt;div class&#x3D;&quot;footer-info&quot;&gt;        &lt;div class&#x3D;&quot;info-left&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;info-right&quot;&gt;&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;footer-slogan&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;*-------------------抽取公共样式-----------------*&#x2F;* &#123; &#x2F;*为了方便,就这样清空默认样式了*&#x2F;    margin: 0;    padding: 0;    list-style: none;&#125;body &#123;    background-color: #f5f5f5;    display: grid;    &#x2F;*整体布局 设置网格列,设置网格行,再设定网格区域*&#x2F;    grid-template-columns: 1fr 1226px 1fr;    grid-template-rows: 40px 20px auto auto 274px 166px;    grid-template-areas:        &quot;header header header&quot;        &quot;. . .&quot;         &quot;top top top&quot;        &quot;. center .&quot;        &quot;bottom bottom bottom&quot;        &quot;. footer .&quot;;&#125;.container &#123; &#x2F;*水平居中的内容盒子*&#x2F;    width: 1226px;    height: 100%;    margin: 0 auto;    border: 1px solid #f00;&#125;.top-recommend-right,.top-flashsale-timer,.top-flashsale-shops li,.center-phone-content &gt; div,.center-household-content .row,.household-content-item:last-of-type p,.center-video-content li,.service-item,.links-left-item,.info-left,.info-right,.info-right &#123;border: 1px solid #000;&#125;  &#x2F;*添加边框样式只是为了方便观察,不是布局必须,可删*&#x2F;&#x2F;*-----header部分-----*&#x2F;.header &#123;    grid-area: header; &#x2F;*指定网格区域*&#x2F;    background-color: #333;&#125;.header .container &#123;    display: flex;    justify-content: space-between;&#125;.header-left &#123;    width: 380px;    background-color: #0f0;&#125;.header-rigth &#123;    width: 260px;    background-color: #0f0;&#125;&#x2F;*--------top部分--------*&#x2F;.top &#123;    grid-area: top; &#x2F;*指定网格区域*&#x2F;    background-color: #fff;&#125;.top .container &#123;    display: grid;    &#x2F;*top部分布局 设置网格行,设置网格列,再设定网格区域*&#x2F;    grid-template-rows: 100px 460px 14px 170px 26px 58px 340px 40px;    grid-template-columns: auto 14px 978px;    grid-template-areas:        &quot;top-nav top-nav top-nav&quot;        &quot;top-slider top-slider top-slider&quot;        &quot;. . .&quot;        &quot;recommend-left . recommend-right&quot;        &quot;. . .&quot;        &quot;flashsale-title flashsale-title flashsale-title&quot;        &quot;flashsale-timer . flashsale-shops&quot;        &quot;. . .&quot;;&#125;.top-nav &#123;    grid-area: top-nav;    background-color: #f00;&#125;.top-slider &#123;    position: relative;    grid-area: top-slider;    background-color: #00f;&#125;.top-slider .slider-navbar &#123;    position: absolute;    top: 0;    left: 0;    bottom: 0;    width: 234px;    background-color: black;    opacity: .5;&#125;.top-recommend-left &#123;    grid-area: recommend-left;    background-color: skyblue;&#125;.top-recommend-right &#123;grid-area: recommend-right;&#125;.top-recommend-right &gt; ul &#123;    display: flex;    justify-content: space-between;    height: 100%;&#125;.top-recommend-right li &#123;    width: 316px;    background-color: deepskyblue;&#125;.top-flashsale-title &#123;    grid-area: flashsale-title;    background-color: #000;&#125;.top-flashsale-timer &#123;    grid-area: flashsale-timer;    background-color: #fff;&#125;.top-flashsale-shops &#123;    display: flex;    justify-content: space-between;    grid-area: flashsale-shops;    background-color: #6effb1;&#125;.top-flashsale-shops li &#123;width: 234px;&#125;&#x2F;*--------center部分--------*&#x2F;.center &#123;    margin-bottom: 60px;  &#x2F;*边距可以在网格分区的时候考虑进去,把边距设成一行或一列,不要放内容就好了*&#x2F;    padding-top: 60px;    grid-area: center; &#x2F;*指定网格区域*&#x2F;    display: flex;    flex-direction: column;    background-color: #fff;&#125;.center-phone-title &#123;    height: 58px;    background-color: black;&#125;.center-phone-content &#123;    margin-bottom: 8px;    display: grid;    &#x2F;*这里用flex分格更好,代码更少更简洁*&#x2F;    grid-template-columns: repeat(5, 1fr);    grid-template-rows: repeat(2, 1fr);    grid-template-areas:        &quot;big1 normal2 normal3 normal4 normal5&quot;        &quot;big1 normal6 normal7 normal8 normal9&quot;;    grid-gap: 14px; &#x2F;*网格间隔*&#x2F;    height: 628px;    background-color: pink;&#125;.phone-content-item1 &#123;grid-area: big1;&#125;.phone-content-item2 &#123;grid-area: normal2;&#125;.phone-content-item3 &#123;grid-area: normal3;&#125;.phone-content-item4 &#123;grid-area: normal4;&#125;.phone-content-item5 &#123;grid-area: normal5;&#125;.phone-content-item6 &#123;grid-area: normal6;&#125;.phone-content-item7 &#123;grid-area: normal7;&#125;.phone-content-item8 &#123;grid-area: normal8;&#125;.phone-content-item9 &#123;grid-area: normal9;&#125;.center-household-title &#123;    height: 58px;    background-color: black;&#125;.center-household-content &#123;    margin-bottom: 8px;    display: flex;    flex-direction: column;    height: 614px;    background-color: pink;&#125;.center-household-content .row &#123;    display: flex;    justify-content: space-between;    flex: 1;&#125;.row .household-content-item &#123;    display: flex;    flex-direction: column;    justify-content: space-between;    width: 234px;    background-color: #fff;&#125;.household-content-item:last-of-type p &#123;height: 143px;&#125;.center-video-title &#123;    height: 58px;    background-color: black;&#125;.center-video-content &#123;    display: flex;    justify-content: space-between;    height: 285px;    background-color: pink;&#125;.center-video-content li &#123;width: 296px;&#125;&#x2F;*--------bottom部分--------*&#x2F;.bottom &#123;    grid-area: bottom; &#x2F;*指定网格区域*&#x2F;    background-color: #fff;&#125;.bottom .container &#123;    display: grid;    grid-template-columns: auto 252px;    grid-template-rows: 80px auto;    grid-template-areas: &quot;service service&quot; &quot;links-left links-right&quot;;&#125;.container .bottom-service &#123;    display: flex;    grid-area: service;    background-color: seagreen;&#125;.service-item &#123;flex: 1;&#125;.container .bottom-links-left &#123;    display: flex;    grid-area: links-left;    background-color: yellow;&#125;.links-left-item &#123;flex: 1;&#125;.container .bottom-links-right &#123;    grid-area: links-right;    background-color: yellowgreen;&#125;&#x2F;*--------footer部分---------*&#x2F;.footer &#123;    padding: 30px 0;    grid-area: footer; &#x2F;*指定网格区域*&#x2F;&#125;.footer-info &#123;    display: flex;    justify-content: space-between;    height: 57px;    background-color: #6effb1;&#125;.info-left &#123;width: 630px;&#125;.info-right &#123;width: 436px;&#125;.footer-slogan &#123;    margin-top: 30px;    height: 19px;    background-color: #8545e0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="九、其他补充："><a href="#九、其他补充：" class="headerlink" title="九、其他补充："></a>九、其他补充：</h3><h4 id="9-1-移动端viewport"><a href="#9-1-移动端viewport" class="headerlink" title="9.1 移动端viewport"></a>9.1 移动端viewport</h4><h5 id="设置viewport："><a href="#设置viewport：" class="headerlink" title="设置viewport："></a>设置viewport：</h5><pre class="line-numbers language-none"><code class="language-none">&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0, maximum-scale&#x3D;1.0, user-scalable&#x3D;0&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="阅读推荐："><a href="#阅读推荐：" class="headerlink" title="阅读推荐："></a>阅读推荐：</h5><p>解读 viewport—网页自适应移动 app 神器</p><p><a href="https://juejin.cn/post/6844903473096441869">https://juejin.cn/post/6844903473096441869</a></p><h4 id="9-2-媒体查询"><a href="#9-2-媒体查询" class="headerlink" title="9.2 媒体查询"></a>9.2 媒体查询</h4><h5 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例:"></a>代码示例:</h5><pre class="line-numbers language-none"><code class="language-none">@media (max-width: 767px) &#123; ...css代码... &#125;@media (min-width: 768px) and (max-width: 991px) &#123; ...css代码... &#125;@media (min-width: 992px) and (max-width: 1199px) &#123; ...css代码... &#125;@media (min-width: 1200px) &#123; ...css代码... &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="阅读推荐"><a href="#阅读推荐" class="headerlink" title="阅读推荐:"></a>阅读推荐:</h5><p>MDN文档介绍</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Media_queries">https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Media_queries</a></p><p>随方逐圆 – 全面理解 CSS 媒体查询</p><p><a href="https://juejin.cn/post/6844903486258216967">https://juejin.cn/post/6844903486258216967</a></p><h4 id="9-3-REM"><a href="#9-3-REM" class="headerlink" title="9.3 REM"></a>9.3 REM</h4><h5 id="阅读推荐-1"><a href="#阅读推荐-1" class="headerlink" title="阅读推荐:"></a>阅读推荐:</h5><p>Rem布局的原理解析</p><p><a href="http://yanhaijing.com/css/2017/09/29/principle-of-rem-layout/">http://yanhaijing.com/css/2017/09/29/principle-of-rem-layout/</a></p><p>rem是如何实现自适应布局的？</p><p><a href="http://caibaojian.com/web-app-rem.html">http://caibaojian.com/web-app-rem.html</a></p><h4 id="9-4-Flexbox"><a href="#9-4-Flexbox" class="headerlink" title="9.4 Flexbox"></a>9.4 Flexbox</h4><h5 id="阅读推荐-2"><a href="#阅读推荐-2" class="headerlink" title="阅读推荐"></a>阅读推荐</h5><p>理解Flexbox：你需要知道的一切</p><p><a href="https://www.w3cplus.com/css3/understanding-flexbox-everything-you-need-to-know.html">https://www.w3cplus.com/css3/understanding-flexbox-everything-you-need-to-know.html</a></p><p>深入理解 flex 布局以及计算</p><p><a href="https://www.w3cplus.com/css3/flexbox-layout-and-calculation.html?from=groupmessage">https://www.w3cplus.com/css3/flexbox-layout-and-calculation.html?from=groupmessage</a></p><h4 id="9-5-CSS-Grid"><a href="#9-5-CSS-Grid" class="headerlink" title="9.5 CSS Grid"></a>9.5 CSS Grid</h4><h5 id="阅读推荐-3"><a href="#阅读推荐-3" class="headerlink" title="阅读推荐"></a>阅读推荐</h5><p>grid布局学习指南</p><p><a href="http://blog.jirengu.com/?p=990">http://blog.jirengu.com/?p=990</a></p><p>grid规范草稿</p><p><a href="https://drafts.csswg.org/css-grid/">https://drafts.csswg.org/css-grid/</a></p><h3 id="End：感谢"><a href="#End：感谢" class="headerlink" title="End：感谢"></a>End：感谢</h3>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 学习资料 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux基础，linux常用命令大全</title>
      <link href="/2023/12/10/linux-ji-chu-linux-chang-yong-ming-ling-da-quan/"/>
      <url>/2023/12/10/linux-ji-chu-linux-chang-yong-ming-ling-da-quan/</url>
      
        <content type="html"><![CDATA[<h1 id="linux基础，linux常用命令大全"><a href="#linux基础，linux常用命令大全" class="headerlink" title="linux基础，linux常用命令大全"></a>linux基础，linux常用命令大全</h1><p>收集几篇linux基础，常用命令，基本用法</p><p>原文标题：<a href="https://juejin.cn/post/6844903801283952653">前端linux基础，这一篇就够了</a><br>作者：孟祥_成都</p><h2 id="1-Linux安装"><a href="#1-Linux安装" class="headerlink" title="1. Linux安装"></a>1. Linux安装</h2><h3 id="因为图太多了，转载一篇从虚拟机vmware配置到centos7详细安装教程"><a href="#因为图太多了，转载一篇从虚拟机vmware配置到centos7详细安装教程" class="headerlink" title="因为图太多了，转载一篇从虚拟机vmware配置到centos7详细安装教程"></a>因为图太多了，转载一篇<a href="https://www/.cnblogs.com/wcwen1990/p/7630545.html">从虚拟机vmware配置到centos7详细安装教程</a></h3><h2 id="2-linux常用命令"><a href="#2-linux常用命令" class="headerlink" title="2.linux常用命令"></a>2.linux常用命令</h2><h3 id="2-1-常见目录"><a href="#2-1-常见目录" class="headerlink" title="2.1 常见目录"></a>2.1 常见目录</h3><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>&#x2F;bin</td><td>存放二进制可执行文件(ls,cat,mkdir等)，常用命令一般都在这里。</td></tr><tr><td>&#x2F;etc</td><td>存放系统管理和配置文件</td></tr><tr><td>&#x2F;home</td><td>存放所有用户文件的根目录，是用户主目录的基点，比如用户user的主目录就是&#x2F;home&#x2F;user，可以用~user表示</td></tr><tr><td>&#x2F;usr</td><td>用于存放系统应用程序，比较重要的目录&#x2F;usr&#x2F;local 本地系统管理员软件安装目录（安装系统级的应用）。这是最庞大的目录，要用到的应用程序和文件几乎都在这个目录。&#x2F;usr&#x2F;x11r6 存放x window的目录&#x2F;usr&#x2F;bin 众多的应用程序&#x2F;usr&#x2F;sbin 超级用户的一些管理程序&#x2F;usr&#x2F;doc linux文档&#x2F;usr&#x2F;include linux下开发和编译应用程序所需要的头文件&#x2F;usr&#x2F;lib 常用的动态链接库和软件包的配置文件&#x2F;usr&#x2F;man 帮助文档&#x2F;usr&#x2F;src 源代码，linux内核的源代码就放在&#x2F;usr&#x2F;src&#x2F;linux里&#x2F;usr&#x2F;local&#x2F;bin 本地增加的命令&#x2F;usr&#x2F;local&#x2F;lib 本地增加的库</td></tr><tr><td>&#x2F;opt</td><td>额外安装的可选应用程序包所放置的位置。一般情况下，我们可以把tomcat等都安装到这里。</td></tr><tr><td>&#x2F;proc</td><td>虚拟文件系统目录，是系统内存的映射。可直接访问这个目录来获取系统信息。</td></tr><tr><td>&#x2F;root</td><td>超级用户（系统管理员）的主目录（特权阶级^o^）</td></tr><tr><td>&#x2F;sbin</td><td>存放二进制可执行文件，只有root才能访问。这里存放的是系统管理员使用的系统级别的管理命令和程序。如ifconfig等。</td></tr><tr><td>&#x2F;dev</td><td>用于存放设备文件。</td></tr><tr><td>&#x2F;mnt</td><td>系统管理员安装临时文件系统的安装点，系统提供这个目录是让用户临时挂载其他的文件系统。</td></tr><tr><td>&#x2F;boot</td><td>存放用于系统引导时使用的各种文件</td></tr><tr><td>&#x2F;lib</td><td>存放跟文件系统中的程序运行所需要的共享库及内核模块。共享库又叫动态链接共享库，作用类似windows里的.dll文件，存放了根文件系统程序运行所需的共享文件。</td></tr><tr><td>&#x2F;tmp</td><td>用于存放各种临时文件，是公用的临时文件存储点。</td></tr><tr><td>&#x2F;var</td><td>用于存放运行时需要改变数据的文件，也是某些大文件的溢出区，比方说各种服务的日志文件（系统启动日志等。）等。</td></tr><tr><td>&#x2F;lost+found</td><td>这个目录平时是空的，系统非正常关机而留下“无家可归”的文件（windows下叫什么.chk）就在这里</td></tr></tbody></table><h3 id="2-2-命令基本格式"><a href="#2-2-命令基本格式" class="headerlink" title="2.2 命令基本格式"></a>2.2 命令基本格式</h3><h4 id="2-2-1-命令提示符"><a href="#2-2-1-命令提示符" class="headerlink" title="2.2.1 命令提示符"></a>2.2.1 命令提示符</h4><pre class="line-numbers language-none"><code class="language-none">[root@xiaoming ~]#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>root 当前登录用户</li><li>localhost 主机名</li><li>~ 当前工作目录,默认是当前用户的家目录，root就是&#x2F;root,普通用户是 &#x2F;home&#x2F;用户名</li><li>提示符 超级用户是 #,普通用户是$</li></ul><h4 id="2-2-2-命令格式"><a href="#2-2-2-命令格式" class="headerlink" title="2.2.2 命令格式"></a>2.2.2 命令格式</h4><ul><li>命令 [选项] [参数]</li><li>当有多个选项时，可以写在一起</li><li>一般参数有简化和完整写法两种 <code>-a</code> 与 <code>--all</code>等效</li></ul><h4 id="2-2-3-ls"><a href="#2-2-3-ls" class="headerlink" title="2.2.3 ls"></a>2.2.3 ls</h4><ul><li><p>查询目录中的内容</p></li><li><p>ls [选项] [文件或者目录]</p></li><li><p>选项</p><ul><li>-a 显示所有文件，包括隐藏文件</li><li>-l 显示详细信息</li><li>-d 查看目录本身的属性而非子文件 ls &#x2F;etc&#x2F;</li><li>-h 人性化的方式显示文件大小</li><li>-i 显示inode,也就是i节点，每个节点都有ID号</li></ul></li><li><p>默认当前目录下的文件列表</p></li></ul><h5 id="l"><a href="#l" class="headerlink" title="-l"></a>-l</h5><p>显示详细信息</p><pre class="line-numbers language-none"><code class="language-none">drwxr-xr-x .  1 root  root   800 Sep 16 00:19 logs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>drwxr-xr-x</th><th>.</th><th>1</th><th>root</th><th>root</th><th>800</th><th>Sep 16 00:19</th><th>logs</th></tr></thead><tbody><tr><td>文件类型和权限</td><td>ACL权限</td><td>硬链接引用计数</td><td>所有者</td><td>所属组</td><td>文件大小</td><td>最后修改时间</td><td>文件名</td></tr></tbody></table><h5 id="文件类型和权限"><a href="#文件类型和权限" class="headerlink" title="文件类型和权限"></a>文件类型和权限</h5><pre class="line-numbers language-none"><code class="language-none">-rw-r--r--<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>文件类型 - 文件、d 目录、l 软链接文件</li><li>u(所有者)、g(所属组)、o(其他人)</li><li>r(read) 读取、w(write) 写入、x(execute) 执行</li></ul><h3 id="2-3-文件处理命令"><a href="#2-3-文件处理命令" class="headerlink" title="2.3 文件处理命令"></a>2.3 文件处理命令</h3><h4 id="2-3-1-mkdir"><a href="#2-3-1-mkdir" class="headerlink" title="2.3.1 mkdir"></a>2.3.1 mkdir</h4><ul><li><p>建立目录 make directory</p></li><li><p>mkdir -p [目录名]</p><ul><li>-p 递归创建</li></ul></li></ul><h4 id="2-3-2-cd"><a href="#2-3-2-cd" class="headerlink" title="2.3.2 cd"></a>2.3.2 cd</h4><ul><li><p>切换所在目录 change directory</p></li><li><p>cd [目录]</p><ul><li>~ 家目录</li><li>家目录</li><li><ul><li>上次目录</li></ul></li><li>. 当前目录</li><li>.. 上级目录</li></ul></li><li><p>相对路径是参照当前所在目录</p></li><li><p>绝对路径是从根目录开始</p></li><li><p>按TAB键可以补全命令和目录</p></li></ul><h4 id="2-3-3-pwd"><a href="#2-3-3-pwd" class="headerlink" title="2.3.3 pwd"></a>2.3.3 pwd</h4><ul><li>显示当前目录 pwd</li></ul><h4 id="2-3-4-rmdir"><a href="#2-3-4-rmdir" class="headerlink" title="2.3.4 rmdir"></a>2.3.4 rmdir</h4><ul><li>删除目录 remove empty directory</li><li>rmdir [目录名]</li></ul><h4 id="2-3-5-rm"><a href="#2-3-5-rm" class="headerlink" title="2.3.5 rm"></a>2.3.5 rm</h4><ul><li><p>删除文件或者目录 remove</p></li><li><p>rm [文件或者目录]</p><ul><li>-r 删除目录</li><li>-f 强制删除</li></ul></li><li><p>rm -rf 文件或者目录] 递归强制删除所有目录</p></li></ul><h4 id="2-3-6-cp"><a href="#2-3-6-cp" class="headerlink" title="2.3.6 cp"></a>2.3.6 cp</h4><ul><li><p>copy 复制命令</p></li><li><p>copy [源文件或者目录] [目标文件]</p><ul><li>-r 复制目录,默认是复制文件</li><li>-p 连带文件属性复制</li><li>-d 若源文件是链接文件，则复制连接属性</li><li>-a 相当于 -rpd</li></ul></li></ul><h4 id="2-3-7-mv"><a href="#2-3-7-mv" class="headerlink" title="2.3.7 mv"></a>2.3.7 mv</h4><ul><li>移动文件或者改名 move</li><li>mv [源文件或者目录] [目标文件]</li></ul><h4 id="2-3-8-ln"><a href="#2-3-8-ln" class="headerlink" title="2.3.8 ln"></a>2.3.8 ln</h4><ul><li>链接命令,生成链接文件 <code>link</code></li></ul><h5 id="2-3-8-1-硬链接特征"><a href="#2-3-8-1-硬链接特征" class="headerlink" title="2.3.8.1 硬链接特征"></a>2.3.8.1 硬链接特征</h5><ul><li>拥有相同的i节点和存储block块，可以看作是同一个文件</li><li>可以通过i节点访问</li><li>不能跨分区</li><li>不能针对目录使用</li><li>一般不使用</li></ul><h5 id="2-3-8-2-软链接特征"><a href="#2-3-8-2-软链接特征" class="headerlink" title="2.3.8.2 软链接特征"></a>2.3.8.2 软链接特征</h5><ul><li><p>ln -s [源文件] [目标文件]</p><ul><li>-s 创建软链接</li></ul></li><li><p>类似Windows快捷方式</p></li><li><p>软链接拥有自己的i节点和Block块，但是数据块中只保存源文件的文件名和i节点号，并没有实际的文件数据</p></li><li><p>lrwxrwxrwx l 软链接 软链接的文件权限都是 777</p></li><li><p>修改任意一个文件，另一个都会改变</p></li><li><p>删除源文件，软链接不能使用</p></li><li><p>软链接源文件必须写绝对路径</p></li></ul><h3 id="2-4-文件搜索命令"><a href="#2-4-文件搜索命令" class="headerlink" title="2.4 文件搜索命令"></a>2.4 文件搜索命令</h3><h4 id="2-4-1-locate"><a href="#2-4-1-locate" class="headerlink" title="2.4.1 locate"></a>2.4.1 locate</h4><ul><li><p>在后台数据库中按文件名搜索，速度比较快</p></li><li><p>数据保存在<code>/var/lib/mlocate</code>后台数据库，每天更新一次</p></li><li><p>可以<code>updatedb</code>命令立刻更新数据库</p></li><li><p>只能搜索文件名</p></li><li><p><code>/etc/updatedb.conf</code> 建立索引的配置文件</p><ul><li>PRUNE_BIND_MOUNTS &#x3D; “yes” 全部生效，开启搜索限制</li><li>PRUNEFS 不搜索的文件系统</li><li>PRUNENAMES 忽略的文件类型</li><li>PRUNEPATHS 忽略的路径 &#x2F;tmp</li></ul></li></ul><h4 id="2-4-2-whereis"><a href="#2-4-2-whereis" class="headerlink" title="2.4.2 whereis"></a>2.4.2 whereis</h4><ul><li><p>搜索命令所在路径以及帮助文档所在位置</p></li><li><p>whereis 命令名 <code>whereis ls</code></p><ul><li>-b 只查找可执行文件</li><li>-m 只查找帮助文件</li></ul></li></ul><h4 id="2-4-3-which"><a href="#2-4-3-which" class="headerlink" title="2.4.3 which"></a>2.4.3 which</h4><ul><li>可以看到别名 <code>which ls</code></li><li>能看到的都是外部安装的命令</li><li>无法查看Shell自带的命令，如 <code>which cd</code></li></ul><h4 id="2-4-4-环境变量"><a href="#2-4-4-环境变量" class="headerlink" title="2.4.4 环境变量"></a>2.4.4 环境变量</h4><p><code>/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin</code></p><ul><li>定义的是系统搜索命令的路径</li><li>echo $PATH</li></ul><h4 id="2-4-5-find"><a href="#2-4-5-find" class="headerlink" title="2.4.5 find"></a>2.4.5 find</h4><ul><li>文件搜索命令</li><li>find [搜索范围] [搜索条件]</li></ul><h5 id="2-4-5-1-按名称搜索"><a href="#2-4-5-1-按名称搜索" class="headerlink" title="2.4.5.1 按名称搜索"></a>2.4.5.1 按名称搜索</h5><ul><li><p>避免大范围的搜索，会非常消耗系统资源</p><pre class="line-numbers language-none"><code class="language-none">find &#x2F; -name aaa.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h5 id="2-4-5-2-通配符"><a href="#2-4-5-2-通配符" class="headerlink" title="2.4.5.2 通配符"></a>2.4.5.2 通配符</h5><ul><li><p>find是在系统当中搜索符合条件的文件名，如果需要匹配，使用通配符匹配，通配符是完全匹配</p></li><li><p>通配符</p><ul><li><code>*</code> 匹配任意内容</li><li><code>?</code> 匹配任意一个字符</li><li><code>[]</code> 匹配任意一个中括号内的字符</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">find . -name &quot;ab[cdef]&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-4-5-3-i"><a href="#2-4-5-3-i" class="headerlink" title="2.4.5.3 -i"></a>2.4.5.3 -i</h5><p>不区分大小写</p><pre class="line-numbers language-none"><code class="language-none">find &#x2F; -iname A.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-4-5-4-user"><a href="#2-4-5-4-user" class="headerlink" title="2.4.5.4 -user"></a>2.4.5.4 -user</h5><p>按所有者进行搜索</p><pre class="line-numbers language-none"><code class="language-none">find &#x2F;root -user rootfind &#x2F;root -nouser<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="2-4-5-5-按时间搜索"><a href="#2-4-5-5-按时间搜索" class="headerlink" title="2.4.5.5 按时间搜索"></a>2.4.5.5 按时间搜索</h5><pre class="line-numbers language-none"><code class="language-none">find &#x2F;nginx&#x2F;access.log -mtime +5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>atime</td><td>文件访问时间</td></tr><tr><td>ctime</td><td>改变文件属性</td></tr><tr><td>mtime</td><td>修改文件内容</td></tr></tbody></table><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-5</td><td>5天内修改的文件</td></tr><tr><td>5</td><td>5天前当前修改的文件</td></tr><tr><td>+5</td><td>5天前修改的文件</td></tr></tbody></table><h5 id="2-4-5-6-按大小搜索"><a href="#2-4-5-6-按大小搜索" class="headerlink" title="2.4.5.6 按大小搜索"></a>2.4.5.6 按大小搜索</h5><ul><li>k小写,M大写</li></ul><pre class="line-numbers language-none"><code class="language-none">find . -size 100k<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-8k</td><td>小于8K</td></tr><tr><td>8k</td><td>等于8K</td></tr><tr><td>+8k</td><td>大于8K</td></tr><tr><td>+8M</td><td>小于8M</td></tr></tbody></table><h5 id="2-4-5-7-按i节点搜索"><a href="#2-4-5-7-按i节点搜索" class="headerlink" title="2.4.5.7 按i节点搜索"></a>2.4.5.7 按i节点搜索</h5><pre class="line-numbers language-none"><code class="language-none">find . -inum 123456<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-4-5-8-综合应用"><a href="#2-4-5-8-综合应用" class="headerlink" title="2.4.5.8 综合应用"></a>2.4.5.8 综合应用</h5><pre class="line-numbers language-none"><code class="language-none">find &#x2F;tmp -size +10k -a -size -20k<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查找&#x2F;etc目录下，大于10KB并且小于20KB的文件</li><li>-a and 逻辑与，两个条件都满足</li><li>-o or 逻辑或，两个条件满足一个就可以</li></ul><pre class="line-numbers language-none"><code class="language-none">find &#x2F;tmp -size +10k -a -size -20k -exec ls -lh &#123;&#125; \;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>exec 对上个命令的结果进行操作</li></ul><h5 id="2-4-5-9-grep"><a href="#2-4-5-9-grep" class="headerlink" title="2.4.5.9 grep"></a>2.4.5.9 grep</h5><ul><li><p>在文件当中匹配符合条件的字符串</p></li><li><p>grep “10” access.log</p><ul><li><code>-i</code> 忽略大小写</li><li><code>-v</code> 排除指定字符串</li></ul></li><li><p>find命令，在系统当中搜索符合条件的文件名，如果需要匹配，使用通配符匹配，通配符是完全匹配</p></li><li><p>grep命令 在文件当中搜索符合条件的字符串，如果需要匹配，使用正则表达式进行匹配，正则表达式时包含匹配</p></li></ul><h3 id="2-5-帮助命令"><a href="#2-5-帮助命令" class="headerlink" title="2.5 帮助命令"></a>2.5 帮助命令</h3><h4 id="2-5-1-基本用法"><a href="#2-5-1-基本用法" class="headerlink" title="2.5.1 基本用法"></a>2.5.1 基本用法</h4><ul><li>man 命令 获取指定命令的帮助</li><li><code>man ls</code> 查看ls的帮助</li></ul><pre class="line-numbers language-none"><code class="language-none">man -f lswhatis lsman 1 lsman 1p ls<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-5-2-关键字搜索"><a href="#2-5-2-关键字搜索" class="headerlink" title="2.5.2 关键字搜索"></a>2.5.2 关键字搜索</h4><pre class="line-numbers language-none"><code class="language-none">- man -k passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-5-3-shell-内部帮助"><a href="#2-5-3-shell-内部帮助" class="headerlink" title="2.5.3 shell 内部帮助"></a>2.5.3 shell 内部帮助</h4><ul><li><p><code>whereis</code>找到就是外部，找不到就是内部</p><pre class="line-numbers language-none"><code class="language-none">help cd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="2-6-压缩与解压缩命令"><a href="#2-6-压缩与解压缩命令" class="headerlink" title="2.6 压缩与解压缩命令"></a>2.6 压缩与解压缩命令</h3><p><code>.zip</code> <code>.gz</code> <code>.bz2</code> <code>.tar.gz</code> <code>.tar.bz2</code></p><h4 id="2-6-1-zip格式"><a href="#2-6-1-zip格式" class="headerlink" title="2.6.1 zip格式"></a>2.6.1 zip格式</h4><ul><li><p>压缩文件 zip 压缩文件名 源文件</p></li><li><p>压缩目录 zip -r 压缩文件名 源目录</p></li><li><p>解压 unzip 压缩文件名</p><pre class="line-numbers language-none"><code class="language-none">mkdir booktouch book&#x2F;1.txttouch book&#x2F;2.txtzip -r book.zip bookunzip book.zip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="2-6-2-gzip"><a href="#2-6-2-gzip" class="headerlink" title="2.6.2 gzip"></a>2.6.2 gzip</h4><table><thead><tr><th>命令</th><th>示例</th><th>含义</th></tr></thead><tbody><tr><td>gzip 源文件</td><td>gzip a.txt</td><td>压缩为.gz格式的压缩文件，源文件会消失</td></tr><tr><td>gzip -c 源文件 &gt; 压缩文件</td><td>gzip -c yum.txt &gt; yum.txt.gz</td><td>压缩为.gz格式的压缩文件，源文件不会消失</td></tr><tr><td>gzip -r 目录</td><td>gzip -r xx</td><td>压缩目录下的所有子文件，但是不压缩目录</td></tr><tr><td>gzip -d 压缩文件名</td><td>gzip -d yum.txt.gz</td><td>解压缩文件,不保留压缩包</td></tr><tr><td>gunzip 压缩文件</td><td>gunzip yum.txt.gz</td><td>解压缩文件,不保留压缩包</td></tr></tbody></table><ul><li>压缩是压缩目录下的文件</li></ul><h4 id="2-6-3-bz2格式压缩"><a href="#2-6-3-bz2格式压缩" class="headerlink" title="2.6.3 .bz2格式压缩"></a>2.6.3 .bz2格式压缩</h4><table><thead><tr><th>命令</th><th>示例</th><th>含义</th></tr></thead><tbody><tr><td>bzip2 源文件</td><td>bzip2 1.txt</td><td>压缩为.bz2格式的文件，不保留源文件</td></tr><tr><td>bzip2 -k 源文件</td><td>zip2 -k 1.txt</td><td>压缩为.bz2格式的文件，保留源文件</td></tr><tr><td>bzip2 -d 压缩文件名</td><td>bzip2 -d 1.txt.bz2</td><td>解压压缩包</td></tr><tr><td>bunzip2 压缩文件名</td><td>bunzip2 1.txt.bz2</td><td>解压压缩包</td></tr></tbody></table><ul><li>bzip2 不能压缩目录</li></ul><h4 id="2-6-4-tar"><a href="#2-6-4-tar" class="headerlink" title="2.6.4 tar"></a>2.6.4 tar</h4><ul><li><p>打包命令</p></li><li><p>tar -cvf 打包文件名 源文件</p><ul><li>-c 打包</li><li>-v 显示过程</li><li>-f 指定打包后的文件名</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">tar -cvf book.tar bookgzip book.tarbzip2 book.tar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>x 解打包</p><pre class="line-numbers language-none"><code class="language-none">tar -xvf book.tar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h4 id="2-6-4-压缩格式"><a href="#2-6-4-压缩格式" class="headerlink" title="2.6.4 压缩格式"></a>2.6.4 压缩格式</h4><p><strong>压缩</strong></p><blockquote><p>tar –cvf jpg.tar *.jpg &#x2F;&#x2F;将目录里所有jpg文件打包成tar.jpg<br>tar –czf jpg.tar.gz *.jpg &#x2F;&#x2F;将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz<br>tar –cjf jpg.tar.bz2 *.jpg &#x2F;&#x2F;将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2<br>tar –cZf jpg.tar.Z *.jpg &#x2F;&#x2F;将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z<br>rar a jpg.rar *.jpg &#x2F;&#x2F;rar格式的压缩，需要先下载rar for linux<br>zip jpg.zip *.jpg &#x2F;&#x2F;zip格式的压缩，需要先下载zip for linux</p></blockquote><p><strong>解压</strong></p><blockquote><p>tar –xvf file.tar &#x2F;&#x2F;解压 tar包<br>tar -xzvf file.tar.gz &#x2F;&#x2F;解压tar.gz<br>tar -xjvf file.tar.bz2 &#x2F;&#x2F;解压 tar.bz2<br>tar –xZvf file.tar.Z &#x2F;&#x2F;解压tar.Z<br>unrar e file.rar &#x2F;&#x2F;解压rar<br>unzip file.zip &#x2F;&#x2F;解压zip </p></blockquote><h3 id="2-7-关机和重启命令"><a href="#2-7-关机和重启命令" class="headerlink" title="2.7 关机和重启命令"></a>2.7 关机和重启命令</h3><h4 id="2-7-1-shutdown"><a href="#2-7-1-shutdown" class="headerlink" title="2.7.1 shutdown"></a>2.7.1 shutdown</h4><p>shutdown 关机命令</p><ul><li><p>-c 取消前一个关机命令</p></li><li><p>-h 关机</p></li><li><p>-r 重启</p><pre class="line-numbers language-none"><code class="language-none">shutdown -r 06:00shutdown -c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="2-7-2-init"><a href="#2-7-2-init" class="headerlink" title="2.7.2 init"></a>2.7.2 init</h4><p>关机</p><pre class="line-numbers language-none"><code class="language-none">init 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重启</p><pre class="line-numbers language-none"><code class="language-none">init 6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>系统的运行级别</p><ul><li>0 关机</li><li>1 但用户</li><li>2 不 完全多用户，不包含NFS服务</li><li>3 完全多用户</li><li>4 未分配</li><li>5 图形界面</li><li>6 重启</li></ul><h4 id="2-7-3-logout"><a href="#2-7-3-logout" class="headerlink" title="2.7.3 logout"></a>2.7.3 logout</h4><p>退出登录</p><pre class="line-numbers language-none"><code class="language-none">logout<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-9-查看登录用户信息"><a href="#2-9-查看登录用户信息" class="headerlink" title="2.9 查看登录用户信息"></a>2.9 查看登录用户信息</h3><h4 id="2-9-1-w"><a href="#2-9-1-w" class="headerlink" title="2.9.1 w"></a>2.9.1 w</h4><p>查看登录用户信息</p><ul><li>USER 登录的用户名</li><li>TTY 登录的终端 tty1 本地终端 pts&#x2F;0远程终端</li><li>FROM 登录的IP</li><li>LOGIN 登录时间</li><li>IDLE 用户闲置时间</li><li>JCPU 该终端所有进程占用的时间</li><li>PCPU 当前进程所占用的时间</li><li>WHAT 正在执行的命令</li></ul><h4 id="2-9-2-who"><a href="#2-9-2-who" class="headerlink" title="2.9.2 who"></a>2.9.2 who</h4><p>查看登录用户信息</p><ul><li>USER 登录的用户名</li><li>TTY 登录的终端 tty1 本地终端 pts&#x2F;0远程终端</li><li>LOGIN 登录时间（登录的IP）</li></ul><h4 id="2-9-3-last"><a href="#2-9-3-last" class="headerlink" title="2.9.3 last"></a>2.9.3 last</h4><p>查看当前登录和过去登录的用户信息 默认读取 <code>/var/log/wtmp</code> 文件</p><ul><li>用户名</li><li>登录终端</li><li>登录IP</li><li>登录时间</li><li>退出时间(在线时间)</li></ul><h4 id="2-9-4-lastlog"><a href="#2-9-4-lastlog" class="headerlink" title="2.9.4 lastlog"></a>2.9.4 lastlog</h4><p>查看所有用户的最后一次登录时间</p><ul><li>用户名</li><li>登录终端</li><li>登录IP</li><li>最后一次登录时间</li></ul><h2 id="3-shell"><a href="#3-shell" class="headerlink" title="3. shell"></a>3. shell</h2><ul><li>shell是一个命令行解释器，它为用户提供了一个向Linux内核发送请求以便运行程序的界面系统级程序</li><li>用户可以用Shell来启动、挂起、停止或者编写一些程序</li><li>Shell还是一个功能相当强大的编程语言，易编写，易调试，灵活性较强。</li><li>Shell是解释执行的脚本语言，在Shell中可以直接调用Linux系统命令。</li></ul><h3 id="3-1-查看支持的shell"><a href="#3-1-查看支持的shell" class="headerlink" title="3.1 查看支持的shell"></a>3.1 查看支持的shell</h3><ul><li>&#x2F;etc&#x2F;shells</li></ul><h3 id="3-2-echo"><a href="#3-2-echo" class="headerlink" title="3.2 echo"></a>3.2 echo</h3><ul><li>输出命令</li><li>--e 支持反斜线控制的字符转换</li></ul><table><thead><tr><th>控制字符</th><th>作用</th></tr></thead><tbody><tr><td>\a</td><td>输出警告音</td></tr><tr><td>\b</td><td>退格键，也就是向左删除键</td></tr><tr><td>\n</td><td>换行符</td></tr><tr><td>\r</td><td>回车键</td></tr><tr><td>\t</td><td>制表符，也就是Tab键</td></tr><tr><td>\v</td><td>垂直制表符</td></tr><tr><td>\onnn</td><td>按照八进制ASCII码表输出字符，其中0为数字零，nnn是三位八进制数</td></tr><tr><td>\xhh</td><td>按照十六进制ASCII码表输出字符，其中hh是两位十六进制数</td></tr></tbody></table><h3 id="3-3-编写执行shell"><a href="#3-3-编写执行shell" class="headerlink" title="3.3 编写执行shell"></a>3.3 编写执行shell</h3><pre class="line-numbers language-none"><code class="language-none">#!&#x2F;bin&#x2F;bashecho -e &quot;\e[1;34m hello world \e[0m&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>赋予执行权限，直接运行</p><pre class="line-numbers language-none"><code class="language-none">chmod 755 hello.sh.&#x2F;hello.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过Bash调用执行脚本</p><pre class="line-numbers language-none"><code class="language-none">bash hello.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-4-别名"><a href="#3-4-别名" class="headerlink" title="3.4 别名"></a>3.4 别名</h3><ul><li>命令别名 &#x3D;&#x3D; 小名</li><li>临时生效</li><li>alias</li><li>alias rm&#x3D;”rm -i”</li><li>写入环境变量配置文件 vi ~&#x2F;.bashrc</li><li>source ~&#x2F;.bashrc</li><li>unalias 别名 删除别名</li></ul><h3 id="3-5-命令的生效顺序"><a href="#3-5-命令的生效顺序" class="headerlink" title="3.5 命令的生效顺序"></a>3.5 命令的生效顺序</h3><ul><li>绝对路径或者相对路径</li><li>别名</li><li>bash内部命令</li><li>按照$PATH环境变量定义的目录查找顺序找到的第一个命令</li></ul><h3 id="3-6-命令快捷键"><a href="#3-6-命令快捷键" class="headerlink" title="3.6 命令快捷键"></a>3.6 命令快捷键</h3><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>ctrl+c</td><td>强制终止当前命令</td></tr><tr><td>ctrl+l</td><td>清屏</td></tr><tr><td>ctrl+a</td><td>光标移动到命令行首</td></tr><tr><td>ctrl+e</td><td>光标移动到命令行尾</td></tr><tr><td>ctrl+u</td><td>从光标所在的位置删除到行首</td></tr><tr><td>ctrl+z</td><td>把命令放入后台</td></tr><tr><td>ctrl+r</td><td>在历史命令中搜索</td></tr></tbody></table><h3 id="3-7-历史命令"><a href="#3-7-历史命令" class="headerlink" title="3.7 历史命令"></a>3.7 历史命令</h3><ul><li><p>history [选项] [历史命令保存文件]</p></li><li><p>选项</p><ul><li>-c 清空历史命令</li><li>-w 把缓存中的历史命令写入历史命令保存文件 ~&#x2F;.bash_history</li></ul></li><li><p>默认保存1000条 &#x2F;etc&#x2F;profile HISSIZE&#x3D;10000</p></li></ul><h3 id="3-8-调用"><a href="#3-8-调用" class="headerlink" title="3.8 调用"></a>3.8 调用</h3><ul><li>使用上下箭头调用以前的历史命令</li><li>使用 !n 重复执行第n条历史命令</li><li>使用 !! 重复执行上一条命令</li><li>使用 !字符 重复执行最后一条以该字符串开头的命令</li></ul><h3 id="3-9-管道符号"><a href="#3-9-管道符号" class="headerlink" title="3.9 管道符号"></a>3.9 管道符号</h3><h4 id="3-9-1-多命令顺序执行"><a href="#3-9-1-多命令顺序执行" class="headerlink" title="3.9.1 多命令顺序执行"></a>3.9.1 多命令顺序执行</h4><p>(1) ; 分号，没有任何逻辑关系的连接符。当多个命令用分号连接时，各命令之间的执行成功与否彼此没有任何影响，都会一条一条执行下去。</p><p>(2) || 逻辑或，当用此连接符连接多个命令时，前面的命令执行成功，则后面的命令不会执行。前面的命令执行失败，后面的命令才会执行。</p><p>(3) &amp;&amp; 逻辑与，当用此连接符连接多个命令时，前面的命令执行成功，才会执行后面的命令，前面的命令执行失败，后面的命令不会执行，与 || 正好相反。</p><p>(4) | 管道符，当用此连接符连接多个命令时，前面命令执行的正确输出，会交给后面的命令继续处理。若前面的命令执行失败，则会报错，若后面的命令无法处理前面命令的输出，也会报错。</p><pre class="line-numbers language-none"><code class="language-none">- date;ls;date;ls- ls &amp;&amp; echo yes || echo no<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-9-2-管道符号"><a href="#3-9-2-管道符号" class="headerlink" title="3.9.2 管道符号"></a>3.9.2 管道符号</h4><ul><li><p>命令1的正确输出会作为命令2的操作对象</p></li><li><p>命令1|命令2</p><pre class="line-numbers language-none"><code class="language-none">ls &#x2F;etc&#x2F; | morenetstat -an | grep ESTABLISHED | wc -l<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="3-9-3-通配符"><a href="#3-9-3-通配符" class="headerlink" title="3.9.3 通配符"></a>3.9.3 通配符</h4><p>匹配文件名和目录名 |通配符|作用| |:—-|:—-| |?|匹配一个任意字符| |*|匹配0个或任意字符，也就是可以匹配任意内容| |[]|匹配中括号中任意一个字符| |[-]|匹配中括号中任意一个字符,-代表范围| |[^]|匹配不是中括号中的一个字符|</p><h4 id="3-9-4-其它符号"><a href="#3-9-4-其它符号" class="headerlink" title="3.9.4 其它符号"></a>3.9.4 其它符号</h4><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>‘’</td><td>单引号。在单引号中所有的特殊符号，如$和`都没有特殊含义</td></tr><tr><td>“”</td><td>双引号，在双引号里特殊符号都没有特殊含义，但是 $ ` \ 例外，拥有调用变量值，引用命令和转义的含义</td></tr><tr><td>&#96;&#96;</td><td>反引号，扩起来的是系统命令</td></tr><tr><td>$()</td><td>和反引号一样</td></tr><tr><td>#</td><td>在shell脚本中，#开头的行代表注释</td></tr><tr><td>$</td><td>用于调用变量的值</td></tr><tr><td>\</td><td>转义符号</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">-  a&#x3D;&#96;ls&#96;-  b&#x3D;$(ls)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-vi编辑器"><a href="#4-vi编辑器" class="headerlink" title="4. vi编辑器"></a>4. vi编辑器</h2><ul><li>VI visual interface</li><li>可视化接口</li><li>类似与windows中的记事本</li><li>vim支持多级撤销</li><li>跨平台</li><li>语法高亮</li><li>支持图形界面</li></ul><h3 id="4-1-操作模式"><a href="#4-1-操作模式" class="headerlink" title="4.1 操作模式"></a>4.1 操作模式</h3><ul><li>:w 保存</li><li>:q 退出</li><li>:! 强制保存</li><li>:ls 列出所有的文件</li><li>:n 下一个</li><li>:N 上一个</li><li>:15 跳转到指定行</li><li>&#x2F;xxx 从光标位置开始向后搜索 xxx 字符串</li><li>?xxx 从光标位置开始向前搜索</li></ul><h2 id="5-用户和用户组"><a href="#5-用户和用户组" class="headerlink" title="5. 用户和用户组"></a>5. 用户和用户组</h2><ul><li>使用操作系统的人都是用户</li><li>用户组是具有相同系统权限的一组用户</li></ul><h3 id="5-1-用户组"><a href="#5-1-用户组" class="headerlink" title="5.1 用户组"></a>5.1 用户组</h3><h4 id="5-1-1-etc-group"><a href="#5-1-1-etc-group" class="headerlink" title="5.1.1 &#x2F;etc&#x2F;group"></a>5.1.1 &#x2F;etc&#x2F;group</h4><ul><li>&#x2F;etc&#x2F;group 存储当前系统中所有用户组信息</li><li>group:x:123:abc,def</li><li>组名称:组密码占位符:组编号:组中用户名列表</li><li>root 组编号为0</li><li>1-499系统预留的编号 预留给安装的软件和服务的</li><li>用户手动创建的用户组从500开始</li><li>组密码占位符都是x</li></ul><h4 id="5-1-2-etc-gshadow"><a href="#5-1-2-etc-gshadow" class="headerlink" title="5.1.2 &#x2F;etc&#x2F;gshadow"></a>5.1.2 &#x2F;etc&#x2F;gshadow</h4><ul><li>存放当前系统中用户组的密码信息</li><li>和group中的记录一一对应</li><li>Group: * : :abc</li><li>组名称 组密码 组管理者 组中用户名</li></ul><h4 id="5-1-3-etc-passwd"><a href="#5-1-3-etc-passwd" class="headerlink" title="5.1.3 &#x2F;etc&#x2F;passwd"></a>5.1.3 &#x2F;etc&#x2F;passwd</h4><ul><li>存储当前系统中所有用户的信息</li><li>user:x:123:456:xxxxx:&#x2F;home&#x2F;user:&#x2F;bin&#x2F;bash</li><li>用户名:密码占位符:用户编号: 用户注释信息:用户主目录:shell类型</li></ul><h4 id="5-1-4-etc-shadow"><a href="#5-1-4-etc-shadow" class="headerlink" title="5.1.4 &#x2F;etc&#x2F;shadow"></a>5.1.4 &#x2F;etc&#x2F;shadow</h4><ul><li>存放当前系统中所有用户的密码信息</li><li>user:xxx:::::::</li><li>用户名:密码:</li></ul><h2 id="6-用户操作"><a href="#6-用户操作" class="headerlink" title="6. 用户操作"></a>6. 用户操作</h2><p>添加组</p><pre class="line-numbers language-none"><code class="language-none">groupadd student<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改组名称</p><pre class="line-numbers language-none"><code class="language-none">groupmod -n stu student <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改组编号</p><pre class="line-numbers language-none"><code class="language-none">groupmod -g 111 stu <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加分组并指定编号</p><pre class="line-numbers language-none"><code class="language-none">groupadd -g 222 teacher <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除分组</p><pre class="line-numbers language-none"><code class="language-none">groupdel 222 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加分组</p><pre class="line-numbers language-none"><code class="language-none">groupadd teacher <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为用户指定所属组</p><pre class="line-numbers language-none"><code class="language-none">useradd -g teacher zhangsan <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为用户指定所属组</p><pre class="line-numbers language-none"><code class="language-none">useradd -g teacher lisi <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为用户指定工作目录</p><pre class="line-numbers language-none"><code class="language-none">useradd -d &#x2F;home&#x2F;zhangsan zhangsan <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>指定注释</p><pre class="line-numbers language-none"><code class="language-none">usermod -c iamateacher zhangsan <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改用户名</p><pre class="line-numbers language-none"><code class="language-none">usermod -l zhangsan zhangsan2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>指定文件夹</p><pre class="line-numbers language-none"><code class="language-none">usermod -d &#x2F;home&#x2F;zhangsan2 zhangsan2 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改用户所属组</p><pre class="line-numbers language-none"><code class="language-none">usermod -g stu zhangsan2 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除用户</p><pre class="line-numbers language-none"><code class="language-none">userdel zhangsan2 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除所属文件夹</p><pre class="line-numbers language-none"><code class="language-none">userdel -r lisi <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="7-用户命令"><a href="#7-用户命令" class="headerlink" title="7. 用户命令"></a>7. 用户命令</h2><p>显示登录的用户名</p><pre class="line-numbers language-none"><code class="language-none">whoami<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示指定用户信息，包括用户编号，用户名 主要组的编号及名称，附属组列表</p><pre class="line-numbers language-none"><code class="language-none">id zhangsan  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示zhangsan用户所在的所有组</p><pre class="line-numbers language-none"><code class="language-none">groups zhangsan <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示用户详细资料</p><pre class="line-numbers language-none"><code class="language-none">finger zhangsan  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="8-附录"><a href="#8-附录" class="headerlink" title="8. 附录"></a>8. 附录</h2><h3 id="8-1-系统启动"><a href="#8-1-系统启动" class="headerlink" title="8.1 系统启动"></a>8.1 系统启动</h3><h4 id="8-1-1-BIOS"><a href="#8-1-1-BIOS" class="headerlink" title="8.1.1 BIOS"></a>8.1.1 BIOS</h4><ul><li>计算机通电后，第一件事就是读取刷入ROM芯片的开机程序，这个程序叫做(Basic Input&#x2F;Output System)</li></ul><h4 id="8-1-2-硬件自检"><a href="#8-1-2-硬件自检" class="headerlink" title="8.1.2 硬件自检"></a>8.1.2 硬件自检</h4><ul><li>BIOS程序首先检查，计算机硬件能否满足运行的基本条件，这叫做”硬件自检”（Power-On Self-Test)</li><li>如果硬件出现问题，主板会发出不同含义的蜂鸣，启动中止。如果没有问题，屏幕就会显示出CPU、内存、硬盘等信息。</li></ul><h4 id="8-1-3-启动顺序"><a href="#8-1-3-启动顺序" class="headerlink" title="8.1.3 启动顺序"></a>8.1.3 启动顺序</h4><ul><li>硬件自检完成后，BIOS把控制权转交给下一阶段的启动程序。</li><li>这时，BIOS需要知道，”下一阶段的启动程序”具体存放在哪一个设备</li><li>BIOS需要有一个外部储存设备的排序，排在前面的设备就是优先转交控制权的设备。这种排序叫做”启动顺序”（Boot Sequence）</li><li>BIOS按照”启动顺序”，把控制权转交给排在第一位的储存设备。</li><li>这时，计算机读取该设备的第一个扇区，也就是读取最前面的512个字节。如果这512个字节的最后两个字节是0x55和0xAA，表明这个设备可以用于启动；如果不是，表明设备不能用于启动，控制权于是被转交给”启动顺序”中的下一个设备。</li><li>这最前面的512个字节，就叫做”主引导记录”（Master boot record，缩写为MBR）</li></ul><h4 id="8-1-4-主引导记录的结构"><a href="#8-1-4-主引导记录的结构" class="headerlink" title="8.1.4 主引导记录的结构"></a>8.1.4 主引导记录的结构</h4><ul><li><p>“主引导记录”只有512个字节，放不了太多东西。它的主要作用是，告诉计算机到硬盘的哪一个位置去找操作系统。</p><ul><li>（1） 第1-446字节：是用来记录系统的启动信息的,调用操作系统的机器码</li><li>（2） 第447-510字节(64个字节)：分区表（Partition table），分区表的作用，是将硬盘分成若干个区</li><li>（3） 第511-512字节：主引导记录签名（0x55和0xAA）</li></ul></li></ul><h4 id="8-1-5-分区表"><a href="#8-1-5-分区表" class="headerlink" title="8.1.5 分区表"></a>8.1.5 分区表</h4><ul><li><p>磁盘分区是使用分区编辑器在磁盘上划分几个逻辑部分</p></li><li><p>磁盘一旦划分成多个分区，不同类的目录与文件可以存储进不同的分区内</p></li><li><p>“主引导记录”因此必须知道将控制权转交给哪个区</p></li><li><p>分区表的长度只有64个字节，里面又分成四项，每项16个字节。所以，一个硬盘最多只能分四个一级分区，又叫做”主分区”</p><ul><li>（1） 第1个字节：如果为0x80，就表示该主分区是激活分区，控制权要转交给这个分区。四个主分区里面只能有一个是激活的。</li><li>（2） 第2-4个字节：主分区第一个扇区的物理位置（柱面、磁头、扇区号等等）。</li><li>（3） 第5个字节：主分区类型，比如FAT32、NTFS等。</li><li>（4） 第6-8个字节：主分区最后一个扇区的物理位置。</li><li>（5） 第9-12字节：该主分区第一个扇区的逻辑地址。</li><li>（6） 第13-16字节：主分区的扇区总数。</li></ul></li></ul><h4 id="8-1-6-硬盘启动"><a href="#8-1-6-硬盘启动" class="headerlink" title="8.1.6 硬盘启动"></a>8.1.6 硬盘启动</h4><ul><li>计算机的控制权就要转交给硬盘的某个分区了</li><li>四个主分区里面，只有一个是激活的。计算机会读取激活分区的第一个扇区，叫做”卷引导记录”（Volume boot record，缩写为VBR）</li></ul><h4 id="8-1-7-操作系统"><a href="#8-1-7-操作系统" class="headerlink" title="8.1.7 操作系统"></a>8.1.7 操作系统</h4><ul><li>控制权转交给操作系统后，操作系统的内核首先被载入内存。</li><li>以Linux系统为例，先载入<code>/boot</code>目录下面的<code>kernel</code>。内核加载成功后，第一个运行的程序是<code>/sbin/init</code>。它根据配置文件（Debian系统是&#x2F;etc&#x2F;initab）产生init进程。这是Linux启动后的第一个进程，pid进程编号为1，其他进程都是它的后代</li><li>然后，<code>init</code>线程加载系统的各个模块，比如窗口程序和网络程序，直至执行<code>/bin/login</code>程序，跳出登录界面，等待用户输入用户名和密码。</li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS实现鼠标悬停后卡片上升并出现亮光特效</title>
      <link href="/2023/12/09/ma-hai-wu-ya-css-shi-xian-shu-biao-xuan-ting-hou-qia-pian-shang-sheng-bing-chu-xian-liang-guang-te-xiao/"/>
      <url>/2023/12/09/ma-hai-wu-ya-css-shi-xian-shu-biao-xuan-ting-hou-qia-pian-shang-sheng-bing-chu-xian-liang-guang-te-xiao/</url>
      
        <content type="html"><![CDATA[<h3 id="码海无涯系列，写给自己的注释"><a href="#码海无涯系列，写给自己的注释" class="headerlink" title="码海无涯系列，写给自己的注释"></a>码海无涯系列，写给自己的注释</h3><h3 id="码海无涯-CSS实现鼠标悬停后卡片上升并出现亮光特效"><a href="#码海无涯-CSS实现鼠标悬停后卡片上升并出现亮光特效" class="headerlink" title="码海无涯-CSS实现鼠标悬停后卡片上升并出现亮光特效"></a>码海无涯-CSS实现鼠标悬停后卡片上升并出现亮光特效</h3><P>网上看到一个HTML代码，是鼠标悬停后卡片上升并出现亮光<br>突发奇想改造了一下，左上角加了一个字，右下角也加了一个字<br>令其能在鼠标悬停时，出现一个字<br>看不懂的初学者，可以把<br>.box1:transform: skew(-30deg) 和 .box的overflow: hidden<br>注释掉，看看是怎么运作的<br><br>知识点归纳：<br><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token function">matrix</span><span class="token punctuation">(</span><span class="token function">scaleX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">skewY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">skewX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">scaleY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">translateX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">translateY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>scaleX() (水平缩放)：控制元素水平方向的缩放。如果值为 1，则不进行水平缩放；如果大于 1，则放大；如果在 0 和 1 之间，则缩小。<br>skewY() (垂直倾斜)：控制元素在垂直方向上的倾斜。<br>skewX() (水平倾斜)：控制元素在水平方向上的倾斜。<br>scaleY() (垂直缩放)：控制元素垂直方向的缩放。如果值为 1，则不进行垂直缩放；如果大于 1，则放大；如果在 0 和 1 之间，则缩小。<br>translateX() (水平平移)：控制元素在水平方向上的平移量。<br>translateY() (垂直平移)：控制元素在垂直方向上的平移量。<br>即在不变换的情况下是matrix(1, 0, 0, 1, 0, 0)<br></P></p><table class="reference" style="border: 0px; margin: 4px 0px; padding: 0px; border-collapse: collapse; width: 824.125px; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; font-size: 11.25px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;">    <tbody style="border: 0px; margin: 0px; padding: 0px;">        <tr style="border: 0px; margin: 0px; padding: 0px; background-color: rgb(246, 244, 240);">            <th style="border: 1px solid rgb(85, 85, 85); margin: 0px; padding: 3px; font-size: 14px; color: rgb(255, 255, 255); background-color: rgb(85, 85, 85); vertical-align: top; text-align: left; width: 199.198px;">            函数</th>            <th style="border: 1px solid rgb(85, 85, 85); margin: 0px; padding: 3px; font-size: 14px; color: rgb(255, 255, 255); background-color: rgb(85, 85, 85); vertical-align: top; text-align: left;">            描述</th>        </tr>        <tr style="border: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);">            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; min-width: 24px; line-height: 2em; vertical-align: top;">            matrix(<i>n</i>,<i>n</i>,<i>n</i>,<i>n</i>,<i>n</i>,<i>n</i>)</td>            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; line-height: 2em; min-width: 24px; vertical-align: top;">            定义 2D 转换，使用六个值的矩阵。</td>        </tr>        <tr style="border: 0px; margin: 0px; padding: 0px; background-color: rgb(246, 244, 240);">            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; min-width: 24px; line-height: 2em; vertical-align: top;">            translate(<i>x</i>,<i>y</i>)</td>            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; line-height: 2em; min-width: 24px; vertical-align: top;">            定义 2D 转换，沿着 X 和 Y 轴移动元素。</td>        </tr>        <tr style="border: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);">            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; min-width: 24px; line-height: 2em; vertical-align: top;">            translateX(<i>n</i>)</td>            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; line-height: 2em; min-width: 24px; vertical-align: top;">            定义 2D 转换，沿着 X 轴移动元素。</td>        </tr>        <tr style="border: 0px; margin: 0px; padding: 0px; background-color: rgb(246, 244, 240);">            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; min-width: 24px; line-height: 2em; vertical-align: top;">            translateY(<i>n</i>)</td>            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; line-height: 2em; min-width: 24px; vertical-align: top;">            定义 2D 转换，沿着 Y 轴移动元素。</td>        </tr>        <tr style="border: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);">            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; min-width: 24px; line-height: 2em; vertical-align: top;">            scale(<i>x</i>,<i>y</i>)</td>            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; line-height: 2em; min-width: 24px; vertical-align: top;">            定义 2D 缩放转换，改变元素的宽度和高度。</td>        </tr>        <tr style="border: 0px; margin: 0px; padding: 0px; background-color: rgb(246, 244, 240);">            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; min-width: 24px; line-height: 2em; vertical-align: top;">            scaleX(<i>n</i>)</td>            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; line-height: 2em; min-width: 24px; vertical-align: top;">            定义 2D 缩放转换，改变元素的宽度。</td>        </tr>        <tr style="border: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);">            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; min-width: 24px; line-height: 2em; vertical-align: top;">            scaleY(<i>n</i>)</td>            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; line-height: 2em; min-width: 24px; vertical-align: top;">            定义 2D 缩放转换，改变元素的高度。</td>        </tr>        <tr style="border: 0px; margin: 0px; padding: 0px; background-color: rgb(246, 244, 240);">            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; min-width: 24px; line-height: 2em; vertical-align: top;">            rotate(<i>angle</i>)</td>            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; line-height: 2em; min-width: 24px; vertical-align: top;">            定义 2D 旋转，在参数中规定角度。</td>        </tr>        <tr style="border: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);">            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; min-width: 24px; line-height: 2em; vertical-align: top;">            skew(<i>x-angle</i>,<i>y-angle</i>)</td>            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; line-height: 2em; min-width: 24px; vertical-align: top;">            定义 2D 倾斜转换，沿着 X 和 Y 轴。</td>        </tr>        <tr style="border: 0px; margin: 0px; padding: 0px; background-color: rgb(246, 244, 240);">            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; min-width: 24px; line-height: 2em; vertical-align: top;">            skewX(<i>angle</i>)</td>            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; line-height: 2em; min-width: 24px; vertical-align: top;">            定义 2D 倾斜转换，沿着 X 轴。</td>        </tr>        <tr style="border: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);">            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; min-width: 24px; line-height: 2em; vertical-align: top;">            skewY(<i>angle</i>)</td>            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; line-height: 2em; min-width: 24px; vertical-align: top;">            定义 2D 倾斜转换，沿着 Y 轴。</td>        </tr></table><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/Ma-hai-wu-ya/a2.gif" alt="截图" title="代码效果示例"></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">.box</span> <span class="token punctuation">&#123;</span>            <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #000<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 100px auto<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> all .1s<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.box1</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> -110%<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>            <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>130deg<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> .5<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">skew</span><span class="token punctuation">(</span>-30deg<span class="token punctuation">)</span>             <span class="token comment">/* skew(x-angle,y-angle)定义沿着 X 和 Y 轴的 2D 倾斜转换。                包含两个参数值，分别表示X轴和Y轴倾斜的角度，如果第二个参数为空，则默认为0，参数为负表示向相反方向倾斜。               transform的值有20多个，如：translate，scale，rotate，skew，perspective，matrix            */</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.box:hover .box1</span> <span class="token punctuation">&#123;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 110%<span class="token punctuation">;</span> <span class="token comment">/* 离父盒子左边，1.1倍box1的宽的距离 */</span>            <span class="token property">transition</span><span class="token punctuation">:</span> all .1s<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.box:hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-20px<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Hover往上提升20px 坐标原点是左下角，Y轴与笛卡尔坐标正负相反 */</span>            <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 26px 40px -24px <span class="token function">rgb</span><span class="token punctuation">(</span>0 36 100 / 50%<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.box3</span> <span class="token punctuation">&#123;</span>            <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>            <span class="token property">margin-right</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>            <span class="token property">margin-top</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 23px<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">skew</span><span class="token punctuation">(</span>30deg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 矫正文字因box1扭曲带来的变形*/</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.box4</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span> <span class="token comment">/* 绝对定位固定在底边 */</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">skew</span><span class="token punctuation">(</span>30deg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 矫正文字因box1扭曲带来的变形*/</span>            <span class="token property">margin-left</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 28px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>战<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>战<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 码海无涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 码海无涯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>码海无涯--实现一个“欺骗式”的图片滚动(js)</title>
      <link href="/2023/12/09/ma-hai-wu-ya-shi-xian-yi-ge-qi-pian-shi-de-tu-pian-gun-dong-js/"/>
      <url>/2023/12/09/ma-hai-wu-ya-shi-xian-yi-ge-qi-pian-shi-de-tu-pian-gun-dong-js/</url>
      
        <content type="html"><![CDATA[<h3 id="码海无涯系列，写给自己的注释"><a href="#码海无涯系列，写给自己的注释" class="headerlink" title="码海无涯系列，写给自己的注释"></a>码海无涯系列，写给自己的注释</h3><h3 id="码海无涯–实现一个“欺骗式”的图片滚动-js"><a href="#码海无涯–实现一个“欺骗式”的图片滚动-js" class="headerlink" title="码海无涯–实现一个“欺骗式”的图片滚动(js)"></a>码海无涯–实现一个“欺骗式”的图片滚动(js)</h3><hr><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/Ma-hai-wu-ya/a1.gif" alt="截图" title="代码效果示例"></p><hr><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">#demo</span> <span class="token punctuation">&#123;</span>            <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token comment">/* 实际使用时，要改为hidden，以隐藏滚动条*/</span>            <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px dashed #ccc<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token selector">#indemo</span> <span class="token punctuation">&#123;</span><span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 900%<span class="token punctuation">;</span><span class="token comment">/* 这个很重要，要把它设置的大一点，否则你可以试试*/</span><span class="token punctuation">&#125;</span><span class="token selector">#demo1,#demo2</span> <span class="token punctuation">&#123;</span><span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">&#125;</span><span class="token selector">#demo2</span> <span class="token punctuation">&#123;</span><span class="token property">margin-left</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">img</span> <span class="token punctuation">&#123;</span><span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> 3px double #000<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.img1</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.img2</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> #cf2828<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.img3</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> #916060<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>indemo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>_blank</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>https://google.com</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img1<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>https://via.placeholder.com/150</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>_blank</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>https://google.com</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img2<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>https://via.placeholder.com/150</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>_blank</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>https://google.com</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img3<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>https://via.placeholder.com/150</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> speed <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">//时间为20ms</span><span class="token keyword">var</span> tab <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> tab1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> tab2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tab2<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> tab1<span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span> <span class="token comment">// 偷懒，复制demo的html语句给demo2</span><span class="token keyword">function</span> <span class="token function">Marquee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>tab2<span class="token punctuation">.</span>offsetWidth <span class="token operator">-</span> tab<span class="token punctuation">.</span>scrollLeft <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 当 tab2.offsetWidth - tab.scrollLeft &lt;= 0</span><span class="token comment">// offsetWidth 即不包括外边距（margin）的宽</span><span class="token comment">// scrollLeft  即滚动条到元素左边的距离</span><span class="token comment">// tab2.offsetWidth - tab.scrollLeft 即demo2（后面放图片的容器）总宽减去demo离左边的值</span><span class="token comment">// tab2.offsetWidth 表示滚动容器中内容的总宽度，即 demo2 的宽度。</span><span class="token comment">// tab.scrollLeft 表示滚动容器的当前水平滚动位置。</span><span class="token comment">// tab2.offsetWidth 是固定不变的(即 demo2 的宽)</span><span class="token comment">// tab.scrollLeft 其最大值则为demo2 的宽(因为demo的大小是里面的内容撑起来的, 可能会大点)</span><span class="token comment">// 当tab.scrollLeft达到最大值时(即等于大于demo2的宽)，意味着内容滚动到最左边，此时相减则 tab2.offsetWidth - tab.scrollLeft &lt;= 0</span><span class="token comment">// 所以，tab2.offsetWidth - tab.scrollLeft 表示内容的末尾距离滚动容器左侧的距离。当这个距离小于等于 0 时，说明滚动已经到达了末尾，此时我们希望将滚动位置重新设置为初始位置，实现循环滚动的效果。</span><span class="token comment">// 具体来说，如果 tab2.offsetWidth - tab.scrollLeft 小于等于 0，表示内容已经完全滚动出了可视区域，此时我们将 tab.scrollLeft 重置为 0，重新从左侧开始滚动，形成循环。否则，我们继续将 tab.scrollLeft 增加，实现滚动效果。</span><span class="token comment">// 这样的设置可以确保滚动不会无限制地继续，而是在内容末尾处重新开始，从而实现了无缝循环滚动。</span><span class="token comment">// if (tab2.offsetWidth - tab.scrollLeft &lt;= 0)这样的写法令人困惑，不如直接使用tab.scrollLeft >= tab2.offsetWidth</span>tab<span class="token punctuation">.</span>scrollLeft <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 滚动到末尾时重置为0，实现循环效果</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>tab<span class="token punctuation">.</span>scrollLeft<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">// tab.scrollLeft++; 表示将 tab 元素的水平滚动位置向右移动一个像素。这行代码是在检测到内容未完全滚动出可视区域时执行的，即 tab2.offsetWidth - tab.scrollLeft 大于 0 的情况。</span><span class="token comment">// 通过递增 tab.scrollLeft，实现了内容向左滚动的效果。整个代码的逻辑是不断地在 setInterval 定时器中执行 Marquee 函数，而 Marquee 函数中根据滚动位置和内容宽度的关系来判断是继续向右滚动还是重新回到最左侧开始滚动，从而实现了水平滚动的效果。</span><span class="token comment">// 总体来说，tab.scrollLeft++; 表示不断向右滚动一个像素，以实现水平滚动效果。</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> MyMar <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>Marquee<span class="token punctuation">,</span> speed<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用JS的setInterval内置定时函数，执行Marquee，按照指定的时间间隔（以毫秒为单位）来触发，本例为20ms（传入的参数为：Marquee, speed）</span>tab<span class="token punctuation">.</span><span class="token function-variable function">onmouseover</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">clearInterval</span><span class="token punctuation">(</span>MyMar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 鼠标移入时清除定时器，暂停滚动</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>tab<span class="token punctuation">.</span><span class="token function-variable function">onmouseout</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>MyMar <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>Marquee<span class="token punctuation">,</span> speed<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 鼠标移出时重新启动定时器，恢复滚动</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 初始调用一次Marquee函数，启动滚动</span><span class="token function">Marquee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 码海无涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> CSS </tag>
            
            <tag> 码海无涯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>40张图入门Linux</title>
      <link href="/2023/11/25/40-zhang-tu-ru-men-linux/"/>
      <url>/2023/11/25/40-zhang-tu-ru-men-linux/</url>
      
        <content type="html"><![CDATA[<h3 id="40张图入门Linux"><a href="#40张图入门Linux" class="headerlink" title="40张图入门Linux"></a>40张图入门Linux</h3><p><em>原文链接: <a href="https://juejin.cn/post/6844904198761349134">https://juejin.cn/post/6844904198761349134</a></em><br><em>原作者: 前端点线面</em></p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/1.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/2.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/3.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/4.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/5.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/6.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/7.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/8.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/9.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/10.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/11.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/12.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/13.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/14.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/15.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/16.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/17.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/18.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/19.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/20.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/21.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/22.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/23.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/24.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/25.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/26.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/27.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/28.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/29.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/30.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/31.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/32.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/33.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/34.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/35.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/36.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/37.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/38.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/39.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/40.png" alt="截图" title="40张图入门linux之一"></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx和Apache安装与基础部署</title>
      <link href="/2023/11/25/nginx-he-apache-an-zhuang-yu-ji-chu-bu-shu/"/>
      <url>/2023/11/25/nginx-he-apache-an-zhuang-yu-ji-chu-bu-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="Nginx和Apache安装与基础部署"><a href="#Nginx和Apache安装与基础部署" class="headerlink" title="Nginx和Apache安装与基础部署"></a>Nginx和Apache安装与基础部署</h3><h5 id="一：安装"><a href="#一：安装" class="headerlink" title="一：安装"></a>一：安装</h5><p>安装方式有多种，每种方式的繁琐程度不同</p><p>使用系统包管理器安装 使用源码编译安装 其中，使用系统包管理器安装如沐春风，使用源码编译安装味同嚼蜡。所以我只说用系统包管理器安装</p><h6 id="1、使用系统包管理器安装"><a href="#1、使用系统包管理器安装" class="headerlink" title="1、使用系统包管理器安装"></a>1、使用系统包管理器安装</h6><p>CentOS系统</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> epel-releaseyum <span class="token function">install</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Ubuntu系统</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看版本以确定是否安装成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nginx <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动 nginx</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl start nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="2、一些默认路径"><a href="#2、一些默认路径" class="headerlink" title="2、一些默认路径"></a>2、一些默认路径</h6><p>Nginx的网站文件存放在&#x2F;etc&#x2F;nginx&#x2F;sites-available目录下， 默认的静态网页文件夹是&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html目录 配置文件通常位于&#x2F;etc&#x2F;nginx目录下。具体的文件名可能是nginx.conf 查看Nginx的错误日志，通常位于 &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log</p><h6 id="3、设置html文件夹权限"><a href="#3、设置html文件夹权限" class="headerlink" title="3、设置html文件夹权限"></a>3、设置html文件夹权限</h6><p>直接用sftp上传文件到linux的html文件下 ，会报权限拒绝</p><p>可以先给html赋777权限，然后重启Linux</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 赋777权限<span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token parameter variable">-R</span> <span class="token number">777</span> /usr/share/nginx/html// 重启<span class="token function">sudo</span> <span class="token function">service</span> nginx reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>卸载nginx(purge参数是指删除删除安装包)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token parameter variable">--purge</span> remove nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="二：配置"><a href="#二：配置" class="headerlink" title="二：配置"></a>二：配置</h5><h6 id="1、隐藏某级路径"><a href="#1、隐藏某级路径" class="headerlink" title="1、隐藏某级路径"></a>1、隐藏某级路径</h6><p>如果你想将静态网页放在nginx的html的dist文件夹下，并希望在URL的某个端口号后不需要写dist就可以打开页面，你可以尝试使用rewrite规则来实现。如果你希望在不同的端口号上对应不同的文件夹，可以在nginx的配置文件中添加多个server块，每个块指定不同的端口号和对应的文件夹路径。以下是一个示例配置：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>  <span class="token directive"><span class="token keyword">listen</span> <span class="token number">8080</span></span><span class="token punctuation">;</span>  <span class="token directive"><span class="token keyword">root</span> /path/to/nginx/html/dist1</span><span class="token punctuation">;</span>  <span class="token directive"><span class="token keyword">index</span> index.html</span><span class="token punctuation">;</span>  <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ /index.html</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>  <span class="token directive"><span class="token keyword">listen</span> <span class="token number">8081</span></span><span class="token punctuation">;</span>  <span class="token directive"><span class="token keyword">root</span> /path/to/nginx/html/dist2</span><span class="token punctuation">;</span>  <span class="token directive"><span class="token keyword">index</span> index.html</span><span class="token punctuation">;</span>  <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ /index.html</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中的$uri是指匹配的正则路径，后面的index.html则是使用的文件（即访问$uri时，实际需要访问的文件）</p><h6 id="2、设置post请求代理"><a href="#2、设置post请求代理" class="headerlink" title="2、设置post请求代理"></a>2、设置post请求代理</h6><p>要在Nginx中配置静态网页的POST请求代理，你可以使用proxy_pass指令来将POST请求反向代理到另一个服务器或应用程序。其实就是在上面配置的server模块中，再加一个location。</p><p>以下是一个示例配置：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>  <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>  <span class="token directive"><span class="token keyword">server_name</span> example.com</span><span class="token punctuation">;</span>  <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">root</span> /path/to/your/static/files</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ =404</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token directive"><span class="token keyword">location</span> /api</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">rewrite</span> ^/api(.*)$ <span class="token variable">$1</span> break</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">proxy_pass</span> http://backend_server</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Real-IP <span class="token variable">$remote_addr</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面示例中，在location &#x2F;api块中添加了一个rewrite指令。这个指令会把请求URL中的&#x2F;api前缀去掉，并把剩余部分作为反向代理的路径。</p><p>这样，如果你的静态网站中的POST请求以&#x2F;api开头，Nginx将会代理这些请求至后端服务器，并将响应返回给客户端。URL中的&#x2F;api前缀将被移除，后端服务器收到的请求将是不带前缀的形式。</p><p>代理转发后的效果如下：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 浏览器看到的请求http:&#x2F;&#x2F;39.104.22.73&#x2F;api&#x2F;getarticlenum&#x2F;foreend&#x2F;&#x2F; 代理后实际的请求；http:&#x2F;&#x2F;39.104.22.73:8888&#x2F;getarticlenum&#x2F;foreend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>76张脑图学习JS</title>
      <link href="/2023/11/22/76-zhang-nao-tu-xue-xi-js/"/>
      <url>/2023/11/22/76-zhang-nao-tu-xue-xi-js/</url>
      
        <content type="html"><![CDATA[<h3 id="76张脑图学习JS"><a href="#76张脑图学习JS" class="headerlink" title="76张脑图学习JS"></a>76张脑图学习JS</h3><p><em>原文链接: <a href="https://juejin.cn/post/6844904166192578567">https://juejin.cn/post/6844904166192578567</a></em><br><em>原作者: 金色小芝麻</em></p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/1.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/2.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/3.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/4.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/5.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/6.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/7.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/8.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/9.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/10.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/11.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/12.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/13.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/14.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/15.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/16.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/17.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/18.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/19.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/20.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/21.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/22.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/23.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/24.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/25.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/26.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/27.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/28.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/29.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/30.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/31.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/32.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/33.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/34.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/35.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/36.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/37.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/38.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/39.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/40.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/41.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/42.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/43.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/44.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/45.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/46.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/47.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/48.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/49.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/50.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/51.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/52.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/53.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/54.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/55.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/56.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/57.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/58.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/59.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/60.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/61.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/62.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/63.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/64.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/65.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/66.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/67.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/68.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/69.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/70.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/71.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/72.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/73.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/74.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/75.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/76.png" alt="截图" title="76张脑图之一"></p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式入门</title>
      <link href="/2023/11/14/zheng-ze-biao-da-shi-ru-men/"/>
      <url>/2023/11/14/zheng-ze-biao-da-shi-ru-men/</url>
      
        <content type="html"><![CDATA[<h3 id="两篇优秀的正则文章"><a href="#两篇优秀的正则文章" class="headerlink" title="两篇优秀的正则文章"></a>两篇优秀的正则文章<br></h3><h4 id="正则表达式入门"><a href="#正则表达式入门" class="headerlink" title="正则表达式入门"></a>正则表达式入门</h4><p><a href="#A2">第二篇:JS正则表达式完整教程（略长）</a><br><br><br>原文：<a target="_blank" href="https://taoshu.in/hello-regexp.html">涛叔</a><br><br><br>正则表达式说白了就是一堆约定俗成的匹配规则。如果从微观入手，你会发现有背不完的规则；如果从宏观入手，你会发现万变不离其宗。所以我们将从宏观到微观依次说起，依次为大家总结三大宏观规则、两大微观规则，再附带一部分高级内容。基本可以通过一篇文章让大家理解正则表达式的主要用法。</p><p>先说三大宏观规则。</p><p>宏观规则<br>我们用大写字母表示抽象的正则规则，主要讨论正则之间的关系，忽略具体的内容</p><p>交集规则<br>如果有两个正则表达式E和F，那么EF也是一个正则，表示同时匹配E和F的内容。这跟编程中的逻辑与是一个意思，跟集合中的交集也是一个意思。你也可以连接任意多个正则，比如EFGH。</p><p>并集规则<br>如果有两个正则表达式E和F，那么E|F也是一个正则，表示匹配E或者匹配F。这跟编程中的逻辑或是一个意思，跟集合中的并集也是一个意思。 你可以使用|连接任意多个正则表达式，比如E|F|G|H。</p><p>如果你要连接非常多的正则，那就得写非常多的竖线，看起来非常乱。所以人们还约定了一种简化记法[EFGH]。也就是你写成[EFGH]跟写成E|F|G|H效果是一样，但前者更简短，更清晰。</p><p>补集规则<br>编程有与或非，集合有交并补。正则表达式有没有类似逻辑非或者集合中的补集呢？有，但记法比较复杂。如果你要排除匹配E和F的内容，需要写成[^EF]。</p><p>我们已经知道[EF]可以匹配那些匹配E或者匹配F的内空，在前加上一个^表示取反。因为取了反，原来的逻辑或关系变成了逻辑与（具体请参见德摩根定律）。所以[^EF]匹配那些不能匹配E而且不能匹配F的内容。</p><p>以上交并补规则单个看都不复杂，但它们可以任意组合，用起来就有点复杂。</p><p>比如A|BC|[^D]E表示匹配A或者同时匹配B和C或者不能匹配D但要匹配E的三种内容。这么长的规则只用A|BC|[^D]E就能准确表达，没有任何歧义，这就是正则的魅力。</p><p>这里有一个问题。A|BC|[^D]E表示A、BC和[^D]E的并集，还是表示A|BC跟[^D]E并集，还是表示A跟BC|[^D]E的并集呢？这就涉及到结合优先级的问题了。</p><p>正确的答案是第一种，被|分割的部分是平级的。如果你想表示A|BC跟[^D]E的并集，那你需要写成(A|BC)|[^D]E。对了，遇事不决加括号！</p><p>在前面的讨论中，ABCDE都是抽像的正则，我们并不关心具体的规则内容。而对应的交、并补规则对所有正则都管用。现在我们开始讨论两大微观规则。</p><p>微观规则<br>单字符规则<br>所谓单字符就是一次匹配一个字符，但字符的取值可能是五花八门。</p><p>一个字母a, 一个数字1都是正则，分别匹配包含a和包含1的内容。</p><p>如果我们想匹配数字1234，那么根据交集规则，我们写成1234就可以了。</p><p>如果我们想匹配所有可能出现的数字，则可以根据并集规则写成0|1|2|3|4|5|6|7|8|9。是不有点长。我们可以简化成[0123456789]。一下子少了很多坚线。</p><p>慢着，如果想匹配所有可能出现的小写字母呢？难不成要写成[abc此处省略20个字母xyz]？太长了😂</p><p>正则表达式为此提供了一种更加简化方法——连字符，可以使用减号-表示连续出现的字符，只需写出头尾。所以我们可以把[0123456789]进一步简化成[0-9]，把[abc…xyz]简化成[a-z]。</p><p>如果要匹配所有字母，不区分大小写，可以写成[a-zA-Z]，如果还想顺手匹配所有数字，可以写成[a-zA-Z0-9]。</p><p>因为[0-9]很常用，大家又进一步简化成了\d（对应单词 digit）。并非所有的正则引擎都支持这个\d，有的默认不支持，需要开启 perl 兼容的正则引擎才行。</p><p>因为[a-zA-Z]也很常用，大家就把它简化成\a（对应单词 alpha）。</p><p>同样的，如果想匹配大小写字母、数字和下划线（也就是所有单词字符），可以写成[a-zA-Z0-9_]。也是因为太常用，大家将其简化为\w（对应单词 word）。</p><p>如果想匹配一些空白字符，可以写成[ \t\r\n\v\f]，这个正则会匹配空格、水平制表符、回车、换行、 垂直制表符和 Page break 记。这里用到了跟 c 语言 printf 函数一样的转义字符。同样因为使用广泛，被简化为\s（对应单词 space）。</p><p>我们说过，正则支持取反操作。[0-9]表示匹配所有数字，那[^0-9]就表示匹配所有非数字字符。因为使用广泛，人们将其简写成\D。大家注意，[0-9]简写成\d（小写字母），对应的[^0-9]简写成\D（大写字母）。以此类推，\a取反是\A、\w取反是\W、\s取反是\S。一下子都记住了吧。</p><p>有了连字符和并集规则，理论上我们可以匹配所有字符。但是 Unicode 有上百万字符，难道我们都要写到方括号里吗？不能够。</p><p>我们可以利用取反操作。只要排除少量不常用字符，就可以匹配剩下的大多数字符了。但排除哪个呢？最终人们决定排除\n。为什么呢？因为一般而言，正则都是逐行匹配的，一次匹配一行内容，不会遇到换行符。最终可以用[^\n]表示匹配所有字符。同样因为太常用，这一写法被简化成句点.。 也就是说在正则表达式中，一个.可以匹配\n以外的所有字符。</p><p>最后需要额外说一下字符反斜杠\。我们前面提到的\d、\w都使用反斜杠进行转义。如果要匹配\就得写成\。因为好多语言的字符串也是使用反斜杠进行转义（比如用\n表示换行），所以你会在代码中看到像”\\“这样的写法。如果你是初学者，一定会这样的鬼画符吓到。其实很简单。 第一个反斜杠用于转义第二个反斜杠，表示一个反斜杠字符；第三个转义第四个。第一个和第三个反斜杠是给语言编译器用的。如果你用printf之类的函数将这段打印到标准输出，你会看到\，又是两个反斜杠。 这次转义是给正则引擎用的，用于表示匹配\这个字符。</p><p>那么多斜杠确实容易出错。好多语言都提供所谓 raw 字符串，这种字符串不支持转义功能，也就不需要写额外的反斜杠。比如在 go 语言中”\\“可以写成\&#96;（注意两侧的&#96;&#96;）是不是清爽多了🤪。</p><p>以上基本上就是单字符规则的所有内容。下面我们继续讨论第二条，多字符规则。</p><p>多字符规则<br>如果想匹配两位数字，可以利用交集规则，写成\d\d，此正则会先匹配一个数字再匹配一个数字，最终匹配的是两位数字。如果想匹配三位数字，需要写成\d\d\d，四位数字写成\d\d\d\d。</p><p>那如果想匹配一位或者两位数字或者三位数字或者四位数字（也就是四位以内的数字），需要写成</p><p>\d|\d\d|\d\d\d|\d\d\d\d<br>有点长，但是 it works！如果想匹配所有的八位以内的数字呢？那就得写很长很长了。为此，人们又想了个简化的办法。这次引入了大括号{}。</p><p>刚才的正则是可以简化成\d{1,4}，展开就是\d|\d\d|\d\d\d|\d\d\d\d。大括号中第一个数字表示最短匹配的次数，第二个数字表示最长匹配的次数。</p><p>如果想匹配八位以内的数字，就可以写成\d{1,8}，是不是很简洁呢？</p><p>如果只想匹配一个八位数，则可以写成\d{8,8}。重复写两个8好像有点多余，还是简化成\d{8}吧。</p><p>那能不能匹配任意长度的数字呢？ 理论上应该写成\d{1,∞}，只是这个∞不好写，干脆省略，写成\d{1,}算了。所以\d{1,}表示可以匹配一位、两位、一直到任意长度的数字。也就是说{1,}表示前面的匹配内容至少出现一次。因为这个至少出现一次也是特别常用，人们又进一步将其简化成+，最终我们的正则变成了\d+，优雅的不行。</p><p>那能不能实现匹配出现零次这种语义呢？ 可以，只要将大括号内第一个数字写成0就行。所以a{0,}可以匹配a、aa……aaaa……等各种情况。也就是说{0,}表示前面的匹配的内容出现多次或者不出现。 同样十分常用，被人们简化成了<em>。所以原来的正则可以简化成a</em>。</p><p>最后就是{0,1}这种情况了，显然表示出现零次或者一次。 不用说，懒人们将其简化成了?。所以ab?只能匹配a和ab两种情况。</p><p>看到这里，你基本已经理解了正则的常用功能。如果还不确定，就返回去再读几遍。最后我们引申出一些高级内容。</p><p>高级内容<br>先说一下贪心。</p><p>贪心<br>给定一段html </p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>this is a title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>this is content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果我们想匹配h1标签的内容，我们可以写成<br><code>&lt;h1&gt;.*&lt;/h1&gt;</code><br>这里写了两遍h1。 显然，不想重复。我看到&#x2F;h1后面有一个&gt;，我能不能将正则改成</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>呢？</p><p>大家可以自己试一下。正则引擎会一直匹配到</p>里面的&gt;。这是为什么呢？因为正则表达式默认使用贪心模式，一次性匹配尽可能长的内容。所以在找到&#x2F;h1后面的&gt;之后还会继续向前找。</p><p>那有办法修正这种行为吗？有，使用?。你可以将正则改为</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">?</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样引擎就会在第一次遇到&gt;的地方停下来。这里的?跟之前说的「出现零次或一次」可不是一个意思哈。跟在*后面表示非贪心模式。其实也是为了避免引入太多的特殊符号，所以复用了?，这一定程度上会给初学者带来困扰。没办法，大家只能克服了。</p><p>再说一下引用。</p><p>引用<br>给定一段 html<br><code>&lt;h1&gt;this is a title&lt;/h1&gt;&lt;h1&gt;this is content&lt;/h2&gt;</code><br>这里第二个h1没有闭合，结束标签写成了h2。如果只想匹配正常结束的h1，那可以写成<br><code>&lt;(h1)&gt;.*&lt;/\1&gt;</code></p><p>这里有两点。第一，前面的h1两边加了括号。第二，在结尾的地方使用了\1来引用前面加括号的内容。 正则引擎会为每个括号分配一个编号（从1开始记数），并记录括号的内容，大家可以使用+数字的方式来引用。这样的正则等价于<br><code>&lt;h1&gt;.*&lt;/h1&gt;</code></p><p>咋一看也没什么大不了的。但如果要匹配很多成对标签的话，引用的优势就体现出来了。例如<br><code>&lt;(h1|p|artice|div)&gt;.*?&lt;/\1&gt;</code><br>可以匹配h1、p、article和div四种闭合标签。</p><p>最后说一下环视。</p><p>环视<br>环视说起来有点抽像 。例子不太好举，这里我引用 stack over flow 的一篇回答内容。</p><p>比如我们有字符串foobarbarfoo。下面我将用大写字母表示想要匹配的内容。为了跟英语原文对应，我们规定当前字符右边为前（未处理），左边为后（已处理）。</p><p>如果只想匹配第一个出现的bar，也就是fooBARbarfoo。肯定不能只写成bar，因为第二个bar也会匹配到。我们希望正则引擎在每碰到一个bar的时候继续向前（右）看看还有没有bar，如果还有则说明不是第一个。所以，需要写成bar(?&#x3D;bar)。 括号里以?开头，&#x3D;表示检查是否出现， 因为是继续向前（右）看，所以叫做前向肯定环视（Look ahead positive）。</p><p>如果想匹配第二个bar也就是foobarBARfoo，则需要写成bar(?!bar)。也就是说查到bar只后还要继续向前（右）看，没有bar才算匹配到。因为是没有，所以叫前向否定环视（Look ahead negative）。</p><p>我还可以通过向后（左）看的办法来解决类似的问题。</p><p>如果想匹配第一个bar,也就是fooBARbarfoo，我们可以写成(?&lt;&#x3D;foo)bar，这是告诉正则引擎在找到bar之后还要回顾一下有没有遇到foo，只有碰到才算匹配成功。因为需向后（左）确定匹配成功，所以叫后向肯定环视（Look behind positive）。</p><p>如果想匹配第二个bar，也就是foobarBARfoo，我们可以写成(?&lt;!foo)bar，这是让引擎在找到bar之后回顾一下有没有遇到过foo，没有碰到才算匹配成功。因为需要向后（左）确定匹配不成功，所以叫后向否定环视（Look behind negative）。</p><p>我们稍微回顾一下。所有的环视都需要用括号括起来，以?开始。匹配之后继续向前（右）检查叫前叫前向环视，如果需要确保另一模式也匹配，叫肯定环视，用&#x3D;，否则是否定环视，用!；匹配之后继续向后（左）检查叫后向环视，为了跟前向有所区别，所以在?之后加了一个&lt;，为大家指明方向，肯定和否标记则跟前向一样。</p><p>理解了环视，我们还可以做一些更有意思的事情。</p><p>第一个，可以匹配单词的边界。一个单词两边都有空格。单词的左边界是一个虚拟的位置，它右边的字符肯定是匹配\w，它左边的内容肯定匹配\W。我们可以要求正则引擎同时向前看和向后看。所以可以写成(?&lt;&#x3D;\W)(?&#x3D;\w)。这里两个括号之间是空的，表示只匹配位置，不消耗内容。同样的，右边的边界也是个虚拟位置，它左边的字符肯定是匹配\w，它右边的字符肯定匹配\W的位置，所以可以写成(?&lt;&#x3D;\w)(?&#x3D;\W)。把这两个正则使用并集规则合到一起就是(?&lt;&#x3D;\W)(?&#x3D;\w)|(?&lt;&#x3D;\w)(?&#x3D;\W)，就可以匹配单词的左右边界。同样因为常用，人们把它简化成了\b。</p><p>也就是说\b匹配单词边界。正则\bbar只会匹配字符串foo bar中的bar，而不会匹配foobar中的bar。</p><p>第二个，可以匹配一行的开始和结束。一行的开始，顾名思义，就是第一个字符之前的位置，在它之前没有字符，在它之后是任意字符，所以我们可以写成(?&lt;!.)(?&#x3D;.)。对于一行的结束，我们可以如法炮制，写成(?&lt;&#x3D;.)(?!.)。同样因为常用，此二者被分别简化成了^和$。</p><p>因为一行的开始跟结束非常特殊，正则引擎可以直接标记，根本用不到环视这样的大招。 我将它们放到一起讲只是为了逻辑上的统一。</p><p>小结<br>差不多该搁笔了。所谓言有尽而意无穷。我们讲重构、讲抽象，说到底就是要站在更高的视角看问题，要有全局意识，要有大局观。学习正则就是一个很好的例子，如果不从整体上去认识它，就会陷入死记硬背各种模式境地，费时费力容易出错不说，最关键的是会消磨你的学习热情。所以，我们在埋头学习的时候一定要时常浮出水面透透气，多思考、多总结，这样才能事半功倍。与君共勉💯</p><h4 id="JS正则表达式完整教程（略长）"><a href="#JS正则表达式完整教程（略长）" class="headerlink" title="JS正则表达式完整教程（略长）"></a><span id="A2">JS正则表达式完整教程（略长）</span></h4><br>原文：<a target="_blank" href="https://juejin.cn/post/6844903487155732494">老姚</a>字数：245,907 阅读44分钟<br><p>注：本文已经整理成电子书：《JavaScript正则迷你书》</p><p>引言<br>亲爱的读者朋友，如果你点开了这篇文章，说明你对正则很感兴趣。</p><p>想必你也了解正则的重要性，在我看来正则表达式是衡量程序员水平的一个侧面标准。</p><p>关于正则表达式的教程，网上也有很多，相信你也看了一些。</p><p>与之不同的是，本文的目的是希望所有认真读完的童鞋们，都有实质性的提高。</p><p>本文内容共有七章，用JavaScript语言完整地讨论了正则表达式的方方面面。</p><p>如果觉得文章某块儿没有说明白清楚，欢迎留言，能力范围之内，老姚必做详细解答。</p><p>具体章节如下：</p><p>引言<br>第一章 正则表达式字符匹配攻略<br>第二章 正则表达式位置匹配攻略<br>第三章 正则表达式括号的作用<br>第四章 正则表达式回溯法原理<br>第五章 正则表达式的拆分<br>第六章 正则表达式的构建<br>第七章 正则表达式编程<br>后记<br>下面简单地说说每一章都讨论了什么？</p><p>正则是匹配模式，要么匹配字符，要么匹配位置。</p><p>第1章和第2章以这个角度去讲解了正则的基础。</p><p>在正则中可以使用括号捕获数据，要么在API中进行分组引用，要么在正则里进行反向引用。</p><p>这是第3章的主题，讲解了正则中括号的作用。</p><p>学习正则表达式，是需要了解其匹配原理的。</p><p>第4章，讲解了正则了正则表达式的回溯法原理。另外在第6章里，也讲解了正则的表达式的整体工作原理。</p><p>不仅能看懂别人的正则，还要自己会写正则。</p><p>第5章，是从读的角度，去拆分一个正则表达式，而第6章是从写的角度，去构建一个正则表达式。</p><p>学习正则，是为了在真实世界里应用的。</p><p>第7章讲解了正则的用法，和相关API需要注意的地方。</p><p>如何阅读本文？</p><p>我的建议是阅读两遍。第一遍，不求甚解地快速阅读一遍。阅读过程中遇到的问题不妨记录下来，也许阅读完毕后就能解决很多。然后有时间的话，再带着问题去精读第二遍。</p><p>深呼吸，开始我们的正则表达式旅程吧。我在终点等你。</p><p>第一章 正则表达式字符匹配攻略<br>正则表达式是匹配模式，要么匹配字符，要么匹配位置。请记住这句话。</p><p>然而关于正则如何匹配字符的学习，大部分人都觉得这块比较杂乱。</p><p>毕竟元字符太多了，看起来没有系统性，不好记。本章就解决这个问题。</p><p>内容包括：</p><p>两种模糊匹配<br>字符组<br>量词<br>分支结构<br> 案例分析<br>1 两种模糊匹配<br>如果正则只有精确匹配是没多大意义的，比如&#x2F;hello&#x2F;，也只能匹配字符串中的”hello”这个子串。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">hello</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>正则表达式之所以强大，是因为其能实现模糊匹配。</p><p>而模糊匹配，有两个方向上的“模糊”：横向模糊和纵向模糊。</p><p>1.1 横向模糊匹配</p><p>横向模糊指的是，一个正则可匹配的字符串的长度不是固定的，可以是多种情况的。</p><p>其实现的方式是使用量词。譬如{m,n}，表示连续出现最少m次，最多n次。</p><p>比如&#x2F;ab{2,5}c&#x2F;表示匹配这样一个字符串：第一个字符是“a”，接下来是2到5个字符“b”，最后是字符“c”。测试如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">ab&#123;2,5&#125;c</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"abc abbc abbbc abbbbc abbbbbc abbbbbbc"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => ["abbc", "abbbc", "abbbbc", "abbbbbc"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意：案例中用的正则是&#x2F;ab{2,5}c&#x2F;g，后面多了g，它是正则的一个修饰符。表示全局匹配，即在目标字符串中按顺序找到满足匹配模式的所有子串，强调的是“所有”，而不只是“第一个”。g是单词global的首字母。</p><p>1.2 纵向模糊匹配</p><p>纵向模糊指的是，一个正则匹配的字符串，具体到某一位字符时，它可以不是某个确定的字符，可以有多种可能。</p><p>其实现的方式是使用字符组。譬如[abc]，表示该字符是可以字符“a”、“b”、“c”中的任何一个。</p><p>比如&#x2F;a[123]b&#x2F;可以匹配如下三种字符串：”a1b”、”a2b”、”a3b”。测试如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a[123]b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"a0b a1b a2b a3b a4b"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => ["a1b", "a2b", "a3b"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>以上就是本章讲的主体内容，只要掌握横向和纵向模糊匹配，就能解决很大部分正则匹配问题。</p><p>接下来的内容就是展开说了，如果对此都比较熟悉的话，可以跳过，直接看本章案例那节。</p><ol start="2"><li>字符组<br>需要强调的是，虽叫字符组（字符类），但只是其中一个字符。例如[abc]，表示匹配一个字符，它可以是“a”、“b”、“c”之一。</li></ol><p>2.1 范围表示法</p><p>如果字符组里的字符特别多的话，怎么办？可以使用范围表示法。</p><p>比如[123456abcdefGHIJKLM]，可以写成[1-6a-fG-M]。用连字符-来省略和简写。</p><p>因为连字符有特殊用途，那么要匹配“a”、“-”、“z”这三者中任意一个字符，该怎么做呢？</p><p>不能写成[a-z]，因为其表示小写字符中的任何一个字符。</p><p>可以写成如下的方式：[-az]或[az-]或[a-z]。即要么放在开头，要么放在结尾，要么转义。总之不会让引擎认为是范围表示法就行了。</p><p>2.2 排除字符组</p><p>纵向模糊匹配，还有一种情形就是，某位字符可以是任何东西，但就不能是”a”、”b”、”c”。</p><p>此时就是排除字符组（反义字符组）的概念。例如[^abc]，表示是一个除”a”、”b”、”c”之外的任意一个字符。字符组的第一位放^（脱字符），表示求反的概念。</p><p>当然，也有相应的范围表示法。</p><p>2.3 常见的简写形式</p><p>有了字符组的概念后，一些常见的符号我们也就理解了。因为它们都是系统自带的简写形式。</p><p>\d就是[0-9]。表示是一位数字。记忆方式：其英文是digit（数字）。</p><p>\D就是[^0-9]。表示除数字外的任意字符。</p><p>\w就是[0-9a-zA-Z_]。表示数字、大小写字母和下划线。记忆方式：w是word的简写，也称单词字符。</p><p>\W是[^0-9a-zA-Z_]。非单词字符。</p><p>\s是[ \t\v\n\r\f]。表示空白符，包括空格、水平制表符、垂直制表符、换行符、回车符、换页符。记忆方式：s是space character的首字母。</p><p>\S是[^ \t\v\n\r\f]。 非空白符。</p><p>.就是[^\n\r\u2028\u2029]。通配符，表示几乎任意字符。换行符、回车符、行分隔符和段分隔符除外。记忆方式：想想省略号…中的每个点，都可以理解成占位符，表示任何类似的东西。</p><p>如果要匹配任意字符怎么办？可以使用[\d\D]、[\w\W]、[\s\S]和[^]中任何的一个。</p><ol start="3"><li>量词<br>量词也称重复。掌握{m,n}的准确含义后，只需要记住一些简写形式。</li></ol><p>3.1 简写形式</p><p>{m,} 表示至少出现m次。</p><p>{m} 等价于{m,m}，表示出现m次。</p><p>? 等价于{0,1}，表示出现或者不出现。记忆方式：问号的意思表示，有吗？</p><ul><li>等价于{1,}，表示出现至少一次。记忆方式：加号是追加的意思，得先有一个，然后才考虑追加。</li></ul><ul><li>等价于{0,}，表示出现任意次，有可能不出现。记忆方式：看看天上的星星，可能一颗没有，可能零散有几颗，可能数也数不过来。</li></ul><p>3.2 贪婪匹配和惰性匹配</p><p>看如下的例子：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d&#123;2,5&#125;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"123 1234 12345 123456"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => ["123", "1234", "12345", "12345"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中正则&#x2F;\d{2,5}&#x2F;，表示数字连续出现2到5次。会匹配2位、3位、4位、5位连续数字。</p><p>但是其是贪婪的，它会尽可能多的匹配。你能给我6个，我就要5个。你能给我3个，我就3要个。反正只要在能力范围内，越多越好。</p><p>我们知道有时贪婪不是一件好事（请看文章最后一个例子）。而惰性匹配，就是尽可能少的匹配：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d&#123;2,5&#125;?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"123 1234 12345 123456"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => ["12", "12", "34", "12", "34", "12", "34", "56"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中&#x2F;\d{2,5}?&#x2F;表示，虽然2到5次都行，当2个就够的时候，就不在往下尝试了。</p><p>通过在量词后面加个问号就能实现惰性匹配，因此所有惰性匹配情形如下：</p><p>{m,n}?<br>{m,}?<br>??<br>+?<br>*?<br>对惰性匹配的记忆方式是：量词后面加个问号，问一问你知足了吗，你很贪婪吗？</p><ol start="4"><li>多选分支<br>一个模式可以实现横向和纵向模糊匹配。而多选分支可以支持多个子模式任选其一。</li></ol><p>具体形式如下：(p1|p2|p3)，其中p1、p2和p3是子模式，用|（管道符）分隔，表示其中任何之一。</p><p>例如要匹配”good”和”nice”可以使用&#x2F;good|nice&#x2F;。测试如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">good|nice</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"good idea, nice try."</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => ["good", "nice"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>但有个事实我们应该注意，比如我用&#x2F;good|goodbye&#x2F;，去匹配”goodbye”字符串时，结果是”good”：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">good|goodbye</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"goodbye"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => ["good"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>而把正则改成&#x2F;goodbye|good&#x2F;，结果是：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">goodbye|good</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"goodbye"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => ["goodbye"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>也就是说，分支结构也是惰性的，即当前面的匹配上了，后面的就不再尝试了。</p><ol start="5"><li>案例分析<br>匹配字符，无非就是字符组、量词和分支结构的组合使用罢了。</li></ol><p>下面找几个例子演练一下（其中，每个正则并不是只有唯一写法）：</p><p>5.1 匹配16进制颜色值</p><p>要求匹配：</p><p>#ffbbad</p><p>#Fc01DF</p><p>#FFF</p><p>#ffE</p><p>分析：</p><p>表示一个16进制字符，可以用字符组[0-9a-fA-F]。</p><p>其中字符可以出现3或6次，需要是用量词和分支结构。</p><p>使用分支结构时，需要注意顺序。</p><p>正则如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">#([0-9a-fA-F]&#123;6&#125;|[0-9a-fA-F]&#123;3&#125;)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"#ffbbad #Fc01DF #FFF #ffE"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => ["#ffbbad", "#Fc01DF", "#FFF", "#ffE"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>5.2 匹配时间</p><p>以24小时制为例。</p><p>要求匹配：</p><p>23:59</p><p>02:07</p><p>分析：</p><p>共4位数字，第一位数字可以为[0-2]。</p><p>当第1位为2时，第2位可以为[0-3]，其他情况时，第2位为[0-9]。</p><p>第3位数字为[0-5]，第4位为[0-9]</p><p>正则如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^([01][0-9]|[2][0-3]):[0-5][0-9]$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"23:59"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"02:07"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span><span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果也要求匹配7:9，也就是说时分前面的0可以省略。</p><p>此时正则变成：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(0?[0-9]|1[0-9]|[2][0-3]):(0?[0-9]|[1-5][0-9])$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"23:59"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"02:07"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"7:9"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span><span class="token comment">// => true</span><span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.3 匹配日期</p><p>比如yyyy-mm-dd格式为例。</p><p>要求匹配：</p><p>2017-06-10<br>分析：</p><p>年，四位数字即可，可用[0-9]{4}。</p><p>月，共12个月，分两种情况01、02、……、09和10、11、12，可用(0[1-9]|1[0-2])。</p><p>日，最大31天，可用(0[1-9]|[12][0-9]|3[01])。</p><p>正则如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9]&#123;4&#125;-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"2017-06-10"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>5.4 window操作系统文件路径</p><p>要求匹配：</p><p>F:\study\javascript\regex\regular expression.pdf</p><p>F:\study\javascript\regex\</p><p>F:\study\javascript</p><p>F:\</p><p>分析：</p><p>整体模式是: 盘符:\文件夹\文件夹\文件夹\</p><p>其中匹配F:\，需要使用[a-zA-Z]:\，其中盘符不区分大小写，注意\字符需要转义。</p><p>文件名或者文件夹名，不能包含一些特殊字符，此时我们需要排除字符组[^\:<em>&lt;&gt;|”?\r\n&#x2F;]来表示合法字符。另外不能为空名，至少有一个字符，也就是要使用量词+。因此匹配“文件夹\”，可用[^\:</em>&lt;&gt;|”?\r\n&#x2F;]+\。</p><p>另外“文件夹\”，可以出现任意次。也就是([^\:*&lt;&gt;|”?\r\n&#x2F;]+\)*。其中括号提供子表达式。</p><p>路径的最后一部分可以是“文件夹”，没有\，因此需要添加([^\:*&lt;&gt;|”?\r\n&#x2F;]+)?。</p><p>最后拼接成了一个看起来比较复杂的正则：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-zA-Z]:\\([^\\:*&lt;>|"?\r\n/]+\\)*([^\\:*&lt;>|"?\r\n/]+)?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"F:\\study\\javascript\\regex\\regular expression.pdf"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"F:\\study\\javascript\\regex\\"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"F:\\study\\javascript"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"F:\\"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span><span class="token comment">// => true</span><span class="token comment">// => true</span><span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，JS中字符串表示\时，也要转义。</p><p>5.5 匹配id</p><p>要求从</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>提取出id&#x3D;”container”。</p><p>可能最开始想到的正则是：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">id=".*"</span><span class="token regex-delimiter">/</span></span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">'&lt;div id="container" class="main">&lt;/div>'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => id="container" class="main"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>因为.是通配符，本身就匹配双引号的，而量词*又是贪婪的，当遇到container后面双引号时，不会停下来，会继续匹配，直到遇到最后一个双引号为止。</p><p>解决之道，可以使用惰性匹配：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">id=".*?"</span><span class="token regex-delimiter">/</span></span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">'&lt;div id="container" class="main">&lt;/div>'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => id="container"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当然，这样也会有个问题。效率比较低，因为其匹配原理会涉及到“回溯”这个概念（这里也只是顺便提一下，第四章会详细说明）。可以优化如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">id="[^"]*"</span><span class="token regex-delimiter">/</span></span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">'&lt;div id="container" class="main">&lt;/div>'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => id="container"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>第1章 小结<br>字符匹配相关的案例，挺多的，不一而足。</p><p>掌握字符组和量词就能解决大部分常见的情形，也就是说，当你会了这二者，JS正则算是入门了。</p><p>第二章 正则表达式位置匹配攻略<br>正则表达式是匹配模式，要么匹配字符，要么匹配位置。请记住这句话。</p><p>然而大部分人学习正则时，对于匹配位置的重视程度没有那么高。</p><p>本章讲讲正则匹配位置的总总。</p><p>内容包括：</p><p>什么是位置？<br>如何匹配位置？<br>位置的特性<br>几个应用实例分析</p><ol><li><p>什么是位置呢？<br>位置是相邻字符之间的位置。比如，下图中箭头所指的地方：</p></li><li><p>如何匹配位置呢？<br>在ES5中，共有6个锚字符：</p></li></ol><p>^ $ \b \B (?&#x3D;p) (?!p)<br>2.1 ^和$</p><p>^（脱字符）匹配开头，在多行匹配中匹配行开头。</p><p>$（美元符号）匹配结尾，在多行匹配中匹配行结尾。</p><p>比如我们把字符串的开头和结尾用”#”替换（位置可以替换成字符的！）：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^|$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "#hello#"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>多行匹配模式时，二者是行的概念，这个需要我们的注意：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"I\nlove\njavascript"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^|$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gm</span></span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*#I##love##javascript#*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.2 \b和\B</p><p>\b是单词边界，具体就是\w和\W之间的位置，也包括\w和^之间的位置，也包括\w和$之间的位置。</p><p>比如一个文件名是”[JS] Lesson_01.mp4”中的\b，如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"[JS] Lesson_01.mp4"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "[#JS#] #Lesson_01#.#mp4#"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>为什么是这样呢？这需要仔细看看。</p><p>首先，我们知道，\w是字符组[0-9a-zA-Z_]的简写形式，即\w是字母数字或者下划线的中任何一个字符。而\W是排除字符组[^0-9a-zA-Z_]的简写形式，即\W是\w以外的任何一个字符。</p><p>此时我们可以看看”[#JS#] #Lesson_01#.#mp4#”中的每一个”#”，是怎么来的。</p><p>第一个”#”，两边是”[“与”J”，是\W和\w之间的位置。<br>第二个”#”，两边是”S”与”]”，也就是\w和\W之间的位置。<br>第三个”#”，两边是空格与”L”，也就是\W和\w之间的位置。<br>第四个”#”，两边是”1”与”.”，也就是\w和\W之间的位置。<br>第五个”#”，两边是”.”与”m”，也就是\W和\w之间的位置。<br>第六个”#”，其对应的位置是结尾，但其前面的字符”4”是\w，即\w和$之间的位置。<br>知道了\b的概念后，那么\B也就相对好理解了。</p><p>\B就是\b的反面的意思，非单词边界。例如在字符串中所有位置中，扣掉\b，剩下的都是\B的。</p><p>具体说来就是\w与\w、\W与\W、^与\W，\W与$之间的位置。</p><p>比如上面的例子，把所有\B替换成”#”：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"[JS] Lesson_01.mp4"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\B</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "#[J#S]# L#e#s#s#o#n#_#0#1.m#p#4"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2.3 (?&#x3D;p)和(?!p)</p><p>(?&#x3D;p)，其中p是一个子模式，即p前面的位置。</p><p>比如(?&#x3D;l)，表示’l’字符前面的位置，例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?=l)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "he#l#lo"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>而(?!p)就是(?&#x3D;p)的反面意思，比如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?!l)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "#h#ell#o#"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>二者的学名分别是positive lookahead和negative lookahead。</p><p>中文翻译分别是正向先行断言和负向先行断言。</p><p>ES6中，还支持positive lookbehind和negative lookbehind。</p><p>具体是(?&lt;&#x3D;p)和(?&lt;!p)。</p><p>也有书上把这四个东西，翻译成环视，即看看右边或看看左边。</p><p>但一般书上，没有很好强调这四者是个位置。</p><p>比如(?&#x3D;p)，一般都理解成：要求接下来的字符与p匹配，但不能包括p的那些字符。</p><p>而在本人看来(?&#x3D;p)就与^一样好理解，就是p前面的那个位置。</p><ol start="3"><li>位置的特性<br>对于位置的理解，我们可以理解成空字符””。</li></ol><p>比如”hello”字符串等价于如下的形式：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"hello"</span> <span class="token operator">==</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token string">"h"</span> <span class="token operator">+</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token string">"e"</span> <span class="token operator">+</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token string">"l"</span> <span class="token operator">+</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token string">"l"</span> <span class="token operator">+</span> <span class="token string">"o"</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也等价于：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"hello"</span> <span class="token operator">==</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token string">"hello"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因此，把&#x2F;^hello$&#x2F;写成&#x2F;^^hello?$&#x2F;，是没有任何问题的：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^^hello?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>甚至可以写成更复杂的:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?=he)^^he(?=\w)llo$\b\b$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>也就是说字符之间的位置，可以写成多个。</p><p>把位置理解空字符，是对位置非常有效的理解方式。</p><ol start="4"><li>相关案例<br>4.1 不匹配任何东西的正则</li></ol><p>让你写个正则不匹配任何东西</p><p>easy，&#x2F;.^&#x2F;</p><p>因为此正则要求只有一个字符，但该字符后面是开头。</p><p>4.2 数字的千位分隔符表示法</p><p>比如把”12345678”，变成”12,345,678”。</p><p>可见是需要把相应的位置替换成”,”。</p><p>思路是什么呢？</p><p>4.2.1 弄出最后一个逗号</p><p>使用(?&#x3D;\d{3}$)就可以做到：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"12345678"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?=\d&#123;3&#125;$)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "12345,678"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4.2.2 弄出所有的逗号</p><p>因为逗号出现的位置，要求后面3个数字一组，也就是\d{3}至少出现一次。</p><p>此时可以使用量词+：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"12345678"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?=(\d&#123;3&#125;)+$)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "12,345,678"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4.2.3 匹配其余案例</p><p>写完正则后，要多验证几个案例，此时我们会发现问题：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"123456789"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?=(\d&#123;3&#125;)+$)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => ",123,456,789"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>因为上面的正则，仅仅表示把从结尾向前数，一但是3的倍数，就把其前面的位置替换成逗号。因此才会出现这个问题。</p><p>怎么解决呢？我们要求匹配的到这个位置不能是开头。</p><p>我们知道匹配开头可以使用^，但要求这个位置不是开头怎么办？</p><p>easy，(?!^)，你想到了吗？测试如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> string1 <span class="token operator">=</span> <span class="token string">"12345678"</span><span class="token punctuation">,</span>string2 <span class="token operator">=</span> <span class="token string">"123456789"</span><span class="token punctuation">;</span>reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?!^)(?=(\d&#123;3&#125;)+$)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> string1<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "12,345,678"</span>result <span class="token operator">=</span> string2<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "123,456,789"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.2.4 支持其他形式</p><p>如果要把”12345678 123456789”替换成”12,345,678 123,456,789”。</p><p>此时我们需要修改正则，把里面的开头^和结尾$，替换成\b：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"12345678 123456789"</span><span class="token punctuation">,</span>reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?!\b)(?=(\d&#123;3&#125;)+\b)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "12,345,678 123,456,789"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中(?!\b)怎么理解呢？</p><p>要求当前是一个位置，但不是\b前面的位置，其实(?!\b)说的就是\B。</p><p>因此最终正则变成了：&#x2F;\B(?&#x3D;(\d{3})+\b)&#x2F;g。</p><p>4.3 验证密码问题</p><p>密码长度6-12位，由数字、小写字符和大写字母组成，但必须至少包括2种字符。</p><p>此题，如果写成多个正则来判断，比较容易。但要写成一个正则就比较困难。</p><p>那么，我们就来挑战一下。看看我们对位置的理解是否深刻。</p><p>4.3.1 简化</p><p>不考虑“但必须至少包括2种字符”这一条件。我们可以容易写出：</p><p>var reg &#x3D; &#x2F;^[0-9A-Za-z]{6,12}$&#x2F;;<br>4.3.2 判断是否包含有某一种字符</p><p>假设，要求的必须包含数字，怎么办？此时我们可以使用(?&#x3D;.*[0-9])来做。</p><p>因此正则变成：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?=.*[0-9])^[0-9A-Za-z]&#123;6,12&#125;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.3.3 同时包含具体两种字符</p><p>比如同时包含数字和小写字母，可以用(?&#x3D;.<em>[0-9])(?&#x3D;.</em>[a-z])来做。</p><p>因此正则变成：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?=.*[0-9])(?=.*[a-z])^[0-9A-Za-z]&#123;6,12&#125;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.3.4 解答</p><p>我们可以把原题变成下列几种情况之一：</p><p>同时包含数字和小写字母<br>同时包含数字和大写字母<br>同时包含小写字母和大写字母<br>同时包含数字、小写字母和大写字母<br>以上的4种情况是或的关系（实际上，可以不用第4条）。</p><p>最终答案是：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">((?=.*[0-9])(?=.*[a-z])|(?=.*[0-9])(?=.*[A-Z])|(?=.*[a-z])(?=.*[A-Z]))^[0-9A-Za-z]&#123;6,12&#125;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"1234567"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false 全是数字</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abcdef"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false 全是小写字母</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"ABCDEFGH"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false 全是大写字母</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"ab23C"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false 不足6位</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"ABCDEF234"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true 大写字母和数字</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abcdEF234"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true 三者都有</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.3.5 解惑</p><p>上面的正则看起来比较复杂，只要理解了第二步，其余就全部理解了。</p><p>&#x2F;(?&#x3D;.*[0-9])^[0-9A-Za-z]{6,12}$&#x2F;</p><p>对于这个正则，我们只需要弄明白(?&#x3D;.*[0-9])^即可。</p><p>分开来看就是(?&#x3D;.*[0-9])和^。</p><p>表示开头前面还有个位置（当然也是开头，即同一个位置，想想之前的空字符类比）。</p><p>(?&#x3D;.<em>[0-9])表示该位置后面的字符匹配.</em>[0-9]，即，有任何多个任意字符，后面再跟个数字。</p><p>翻译成大白话，就是接下来的字符，必须包含个数字。</p><p>4.3.6 另外一种解法</p><p>“至少包含两种字符”的意思就是说，不能全部都是数字，也不能全部都是小写字母，也不能全部都是大写字母。</p><p>那么要求“不能全部都是数字”，怎么做呢？(?!p)出马！</p><p>对应的正则是：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?!^[0-9]&#123;6,12&#125;$)^[0-9A-Za-z]&#123;6,12&#125;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>三种“都不能”呢？</p><p>最终答案是：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?!^[0-9]&#123;6,12&#125;$)(?!^[a-z]&#123;6,12&#125;$)(?!^[A-Z]&#123;6,12&#125;$)^[0-9A-Za-z]&#123;6,12&#125;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"1234567"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false 全是数字</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abcdef"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false 全是小写字母</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"ABCDEFGH"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false 全是大写字母</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"ab23C"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false 不足6位</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"ABCDEF234"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true 大写字母和数字</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abcdEF234"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true 三者都有</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二章小结<br>位置匹配相关的案例，挺多的，不一而足。</p><p>掌握匹配位置的这6个锚字符，给我们解决正则问题一个新工具。</p><p>第三章 正则表达式括号的作用<br>不管哪门语言中都有括号。正则表达式也是一门语言，而括号的存在使这门语言更为强大。</p><p>对括号的使用是否得心应手，是衡量对正则的掌握水平的一个侧面标准。</p><p>括号的作用，其实三言两语就能说明白，括号提供了分组，便于我们引用它。</p><p>引用某个分组，会有两种情形：在JavaScript里引用它，在正则表达式里引用它。</p><p>本章内容虽相对简单，但我也要写长点。</p><p>内容包括：</p><p>分组和分支结构<br>捕获分组<br>反向引用<br>非捕获分组<br>相关案例</p><ol><li>分组和分支结构<br>这二者是括号最直觉的作用，也是最原始的功能。</li></ol><p>1.1 分组</p><p>我们知道&#x2F;a+&#x2F;匹配连续出现的“a”，而要匹配连续出现的“ab”时，需要使用&#x2F;(ab)+&#x2F;。</p><p>其中括号是提供分组功能，使量词+作用于“ab”这个整体，测试如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(ab)+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"ababa abbb ababab"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => ["abab", "ab", "ababab"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>1.2 分支结构</p><p>而在多选分支结构(p1|p2)中，此处括号的作用也是不言而喻的，提供了子表达式的所有可能。</p><p>比如，要匹配如下的字符串：</p><p>I love JavaScript</p><p>I love Regular Expression</p><p>可以使用正则：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^I love (JavaScript|Regular Expression)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"I love JavaScript"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"I love Regular Expression"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => true</span><span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果去掉正则中的括号，即&#x2F;^I love JavaScript|Regular Expression$&#x2F;，匹配字符串是”I love JavaScript”和”Regular Expression”，当然这不是我们想要的。</p><ol start="2"><li>引用分组<br>这是括号一个重要的作用，有了它，我们就可以进行数据提取，以及更强大的替换操作。</li></ol><p>而要使用它带来的好处，必须配合使用实现环境的API。</p><p>以日期为例。假设格式是yyyy-mm-dd的，我们可以先写一个简单的正则：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后再修改成括号版的：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为什么要使用这个正则呢？</p><p>2.1 提取数据</p><p>比如提取出年、月、日，可以这么做：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-06-12"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => ["2017-06-12", "2017", "06", "12", index: 0, input: "2017-06-12"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>match返回的一个数组，第一个元素是整体匹配结果，然后是各个分组（括号里）匹配的内容，然后是匹配下标，最后是输入的文本。（注意：如果正则是否有修饰符g，match返回的数组格式是不一样的）。</p><p>另外也可以使用正则对象的exec方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-06-12"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => ["2017-06-12", "2017", "06", "12", index: 0, input: "2017-06-12"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>同时，也可以使用构造函数的全局属性$1至$9来获取：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-06-12"</span><span class="token punctuation">;</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 正则操作即可，例如</span><span class="token comment">//regex.exec(string);</span><span class="token comment">//string.match(regex);</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "2017"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "06"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "12"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.2 替换</p><p>比如，想把yyyy-mm-dd格式，替换成mm&#x2F;dd&#x2F;yyyy怎么做？</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-06-12"</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token string">"$2/$3/$1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "06/12/2017"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中replace中的，第二个参数里用$1、$2、$3指代相应的分组。等价于如下的形式：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-06-12"</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> RegExp<span class="token punctuation">.</span>$2 <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> RegExp<span class="token punctuation">.</span>$3 <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> RegExp<span class="token punctuation">.</span>$1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "06/12/2017"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也等价于：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-06-12"</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">match<span class="token punctuation">,</span> year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> month <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> day <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> year<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "06/12/2017"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>反向引用<br>除了使用相应API来引用分组，也可以在正则本身里引用分组。但只能引用之前出现的分组，即反向引用。</li></ol><p>还是以日期为例。</p><p>比如要写一个正则支持匹配如下三种格式：</p><p>2016-06-12</p><p>2016&#x2F;06&#x2F;12</p><p>2016.06.12</p><p>最先可能想到的正则是:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d&#123;4&#125;(-|\/|\.)\d&#123;2&#125;(-|\/|\.)\d&#123;2&#125;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string1 <span class="token operator">=</span> <span class="token string">"2017-06-12"</span><span class="token punctuation">;</span><span class="token keyword">var</span> string2 <span class="token operator">=</span> <span class="token string">"2017/06/12"</span><span class="token punctuation">;</span><span class="token keyword">var</span> string3 <span class="token operator">=</span> <span class="token string">"2017.06.12"</span><span class="token punctuation">;</span><span class="token keyword">var</span> string4 <span class="token operator">=</span> <span class="token string">"2016-06/12"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string1<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string2<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string3<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string4<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中&#x2F;和.需要转义。虽然匹配了要求的情况，但也匹配”2016-06&#x2F;12”这样的数据。</p><p>假设我们想要求分割符前后一致怎么办？此时需要使用反向引用：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d&#123;4&#125;(-|\/|\.)\d&#123;2&#125;\1\d&#123;2&#125;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string1 <span class="token operator">=</span> <span class="token string">"2017-06-12"</span><span class="token punctuation">;</span><span class="token keyword">var</span> string2 <span class="token operator">=</span> <span class="token string">"2017/06/12"</span><span class="token punctuation">;</span><span class="token keyword">var</span> string3 <span class="token operator">=</span> <span class="token string">"2017.06.12"</span><span class="token punctuation">;</span><span class="token keyword">var</span> string4 <span class="token operator">=</span> <span class="token string">"2016-06/12"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string1<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string2<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string3<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string4<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意里面的\1，表示的引用之前的那个分组(-|/|.)。不管它匹配到什么（比如-），\1都匹配那个同样的具体某个字符。</p><p>我们知道了\1的含义后，那么\2和\3的概念也就理解了，即分别指代第二个和第三个分组。</p><p>看到这里，此时，恐怕你会有三个问题。</p><p>3.1 括号嵌套怎么办？</p><p>以左括号（开括号）为准。比如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^((\d)(\d(\d)))\1\2\3\4$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"1231231233"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>$1 <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>$2 <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>$3 <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 23</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>$4 <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看看这个正则匹配模式：</p><p>第一个字符是数字，比如说1，<br>第二个字符是数字，比如说2，<br>第三个字符是数字，比如说3，<br>接下来的是\1，是第一个分组内容，那么看第一个开括号对应的分组是什么，是123，<br>接下来的是\2，找到第2个开括号，对应的分组，匹配的内容是1，<br>接下来的是\3，找到第3个开括号，对应的分组，匹配的内容是23，<br>最后的是\4，找到第3个开括号，对应的分组，匹配的内容是3。<br>这个问题，估计仔细看一下，就该明白了。</p><p>3.2 \10表示什么呢？</p><p>另外一个疑问可能是，即\10是表示第10个分组，还是\1和0呢？</p><p>答案是前者，虽然一个正则里出现\10比较罕见。测试如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(1)(2)(3)(4)(5)(6)(7)(8)(9)(#) \10+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"123456789# ######"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3.3 引用不存在的分组会怎样？</p><p>因为反向引用，是引用前面的分组，但我们在正则里引用了不存在的分组时，此时正则不会报错，只是匹配反向引用的字符本身。例如\2，就匹配”\2”。注意”\2”表示对”2”进行了转意。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\1\2\3\4\5\6\7\8\9</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"\1\2\3\4\5\6\7\8\9"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"\1\2\3\4\5\6\7\8\9"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>chrome浏览器打印的结果：</p><ol start="4"><li>非捕获分组<br>之前文中出现的分组，都会捕获它们匹配到的数据，以便后续引用，因此也称他们是捕获型分组。</li></ol><p>如果只想要括号最原始的功能，但不会引用它，即，既不在API里引用，也不在正则里反向引用。此时可以使用非捕获分组(?:p)，例如本文第一个例子可以修改为：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?:ab)+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"ababa abbb ababab"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => ["abab", "ab", "ababab"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>相关案例<br>至此括号的作用已经讲完了，总结一句话，就是提供了可供我们使用的分组，如何用就看我们的了。</li></ol><p>5.1 字符串trim方法模拟</p><p>trim方法是去掉字符串的开头和结尾的空白符。有两种思路去做。</p><p>第一种，匹配到开头和结尾的空白符，然后替换成空字符。如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\s+|\s+$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token string">"  foobar   "</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "foobar"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二种，匹配整个字符串，然后用引用来提取出相应的数据：</p><p>function trim(str) {<br>    return str.replace(&#x2F;^\s*(.<em>?)\s</em>$&#x2F;g, “$1”);<br>}<br>console.log( trim(“  foobar   “) );<br>&#x2F;&#x2F; &#x3D;&gt; “foobar”<br>这里使用了惰性匹配*?，不然也会匹配最后一个空格之前的所有空格的。</p><p>当然，前者效率高。</p><p>5.2 将每个单词的首字母转换为大写</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">titleize</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?:^|\s)\w</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">titleize</span><span class="token punctuation">(</span><span class="token string">'my name is epeli'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "My Name Is Epeli"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>思路是找到每个单词的首字母，当然这里不使用非捕获匹配也是可以的。</p><p>5.3 驼峰化</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">camelize</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[-_\s]+(.)?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">match<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> c <span class="token operator">?</span> c<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">camelize</span><span class="token punctuation">(</span><span class="token string">'-moz-transform'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "MozTransform"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中分组(.)表示首字母。单词的界定是，前面的字符可以是多个连字符、下划线以及空白符。正则后面的?的目的，是为了应对str尾部的字符可能不是单词字符，比如str是’-moz-transform    ‘。</p><p>5.4 中划线化</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">dasherize</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([A-Z])</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'-$1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[-_\s]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">dasherize</span><span class="token punctuation">(</span><span class="token string">'MozTransform'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "-moz-transform"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>驼峰化的逆过程。</p><p>5.5 html转义和反转义</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 将HTML特殊字符转换成等值的实体</span><span class="token keyword">function</span> <span class="token function">escapeHTML</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> escapeChars <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string-property property">'¢'</span> <span class="token operator">:</span> <span class="token string">'cent'</span><span class="token punctuation">,</span>  <span class="token string-property property">'£'</span> <span class="token operator">:</span> <span class="token string">'pound'</span><span class="token punctuation">,</span>  <span class="token string-property property">'¥'</span> <span class="token operator">:</span> <span class="token string">'yen'</span><span class="token punctuation">,</span>  <span class="token string-property property">'€'</span><span class="token operator">:</span> <span class="token string">'euro'</span><span class="token punctuation">,</span>  <span class="token string-property property">'©'</span> <span class="token operator">:</span><span class="token string">'copy'</span><span class="token punctuation">,</span>  <span class="token string-property property">'®'</span> <span class="token operator">:</span> <span class="token string">'reg'</span><span class="token punctuation">,</span>  <span class="token string-property property">'&lt;'</span> <span class="token operator">:</span> <span class="token string">'lt'</span><span class="token punctuation">,</span>  <span class="token string-property property">'>'</span> <span class="token operator">:</span> <span class="token string">'gt'</span><span class="token punctuation">,</span>  <span class="token string-property property">'"'</span> <span class="token operator">:</span> <span class="token string">'quot'</span><span class="token punctuation">,</span>  <span class="token string-property property">'&amp;'</span> <span class="token operator">:</span> <span class="token string">'amp'</span><span class="token punctuation">,</span>  <span class="token string-property property">'\''</span> <span class="token operator">:</span> <span class="token string">'#39'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'['</span> <span class="token operator">+</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>escapeChars<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">']'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">match</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">'&amp;'</span> <span class="token operator">+</span> escapeChars<span class="token punctuation">[</span>match<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">';'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">escapeHTML</span><span class="token punctuation">(</span><span class="token string">'&lt;div>Blah blah blah&lt;/div>'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => "&amp;lt;div&amp;gt;Blah blah blah&amp;lt;/div&amp;gt";</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中使用了用构造函数生成的正则，然后替换相应的格式就行了，这个跟本章没多大关系。</p><p>倒是它的逆过程，使用了括号，以便提供引用，也很简单，如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 实体字符转换为等值的HTML。</span><span class="token keyword">function</span> <span class="token function">unescapeHTML</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> htmlEntities <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">nbsp</span><span class="token operator">:</span> <span class="token string">' '</span><span class="token punctuation">,</span>  <span class="token literal-property property">cent</span><span class="token operator">:</span> <span class="token string">'¢'</span><span class="token punctuation">,</span>  <span class="token literal-property property">pound</span><span class="token operator">:</span> <span class="token string">'£'</span><span class="token punctuation">,</span>  <span class="token literal-property property">yen</span><span class="token operator">:</span> <span class="token string">'¥'</span><span class="token punctuation">,</span>  <span class="token literal-property property">euro</span><span class="token operator">:</span> <span class="token string">'€'</span><span class="token punctuation">,</span>  <span class="token literal-property property">copy</span><span class="token operator">:</span> <span class="token string">'©'</span><span class="token punctuation">,</span>  <span class="token literal-property property">reg</span><span class="token operator">:</span> <span class="token string">'®'</span><span class="token punctuation">,</span>  <span class="token literal-property property">lt</span><span class="token operator">:</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span>  <span class="token literal-property property">gt</span><span class="token operator">:</span> <span class="token string">'>'</span><span class="token punctuation">,</span>  <span class="token literal-property property">quot</span><span class="token operator">:</span> <span class="token string">'"'</span><span class="token punctuation">,</span>  <span class="token literal-property property">amp</span><span class="token operator">:</span> <span class="token string">'&amp;'</span><span class="token punctuation">,</span>  <span class="token literal-property property">apos</span><span class="token operator">:</span> <span class="token string">'\''</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\&amp;([^;]+);</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">match<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> htmlEntities<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> htmlEntities<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> match<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">unescapeHTML</span><span class="token punctuation">(</span><span class="token string">'&amp;lt;div&amp;gt;Blah blah blah&amp;lt;/div&amp;gt;'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => "&lt;div>Blah blah blah&lt;/div>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过key获取相应的分组引用，然后作为对象的键。</p><p>5.6 匹配成对标签</p><p>要求匹配：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>regular expression<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>laoyao bye bye<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>不匹配：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>wrong!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>匹配一个开标签，可以使用正则&lt;[^&gt;]+&gt;，</p><p>匹配一个闭标签，可以使用&lt;/[^&gt;]+&gt;，</p><p>但是要求匹配成对标签，那就需要使用反向引用，如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;([^>]+)>[\d\D]*&lt;\/\1></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string1 <span class="token operator">=</span> <span class="token string">"&lt;title>regular expression&lt;/title>"</span><span class="token punctuation">;</span><span class="token keyword">var</span> string2 <span class="token operator">=</span> <span class="token string">"&lt;p>laoyao bye bye&lt;/p>"</span><span class="token punctuation">;</span><span class="token keyword">var</span> string3 <span class="token operator">=</span> <span class="token string">"&lt;title>wrong!&lt;/p>"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string1<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string2<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string3<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中开标签&lt;[^&gt;]+&gt;改成&lt;([^&gt;]+)&gt;，使用括号的目的是为了后面使用反向引用，而提供分组。闭标签使用了反向引用，&lt;/\1&gt;。</p><p>另外[\d\D]的意思是，这个字符是数字或者不是数字，因此，也就是匹配任意字符的意思。</p><p>第三章小结<br>正则中使用括号的例子那可是太多了，不一而足。</p><p>重点理解括号可以提供分组，我们可以提取数据，应该就可以了。</p><p>例子中的代码，基本没做多少分析，相信你都能看懂的。</p><p>第4章 正则表达式回溯法原理<br>学习正则表达式，是需要懂点儿匹配原理的。</p><p>而研究匹配原理时，有两个字出现的频率比较高：“回溯”。</p><p>听起来挺高大上，确实还有很多人对此不明不白的。</p><p>因此，本章就简单扼要地说清楚回溯到底是什么东西。</p><p>内容包括：</p><p>没有回溯的匹配<br>有回溯的匹配<br>常见的回溯形式</p><ol><li>没有回溯的匹配<br>假设我们的正则是&#x2F;ab{1,3}c&#x2F;，其可视化形式是：</li></ol><p>而当目标字符串是”abbbc”时，就没有所谓的“回溯”。其匹配过程是：</p><p>其中子表达式b{1,3}表示“b”字符连续出现1到3次。</p><ol start="2"><li>有回溯的匹配<br>如果目标字符串是”abbc”，中间就有回溯。</li></ol><p>图中第5步有红颜色，表示匹配不成功。此时b{1,3}已经匹配到了2个字符“b”，准备尝试第三个时，结果发现接下来的字符是“c”。那么就认为b{1,3}就已经匹配完毕。然后状态又回到之前的状态（即第6步，与第4步一样），最后再用子表达式c，去匹配字符“c”。当然，此时整个表达式匹配成功了。</p><p>图中的第6步，就是“回溯”。</p><p>你可能对此没有感觉，这里我们再举一个例子。正则是：</p><p>目标字符串是”abbbc”，匹配过程是：</p><p>其中第7步和第10步是回溯。第7步与第4步一样，此时b{1,3}匹配了两个”b”，而第10步与第3步一样，此时b{1,3}只匹配了一个”b”，这也是b{1,3}的最终匹配结果。</p><p>这里再看一个清晰的回溯，正则是：</p><p>目标字符串是：”acd”ef，匹配过程是：</p><p>图中省略了尝试匹配双引号失败的过程。可以看出.*是非常影响效率的。</p><p>为了减少一些不必要的回溯，可以把正则修改为&#x2F;“[^”]*”&#x2F;。</p><ol start="3"><li>常见的回溯形式<br>正则表达式匹配字符串的这种方式，有个学名，叫回溯法。</li></ol><p>回溯法也称试探法，它的基本思想是：从问题的某一种状态（初始状态）出发，搜索从这种状态出发所能达到的所有“状态”，当一条路走到“尽头”的时候（不能再前进），再后退一步或若干步，从另一种可能“状态”出发，继续搜索，直到所有的“路径”（状态）都试探过。这种不断“前进”、不断“回溯”寻找解的方法，就称作“回溯法”。（copy于百度百科）。</p><p>本质上就是深度优先搜索算法。其中退到之前的某一步这一过程，我们称为“回溯”。从上面的描述过程中，可以看出，路走不通时，就会发生“回溯”。即，尝试匹配失败时，接下来的一步通常就是回溯。</p><p>道理，我们是懂了。那么JS中正则表达式会产生回溯的地方都有哪些呢？</p><p>3.1 贪婪量词</p><p>之前的例子都是贪婪量词相关的。比如b{1,3}，因为其是贪婪的，尝试可能的顺序是从多往少的方向去尝试。首先会尝试”bbb”，然后再看整个正则是否能匹配。不能匹配时，吐出一个”b”，即在”bb”的基础上，再继续尝试。如果还不行，再吐出一个，再试。如果还不行呢？只能说明匹配失败了。</p><p>虽然局部匹配是贪婪的，但也要满足整体能正确匹配。否则，皮之不存，毛将焉附？</p><p>此时我们不禁会问，如果当多个贪婪量词挨着存在，并相互有冲突时，此时会是怎样？</p><p>答案是，先下手为强！因为深度优先搜索。测试如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"12345"</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d&#123;1,3&#125;)(\d&#123;1,3&#125;)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => ["12345", "123", "45", index: 0, input: "12345"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中，前面的\d{1,3}匹配的是”123”，后面的\d{1,3}匹配的是”45”。</p><p>3.2 惰性量词</p><p>惰性量词就是在贪婪量词后面加个问号。表示尽可能少的匹配，比如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"12345"</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d&#123;1,3&#125;?)(\d&#123;1,3&#125;)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => ["1234", "1", "234", index: 0, input: "12345"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中\d{1,3}?只匹配到一个字符”1”，而后面的\d{1,3}匹配了”234”。</p><p>虽然惰性量词不贪，但也会有回溯的现象。比如正则是：</p><p>目标字符串是”12345”，匹配过程是：</p><p>知道你不贪、很知足，但是为了整体匹配成，没办法，也只能给你多塞点了。因此最后\d{1,3}?匹配的字符是”12”，是两个数字，而不是一个。</p><p>3.3 分支结构</p><p>我们知道分支也是惰性的，比如&#x2F;can|candy&#x2F;，去匹配字符串”candy”，得到的结果是”can”，因为分支会一个一个尝试，如果前面的满足了，后面就不会再试验了。</p><p>分支结构，可能前面的子模式会形成了局部匹配，如果接下来表达式整体不匹配时，仍会继续尝试剩下的分支。这种尝试也可以看成一种回溯。</p><p>比如正则：</p><p>目标字符串是”candy”，匹配过程：</p><p>上面第5步，虽然没有回到之前的状态，但仍然回到了分支结构，尝试下一种可能。所以，可以认为它是一种回溯的。</p><p>第四章小结<br>其实回溯法，很容易掌握的。</p><p>简单总结就是，正因为有多种可能，所以要一个一个试。直到，要么到某一步时，整体匹配成功了；要么最后都试完后，发现整体匹配不成功。</p><p>贪婪量词“试”的策略是：买衣服砍价。价钱太高了，便宜点，不行，再便宜点。<br>惰性量词“试”的策略是：卖东西加价。给少了，再多给点行不，还有点少啊，再给点。<br>分支结构“试”的策略是：货比三家。这家不行，换一家吧，还不行，再换。<br>既然有回溯的过程，那么匹配效率肯定低一些。相对谁呢？相对那些DFA引擎。</p><p>而JS的正则引擎是NFA，NFA是“非确定型有限自动机”的简写。</p><p>大部分语言中的正则都是NFA，为啥它这么流行呢？</p><p>答：你别看我匹配慢，但是我编译快啊，而且我还有趣哦。</p><p>第5章 正则表达式的拆分<br>对于一门语言的掌握程度怎么样，可以有两个角度来衡量：读和写。</p><p>不仅要求自己能解决问题，还要看懂别人的解决方案。代码是这样，正则表达式也是这样。</p><p>正则这门语言跟其他语言有一点不同，它通常就是一大堆字符，而没有所谓“语句”的概念。</p><p>如何能正确地把一大串正则拆分成一块一块的，成为了破解“天书”的关键。</p><p>本章就解决这一问题，内容包括：</p><p>结构和操作符<br>注意要点<br>案例分析</p><ol><li>结构和操作符<br>编程语言一般都有操作符。只要有操作符，就会出现一个问题。当一大堆操作在一起时，先操作谁，又后操作谁呢？为了不产生歧义，就需要语言本身定义好操作顺序，即所谓的优先级。</li></ol><p>而在正则表达式中，操作符都体现在结构中，即由特殊字符和普通字符所代表的一个个特殊整体。</p><p>JS正则表达式中，都有哪些结构呢？</p><p>字符字面量、字符组、量词、锚字符、分组、选择分支、反向引用。<br>具体含义简要回顾如下（如懂，可以略去不看）：</p><p>字面量，匹配一个具体字符，包括不用转义的和需要转义的。比如a匹配字符”a”，又比如\n匹配换行符，又比如.匹配小数点。</p><p>字符组，匹配一个字符，可以是多种可能之一，比如[0-9]，表示匹配一个数字。也有\d的简写形式。另外还有反义字符组，表示可以是除了特定字符之外任何一个字符，比如[^0-9]，表示一个非数字字符，也有\D的简写形式。</p><p>量词，表示一个字符连续出现，比如a{1,3}表示“a”字符连续出现3次。另外还有常见的简写形式，比如a+表示“a”字符连续出现至少一次。</p><p>锚点，匹配一个位置，而不是字符。比如^匹配字符串的开头，又比如\b匹配单词边界，又比如(?&#x3D;\d)表示数字前面的位置。</p><p>分组，用括号表示一个整体，比如(ab)+，表示”ab”两个字符连续出现多次，也可以使用非捕获分组(?:ab)+。</p><p>分支，多个子表达式多选一，比如abc|bcd，表达式匹配”abc”或者”bcd”字符子串。</p><p>反向引用，比如\2，表示引用第2个分组。</p><p>其中涉及到的操作符有：</p><p>1.转义符 <br>2.括号和方括号 (…)、(?:…)、(?&#x3D;…)、(?!…)、[…]<br>3.量词限定符 {m}、{m,n}、{m,}、?、*、+<br>4.位置和序列 ^ 、$、 \元字符、 一般字符<br>5. 管道符（竖杠）|<br>上面操作符的优先级从上至下，由高到低。</p><p>这里，我们来分析一个正则：</p><p>&#x2F;ab?(c|de*)+|fg&#x2F;</p><p>由于括号的存在，所以，(c|de*)是一个整体结构。<br>在(c|de*)中，注意其中的量词<em>，因此e</em>是一个整体结构。<br>又因为分支结构“|”优先级最低，因此c是一个整体、而de<em>是另一个整体。<br>同理，整个正则分成了 a、b?、(…)+、f、g。而由于分支的原因，又可以分成ab?(c|de</em>)+和fg这两部分。<br>希望你没被我绕晕，上面的分析可用其可视化形式描述如下：</p><ol start="2"><li>注意要点<br>关于结构和操作符，还是有几点需要强调：</li></ol><p>2.1 匹配字符串整体问题</p><p>因为是要匹配整个字符串，我们经常会在正则前后中加上锚字符^和$。</p><p>比如要匹配目标字符串”abc”或者”bcd”时，如果一不小心，就会写成&#x2F;^abc|bcd$&#x2F;。</p><p>而位置字符和字符序列优先级要比竖杠高，故其匹配的结构是：</p><p>应该修改成:</p><p>2.2 量词连缀问题</p><p>假设，要匹配这样的字符串：</p><ol><li><p>每个字符为a、b、c任选其一</p></li><li><p>字符串的长度是3的倍数</p></li></ol><p>此时正则不能想当然地写成&#x2F;^[abc]{3}+$&#x2F;，这样会报错，说+前面没什么可重复的：</p><p>此时要修改成：</p><p>2.3 元字符转义问题</p><p>所谓元字符，就是正则中有特殊含义的字符。</p><p>所有结构里，用到的元字符总结如下：</p><p>^ $ . * + ? | \ &#x2F; ( ) [ ] { } &#x3D; ! : - ,<br>当匹配上面的字符本身时，可以一律转义：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"^$.*+?|\\/[]&#123;&#125;=!:-,"</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\^\$\.\*\+\?\|\\\/\[\]\&#123;\&#125;\=\!\:\-\,</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中string中的\字符也要转义的。</p><p>另外，在string中，也可以把每个字符转义，当然，转义后的结果仍是本身：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"^$.*+?|\\/[]&#123;&#125;=!:-,"</span><span class="token punctuation">;</span><span class="token keyword">var</span> string2 <span class="token operator">=</span> <span class="token string">"\^\$\.\*\+\?\|\\\/\[\]\&#123;\&#125;\=\!\:\-\,"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string <span class="token operator">==</span> string2 <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>现在的问题是，是不是每个字符都需要转义呢？否，看情况。</p><p>2.3.1 字符组中的元字符</p><p>跟字符组相关的元字符有[]、^、-。因此在会引起歧义的地方进行转义。例如开头的^必须转义，不然会把整个字符组，看成反义字符组。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"^$.*+?|\\/[]&#123;&#125;=!:-,"</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\^$.*+?|\\/\[\]&#123;&#125;=!:\-,]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => ["^", "$", ".", "*", "+", "?", "|", "\", "/", "[", "]", "&#123;", "&#125;", "=", "!", ":", "-", ","]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.3.2 匹配“[abc]”和“{3,5}”</p><p>我们知道[abc]，是个字符组。如果要匹配字符串”[abc]”时，该怎么办？</p><p>可以写成&#x2F;[abc]&#x2F;，也可以写成&#x2F;[abc]&#x2F;，测试如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"[abc]"</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\[abc]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "[abc]"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>只需要在第一个方括号转义即可，因为后面的方括号构不成字符组，正则不会引发歧义，自然不需要转义。</p><p>同理，要匹配字符串”{3,5}”，只需要把正则写成&#x2F;{3,5}&#x2F;即可。</p><p>另外，我们知道量词有简写形式{m,}，却没有{,n}的情况。虽然后者不构成量词的形式，但此时并不会报错。当然，匹配的字符串也是”{,n}”，测试如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"&#123;,3&#125;"</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&#123;,3&#125;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "&#123;,3&#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.3.3 其余情况</p><p>比如&#x3D; ! : - ,等符号，只要不在特殊结构中，也不需要转义。</p><p>但是，括号需要前后都转义的，如&#x2F;(123)&#x2F;。</p><p>至于剩下的^ $ . * + ? | \ &#x2F;等字符，只要不在字符组内，都需要转义的。</p><ol start="3"><li>案例分析<br>接下来分析两个例子，一个简单的，一个复杂的。</li></ol><p>3.1 身份证</p><p>正则表达式是：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(\d&#123;15&#125;|\d&#123;17&#125;[\dxX])$</span><span class="token regex-delimiter">/</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为竖杠“|”,的优先级最低，所以正则分成了两部分\d{15}和\d{17}[\dxX]。</p><p>\d{15}表示15位连续数字。<br>\d{17}[\dxX]表示17位连续数字，最后一位可以是数字可以大小写字母”x”。<br>可视化如下：</p><p>3.2 IPV4地址</p><p>正则表达式是：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^((0&#123;0,2&#125;\d|0?\d&#123;2&#125;|1\d&#123;2&#125;|2[0-4]\d|25[0-5])\.)&#123;3&#125;(0&#123;0,2&#125;\d|0?\d&#123;2&#125;|1\d&#123;2&#125;|2[0-4]\d|25[0-5])$</span><span class="token regex-delimiter">/</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个正则，看起来非常吓人。但是熟悉优先级后，会立马得出如下的结构：</p><p>((…).){3}(…)</p><p>上面的两个(…)是一样的结构。表示匹配的是3位数字。因此整个结构是</p><p>3位数.3位数.3位数.3位数<br>然后再来分析(…)：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span>\d<span class="token operator">|</span><span class="token number">0</span><span class="token operator">?</span>\d<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token operator">|</span><span class="token number">1</span>\d<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token operator">|</span><span class="token number">2</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>\d<span class="token operator">|</span><span class="token number">25</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span>\d<span class="token operator">|</span><span class="token number">0</span><span class="token operator">?</span>\d<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token operator">|</span><span class="token number">1</span>\d<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token operator">|</span><span class="token number">2</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>\d<span class="token operator">|</span><span class="token number">25</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>它是一个多选结构，分成5个部分：</p><p>0{0,2}\d，匹配一位数，包括0补齐的。比如，9、09、009；<br>0?\d{2}，匹配两位数，包括0补齐的，也包括一位数；<br>1\d{2}，匹配100到199;<br>2[0-4]\d，匹配200-249；<br>25[0-5]，匹配250-255。<br>最后来看一下其可视化形式：</p><p>第五章小结<br>掌握正则表达式中的优先级后，再看任何正则应该都有信心分析下去了。</p><p>至于例子，不一而足，没有写太多。</p><p>这里稍微总结一下，竖杠的优先级最低，即最后运算。</p><p>只要知道这一点，就能读懂大部分正则。</p><p>另外关于元字符转义问题，当自己不确定与否时，尽管去转义，总之是不会错的。</p><p>第6章 正则表达式的构建<br>对于一门语言的掌握程度怎么样，可以有两个角度来衡量：读和写。</p><p>不仅要看懂别人的解决方案，也要能独立地解决问题。代码是这样，正则表达式也是这样。</p><p>与“读”相比，“写”往往更为重要，这个道理是不言而喻的。</p><p>对正则的运用，首重就是：如何针对问题，构建一个合适的正则表达式？</p><p>本章就解决该问题，内容包括：</p><p>平衡法则<br>构建正则前提<br>准确性<br> 效率</p><ol><li>平衡法则<br>构建正则有一点非常重要，需要做到下面几点的平衡：</li></ol><p>匹配预期的字符串<br>不匹配非预期的字符串<br>可读性和可维护性<br>效率<br>2. 构建正则前提<br>2.1 是否能使用正则</p><p>正则太强大了，以至于我们随便遇到一个操作字符串问题时，都会下意识地去想，用正则该怎么做。但我们始终要提醒自己，正则虽然强大，但不是万能的，很多看似很简单的事情，还是做不到的。</p><p>比如匹配这样的字符串：1010010001….</p><p>虽然很有规律，但是只靠正则就是无能为力。</p><p>2.2 是否有必要使用正则</p><p>要认识到正则的局限，不要去研究根本无法完成的任务。同时，也不能走入另一个极端：无所不用正则。能用字符串API解决的简单问题，就不该正则出马。</p><p>比如，从日期中提取出年月日，虽然可以使用正则：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-07-01"</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => ["2017-07-01", "2017", "07", "01", index: 0, input: "2017-07-01"]</span>其实，可以使用字符串的split方法来做，即可：<span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-07-01"</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> result <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => ["2017", "07", "01"]</span>比如，判断是否有问号，虽然可以使用：<span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"?id=xx&amp;act=search"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\?</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => 0</span>其实，可以使用字符串的indexOf方法：<span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"?id=xx&amp;act=search"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => 0</span>比如获取子串，虽然可以使用正则：<span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"JavaScript"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.&#123;4&#125;(.+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => Script</span>其实，可以直接使用字符串的substring或substr方法来做：<span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"JavaScript"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => Script</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.3 是否有必要构建一个复杂的正则</p><p>比如密码匹配问题，要求密码长度6-12位，由数字、小写字符和大写字母组成，但必须至少包括2种字符。</p><p>在第2章里，我们写出了正则是：</p><p>&#x2F;(?!^[0-9]{6,12}$)(?!^[a-z]{6,12}$)(?!^[A-Z]{6,12}$)^[0-9A-Za-z]{6,12}$&#x2F;</p><p>其实可以使用多个小正则来做：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9A-Za-z]&#123;6,12&#125;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> regex2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9]&#123;6,12&#125;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> regex3 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[A-Z]&#123;6,12&#125;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> regex4 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-z]&#123;6,12&#125;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">checkPassword</span><span class="token punctuation">(</span><span class="token parameter">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>regex1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>regex2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>regex3<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>regex4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>准确性<br>所谓准确性，就是能匹配预期的目标，并且不匹配非预期的目标。</li></ol><p>这里提到了“预期”二字，那么我们就需要知道目标的组成规则。</p><p>不然没法界定什么样的目标字符串是符合预期的，什么样的又不是符合预期的。</p><p>下面将举例说明，当目标字符串构成比较复杂时，该如何构建正则，并考虑到哪些平衡。</p><p>3.1 匹配固定电话</p><p>比如要匹配如下格式的固定电话号码：</p><p>055188888888</p><p>0551-88888888</p><p>(0551)88888888</p><p>第一步，了解各部分的模式规则。</p><p>上面的电话，总体上分为区号和号码两部分（不考虑分机号和+86的情形）。</p><p>区号是0开头的3到4位数字，对应的正则是：0\d{2,3}</p><p>号码是非0开头的7到8位数字，对应的正则是：[1-9]\d{6,7}</p><p>因此，匹配055188888888的正则是：<code>/^0\d&#123;2,3&#125;[1-9]\d&#123;6,7&#125;$/</code></p><p>匹配0551-88888888的正则是：<code>/^0\d&#123;2,3&#125;-[1-9]\d&#123;6,7&#125;$/</code></p><p>匹配(0551)88888888的正则是：<code>/^\(0\d&#123;2,3&#125;\)[1-9]\d&#123;6,7&#125;$/</code></p><p>第二步，明确形式关系。</p><p>这三者情形是或的关系，可以构建分支：</p><p><code>/^0\d&#123;2,3&#125;[1-9]\d&#123;6,7&#125;$|^0\d&#123;2,3&#125;-[1-9]\d&#123;6,7&#125;$|^\(0\d&#123;2,3&#125;\)[1-9]\d&#123;6,7&#125;$/</code></p><p>提取公共部分：</p><p><code>/^(0\d&#123;2,3&#125;|0\d&#123;2,3&#125;-|\(0\d&#123;2,3&#125;\))[1-9]\d&#123;6,7&#125;$/</code></p><p>进一步简写：</p><p><code>/^(0\d&#123;2,3&#125;-?|\(0\d&#123;2,3&#125;\))[1-9]\d&#123;6,7&#125;$/</code></p><p>其可视化形式：</p><p>上面的正则构建过程略显罗嗦，但是这样做，能保证正则是准确的。</p><p>上述三种情形是或的关系，这一点很重要，不然很容易按字符是否出现的情形把正则写成：</p><p>&#x2F;^(?0\d{2,3})?-?[1-9]\d{6,7}$&#x2F;</p><p>虽然也能匹配上述目标字符串，但也会匹配(0551-88888888这样的字符串。当然，这不是我们想要的。</p><p>其实这个正则也不是完美的，因为现实中，并不是每个3位数和4位数都是一个真实的区号。</p><p>这就是一个平衡取舍问题，一般够用就行。</p><p>3.2 匹配浮点数</p><p>要求匹配如下的格式：</p><p>1.23、+1.23、-1.23</p><p>10、+10、-10</p><p>.2、+.2、-.2</p><p>可以看出正则分为三部分。</p><p>符号部分：[+-]</p><p>整数部分：\d+</p><p>小数部分：.\d+</p><p>上述三个部分，并不是全部都出现。如果此时很容易写出如下的正则：</p><p><code>/^[+-]?(\d+)?(\.\d+)?$/</code></p><p>此正则看似没问题，但这个正则也会匹配空字符””。</p><p>因为目标字符串的形式关系不是要求每部分都是可选的。</p><p>要匹配1.23、+1.23、-1.23，可以用&#x2F;^[+-]?\d+.\d+$&#x2F;</p><p>要匹配10、+10、-10，可以用&#x2F;^[+-]?\d+$&#x2F;</p><p>要匹配.2、+.2、-.2，可以用&#x2F;^[+-]?.\d+$&#x2F;</p><p>因此整个正则是这三者的或的关系，提取公众部分后是：</p><p><code>/^[+-]?(\d+\.\d+|\d+|\.\d+)$/</code></p><p>其可视化形式是：</p><p>如果要求不匹配+.2和-.2，此时正则变成：</p><p>当然，<br><code>/^[+-]?(\d+\.\d+|\d+|\.\d+)$/</code><br>也不是完美的，我们也是做了些取舍，比如：</p><p>它也会匹配012这样以0开头的整数。如果要求不匹配的话，需要修改整数部分的正则。<br>一般进行验证操作之前，都要经过trim和判空。那样的话，也许那个错误正则也就够用了。<br>也可以进一步改写成：&#x2F;^[+-]?(\d+)?(.)?\d+$&#x2F;，这样我们就需要考虑可读性和可维护性了。<br>4. 效率<br>保证了准确性后，才需要是否要考虑要优化。大多数情形是不需要优化的，除非运行的非常慢。什么情形正则表达式运行才慢呢？我们需要考察正则表达式的运行过程（原理）。</p><p>正则表达式的运行分为如下的阶段：</p><p>编译<br>设定起始位置<br>尝试匹配<br>匹配失败的话，从下一位开始继续第3步<br>最终结果：匹配成功或失败<br>下面以代码为例，来看看这几个阶段都做了什么：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span>lastIndex<span class="token punctuation">,</span> regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"123abc34def"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span>lastIndex<span class="token punctuation">,</span> regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"123abc34def"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span>lastIndex<span class="token punctuation">,</span> regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"123abc34def"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span>lastIndex<span class="token punctuation">,</span> regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"123abc34def"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => 0 ["123", index: 0, input: "123abc34def"]</span><span class="token comment">// => 3 ["34", index: 6, input: "123abc34def"]</span><span class="token comment">// => 8 null</span><span class="token comment">// => 0 ["123", index: 0, input: "123abc34def"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体分析如下：</p><p><code>var regex = /\d+/g;</code><br>当生成一个正则时，引擎会对其进行编译。报错与否出现这这个阶段。</p><p><code>regex.exec(&quot;123abc34def&quot;)</code><br>当尝试匹配时，需要确定从哪一位置开始匹配。一般情形都是字符串的开头，即第0位。</p><p>但当使用test和exec方法，且正则有g时，起始位置是从正则对象的lastIndex属性开始。</p><p>因此第一次exec是从第0位开始，而第二次是从3开始的。</p><p>设定好起始位置后，就开始尝试匹配了。</p><p>比如第一次exec，从0开始，去尝试匹配，并且成功地匹配到3个数字。此时结束时的下标是2，因此下一次的起始位置是3。</p><p>而第二次，起始下标是3，但第3个字符是“a”，并不是数字。但此时并不会直接报匹配失败，而是移动到下一位置，即从第4位开始继续尝试匹配，但该字符是b，也不是数字。再移动到下一位，是c仍不行，再移动一位是数字3，此时匹配到了两位数字34。此时，下一次匹配的位置是d的位置，即第8位。</p><p>第三次，是从第8位开始匹配，直到试到最后一位，也没发现匹配的，因此匹配失败，返回null。同时设置lastIndex为0，即，如要再尝试匹配的话，需从头开始。</p><p>从上面可以看出，匹配会出现效率问题，主要出现在上面的第3阶段和第4阶段。</p><p>因此，主要优化手法也是针对这两阶段的。</p><p>4.1 使用具体型字符组来代替通配符，来消除回溯</p><p>而在第三阶段，最大的问题就是回溯。</p><p>例如，匹配双引用号之间的字符。如，匹配字符串123”abc”456中的”abc”。</p><p>如果正则用的是：&#x2F;“.*”&#x2F;，，会在第3阶段产生4次回溯（粉色表示.*匹配的内容）：</p><p>如果正则用的是：&#x2F;“.<em>?”&#x2F;，会产生2次回溯（粉色表示.</em>?匹配的内容）：</p><p>因为回溯的存在，需要引擎保存多种可能中未尝试过的状态，以便后续回溯时使用。注定要占用一定的内存。</p><p>此时要使用具体化的字符组，来代替通配符.，以便消除不必要的字符，此时使用正则&#x2F;“[^”]*”&#x2F;，即可。</p><p>4.2 使用非捕获型分组</p><p>因为括号的作用之一是，可以捕获分组和分支里的数据。那么就需要内存来保存它们。</p><p>当我们不需要使用分组引用和反向引用时，此时可以使用非捕获分组。例如：</p><p><code>/^[+-]?(\d+\.\d+|\d+|\.\d+)$/</code></p><p>可以修改成：</p><p><code>/^[+-]?(?:\d+\.\d+|\d+|\.\d+)$/</code></p><p>4.3 独立出确定字符</p><p>例如&#x2F;a+&#x2F;，可以修改成&#x2F;aa*&#x2F;。</p><p>因为后者能比前者多确定了字符a。这样会在第四步中，加快判断是否匹配失败，进而加快移位的速度。</p><p>4.4 提取分支公共部分</p><p>比如&#x2F;^abc|^def&#x2F;，修改成&#x2F;^(?:abc|def)&#x2F;。</p><p>又比如&#x2F;this|that&#x2F;，修改成&#x2F;th(?:is|at)&#x2F;。</p><p>这样做，可以减少匹配过程中可消除的重复。</p><p>4.5 减少分支的数量，缩小它们的范围</p><p>&#x2F;red|read&#x2F;，可以修改成&#x2F;rea?d&#x2F;。此时分支和量词产生的回溯的成本是不一样的。但这样优化后，可读性会降低的。</p><p>第六章小结<br>本章涉及的内容并不多。</p><p>一般情况下，针对某问题能写出一个满足需求的正则，基本上就可以了。</p><p>至于准确性和效率方面的追求，纯属看个人要求了。我觉得够用就行了。</p><p>关于准确性，本章关心的是最常用的解决思路：</p><p>针对每种情形，分别写出正则，然用分支把他们合并在一起，再提取分支公共部分，就能得到准确的正则。</p><p>至于优化，本章没有为了凑数，去写一大堆。了解了匹配原理，常见的优化手法也就这么几种。</p><p>第七章 正则表达式编程<br>什么叫知识，能指导我们实践的东西才叫知识。</p><p>学习一样东西，如果不能使用，最多只能算作纸上谈兵。正则表达式的学习，也不例外。</p><p>掌握了正则表达式的语法后，下一步，也是关键的一步，就是在真实世界中使用它。</p><p>那么如何使用正则表达式呢？有哪些关键的点呢？本章就解决这个问题。</p><p>内容包括：</p><p>正则表达式的四种操作<br>相关API注意要点<br>真实案例</p><ol><li>正则表达式的四种操作<br>正则表达式是匹配模式，不管如何使用正则表达式，万变不离其宗，都需要先“匹配”。</li></ol><p>有了匹配这一基本操作后，才有其他的操作：验证、切分、提取、替换。</p><p>进行任何相关操作，也需要宿主引擎相关API的配合使用。当然，在JS中，相关API也不多。</p><p>1.1 验证</p><p>验证是正则表达式最直接的应用，比如表单验证。</p><p>在说验证之前，先要说清楚匹配是什么概念。</p><p>所谓匹配，就是看目标字符串里是否有满足匹配的子串。因此，“匹配”的本质就是“查找”。</p><p>有没有匹配，是不是匹配上，判断是否的操作，即称为“验证”。</p><p>这里举一个例子，来看看如何使用相关API进行验证操作的。</p><p>比如，判断一个字符串中是否有数字。</p><p>使用search</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"abc123"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token operator">~</span>string<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => true</span>使用test<span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"abc123"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => true</span>使用match<span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"abc123"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token operator">!</span>string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => true</span>使用exec<span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"abc123"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token operator">!</span>regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，最常用的是test。</p><p>1.2 切分</p><p>匹配上了，我们就可以进行一些操作，比如切分。</p><p>所谓“切分”，就是把目标字符串，切成一段一段的。在JS中使用的是split。</p><p>比如，目标字符串是”html,css,javascript”，按逗号来切分：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">,</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"html,css,javascript"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => ["html", "css", "javascript"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>又比如，如下的日期格式：</p><p>2017&#x2F;06&#x2F;26</p><p>2017.06.26</p><p>2017-06-26</p><p>可以使用split“切出”年月日：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\D</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"2017/06/26"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"2017.06.26"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"2017-06-26"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => ["2017", "06", "26"]</span><span class="token comment">// => ["2017", "06", "26"]</span><span class="token comment">// => ["2017", "06", "26"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.3 提取</p><p>虽然整体匹配上了，但有时需要提取部分匹配的数据。</p><p>此时正则通常要使用分组引用（分组捕获）功能，还需要配合使用相关API。</p><p>这里，还是以日期为例，提取出年月日。注意下面正则中的括号：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">match<span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(\d&#123;4&#125;)\D(\d&#123;2&#125;)\D(\d&#123;2&#125;)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-06-26"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// =>["2017-06-26", "2017", "06", "26", index: 0, input: "2017-06-26"]</span>exec<span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(\d&#123;4&#125;)\D(\d&#123;2&#125;)\D(\d&#123;2&#125;)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-06-26"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// =>["2017-06-26", "2017", "06", "26", index: 0, input: "2017-06-26"]</span>test<span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(\d&#123;4&#125;)\D(\d&#123;2&#125;)\D(\d&#123;2&#125;)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-06-26"</span><span class="token punctuation">;</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>$1<span class="token punctuation">,</span> RegExp<span class="token punctuation">.</span>$2<span class="token punctuation">,</span> RegExp<span class="token punctuation">.</span>$3 <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => "2017" "06" "26"</span>search<span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(\d&#123;4&#125;)\D(\d&#123;2&#125;)\D(\d&#123;2&#125;)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-06-26"</span><span class="token punctuation">;</span>string<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>$1<span class="token punctuation">,</span> RegExp<span class="token punctuation">.</span>$2<span class="token punctuation">,</span> RegExp<span class="token punctuation">.</span>$3 <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => "2017" "06" "26"</span>replace<span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(\d&#123;4&#125;)\D(\d&#123;2&#125;)\D(\d&#123;2&#125;)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-06-26"</span><span class="token punctuation">;</span><span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">match<span class="token punctuation">,</span> year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>date<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => ["2017", "06", "26"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，最常用的是match。</p><p>1.4 替换</p><p>找，往往不是目的，通常下一步是为了替换。在JS中，使用replace进行替换。</p><p>比如把日期格式，从yyyy-mm-dd替换成yyyy&#x2F;mm&#x2F;dd：</p><p>var string &#x3D; “2017-06-26”;<br>var today &#x3D; new Date( string.replace(&#x2F;-&#x2F;g, “&#x2F;“) );<br>console.log( today );<br>&#x2F;&#x2F; &#x3D;&gt; Mon Jun 26 2017 00:00:00 GMT+0800 (中国标准时间)<br>这里只是简单地应用了一下replace。但，replace方法是强大的，是需要重点掌握的。</p><ol start="2"><li>相关API注意要点<br>从上面可以看出用于正则操作的方法，共有6个，字符串实例4个，正则实例2个：</li></ol><p>String#search</p><p>String#split</p><p>String#match</p><p>String#replace</p><p>RegExp#test</p><p>RegExp#exec</p><p>本文不打算详细地讲解它们的方方面面细节，具体可以参考《JavaScript权威指南》的第三部分。本文重点列出一些容易忽视的地方，以飨读者。</p><p>2.1 search和match的参数问题</p><p>我们知道字符串实例的那4个方法参数都支持正则和字符串。</p><p>但search和match，会把字符串转换为正则的。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017.06.27"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => 0</span><span class="token comment">//需要修改成下列形式之一</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token string">"\\."</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => 4</span><span class="token comment">// => 4</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => ["2", index: 0, input: "2017.06.27"]</span><span class="token comment">//需要修改成下列形式之一</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">"\\."</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => [".", index: 4, input: "2017.06.27"]</span><span class="token comment">// => [".", index: 4, input: "2017.06.27"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => ["2017", "06", "27"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => "2017/06.27"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.2 match返回结果的格式问题</p><p>match返回结果的格式，与正则对象是否有修饰符g有关。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017.06.27"</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\b(\d+)\b</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> regex2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\b(\d+)\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex1<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex2<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => ["2017", "2017", index: 0, input: "2017.06.27"]</span><span class="token comment">// => ["2017", "06", "27"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没有g，返回的是标准匹配格式，即，数组的第一个元素是整体匹配的内容，接下来是分组捕获的内容，然后是整体匹配的第一个下标，最后是输入的目标字符串。</p><p>有g，返回的是所有匹配的内容。</p><p>当没有匹配时，不管有无g，都返回null。</p><p>2.3 exec比match更强大</p><p>当正则没有g时，使用match返回的信息比较多。但是有g后，就没有关键的信息index了。</p><p>而exec方法就能解决这个问题，它能接着上一次匹配后继续匹配：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017.06.27"</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\b(\d+)\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex2<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex2<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex2<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex2<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex2<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex2<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex2<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex2<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => ["2017", "2017", index: 0, input: "2017.06.27"]</span><span class="token comment">// => 4</span><span class="token comment">// => ["06", "06", index: 5, input: "2017.06.27"]</span><span class="token comment">// => 7</span><span class="token comment">// => ["27", "27", index: 8, input: "2017.06.27"]</span><span class="token comment">// => 10</span><span class="token comment">// => null</span><span class="token comment">// => 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中正则实例lastIndex属性，表示下一次匹配开始的位置。</p><p>比如第一次匹配了“2017”，开始下标是0，共4个字符，因此这次匹配结束的位置是3，下一次开始匹配的位置是4。</p><p>从上述代码看出，在使用exec时，经常需要配合使用while循环：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017.06.27"</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\b(\d+)\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> result<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span> result <span class="token operator">=</span> regex2<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> result<span class="token punctuation">,</span> regex2<span class="token punctuation">.</span>lastIndex <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// => ["2017", "2017", index: 0, input: "2017.06.27"] 4</span><span class="token comment">// => ["06", "06", index: 5, input: "2017.06.27"] 7</span><span class="token comment">// => ["27", "27", index: 8, input: "2017.06.27"] 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.4 修饰符g，对exex和test的影响</p><p>上面提到了正则实例的lastIndex属性，表示尝试匹配时，从字符串的lastIndex位开始去匹配。</p><p>字符串的四个方法，每次匹配时，都是从0开始的，即lastIndex属性始终不变。</p><p>而正则实例的两个方法exec、test，当正则是全局匹配时，每一次匹配完成后，都会修改lastIndex。下面让我们以test为例，看看你是否会迷糊：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> regex<span class="token punctuation">.</span>lastIndex <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"aba"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> regex<span class="token punctuation">.</span>lastIndex <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"ababc"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> regex<span class="token punctuation">.</span>lastIndex <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => true 1</span><span class="token comment">// => true 3</span><span class="token comment">// => false 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意上面代码中的第三次调用test，因为这一次尝试匹配，开始从下标lastIndex即3位置处开始查找，自然就找不到了。</p><p>如果没有g，自然都是从字符串第0个字符处开始尝试匹配：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> regex<span class="token punctuation">.</span>lastIndex <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"aba"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> regex<span class="token punctuation">.</span>lastIndex <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"ababc"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> regex<span class="token punctuation">.</span>lastIndex <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => true 0</span><span class="token comment">// => true 0</span><span class="token comment">// => true 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.5 test整体匹配时需要使用^和$</p><p>这个相对容易理解，因为test是看目标字符串中是否有子串匹配正则，即有部分匹配即可。</p><p>如果，要整体匹配，正则前后需要添加开头和结尾：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">123</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"a123b"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^123$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"a123b"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^123$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.6 split相关注意事项</p><p>split方法看起来不起眼，但要注意的地方有两个的。</p><p>第一，它可以有第二个参数，表示结果数组的最大长度：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"html,css,javascript"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">,</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// =>["html", "css"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第二，正则使用分组时，结果数组中是包含分隔符的：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"html,css,javascript"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(,)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// =>["html", ",", "css", ",", "javascript"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2.7 replace是很强大的</p><p>《JavaScript权威指南》认为exec是这6个API中最强大的，而我始终认为replace才是最强大的。因为它也能拿到该拿到的信息，然后可以假借替换之名，做些其他事情。</p><p>总体来说replace有两种使用形式，这是因为它的第二个参数，可以是字符串，也可以是函数。</p><p>当第二个参数是字符串时，如下的字符有特殊的含义：</p><p>$1,$2,…,$99 匹配第1~99个分组里捕获的文本<br>$&amp; 匹配到的子串文本<br>$&#96; 匹配到的子串的左边文本<br>$’ 匹配到的子串的右边文本<br>? 美元符号<br>例如，把”2,3,5”，变成”5&#x3D;2+3”：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"2,3,5"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d+),(\d+),(\d+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">"$3=$1+$2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => "5=2+3"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>又例如，把”2,3,5”，变成”222,333,555”:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"2,3,5"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d+)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"$&amp;$&amp;$&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => "222,333,555"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>再例如，把”2+3&#x3D;5”，变成”2+3&#x3D;2+3&#x3D;5&#x3D;5”:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"2+3=5"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">=</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">"$&amp;$`$&amp;$'$&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => "2+3=2+3=5=5"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当第二个参数是函数时，我们需要注意该回调函数的参数具体是什么：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"1234 2345 3456"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d)\d&#123;2&#125;(\d)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">match<span class="token punctuation">,</span> $1<span class="token punctuation">,</span> $2<span class="token punctuation">,</span> index<span class="token punctuation">,</span> input</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span>match<span class="token punctuation">,</span> $1<span class="token punctuation">,</span> $2<span class="token punctuation">,</span> index<span class="token punctuation">,</span> input<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => ["1234", "1", "4", 0, "1234 2345 3456"]</span><span class="token comment">// => ["2345", "2", "5", 5, "1234 2345 3456"]</span><span class="token comment">// => ["3456", "3", "6", 10, "1234 2345 3456"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时我们可以看到replace拿到的信息，并不比exec少。</p><p>2.8 使用构造函数需要注意的问题</p><p>一般不推荐使用构造函数生成正则，而应该优先使用字面量。因为用构造函数会多写很多\。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-06-27 2017.06.27 2017/06/27"</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d&#123;4&#125;(-|\.|\/)\d&#123;2&#125;\1\d&#123;2&#125;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => ["2017-06-27", "2017.06.27", "2017/06/27"]</span>regex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"\\d&#123;4&#125;(-|\\.|\\/)\\d&#123;2&#125;\\1\\d&#123;2&#125;"</span><span class="token punctuation">,</span> <span class="token string">"g"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => ["2017-06-27", "2017.06.27", "2017/06/27"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.9 修饰符</p><p>ES5中修饰符，共3个：</p><p>g 全局匹配，即找到所有匹配的，单词是global</p><p>i 忽略字母大小写，单词ingoreCase</p><p>m 多行匹配，只影响^和$，二者变成行的概念，即行开头和行结尾。单词是multiline</p><p>当然正则对象也有相应的只读属性：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\w</span><span class="token regex-delimiter">/</span><span class="token regex-flags">img</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span>global <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span>ignoreCase <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span>multiline <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => true</span><span class="token comment">// => true</span><span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.10 source属性</p><p>正则实例对象属性，除了global、ingnoreCase、multiline、lastIndex属性之外，还有一个source属性。</p><p>它什么时候有用呢？</p><p>比如，在构建动态的正则表达式时，可以通过查看该属性，来确认构建出的正则到底是什么：</p><pre class="line-numbers language-none"><code class="language-none">var className &#x3D; &quot;high&quot;;var regex &#x3D; new RegExp(&quot;(^|\\s)&quot; + className + &quot;(\\s|$)&quot;);console.log( regex.source )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>&#x2F;&#x2F; &#x3D;&gt; (^|\s)high(\s|$) 即字符串”(^|\s)high(\s|$)”<br>2.11 构造函数属性</p><p>构造函数的静态属性基于所执行的最近一次正则操作而变化。除了是$1,…,$9之外，还有几个不太常用的属性（有兼容性问题）：</p><p>RegExp.input 最近一次目标字符串，简写成RegExp[“$_”]<br>RegExp.lastMatch 最近一次匹配的文本，简写成RegExp[“$&amp;”]<br>RegExp.lastParen 最近一次捕获的文本，简写成RegExp[“$+”]<br>RegExp.leftContext 目标字符串中lastMatch之前的文本，简写成RegExp[“$&#96;”]<br>RegExp.rightContext 目标字符串中lastMatch之后的文本，简写成RegExp[“$’”]<br>测试代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([abc])(\d)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"a1b2c3d4e5"</span><span class="token punctuation">;</span>string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>input <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">[</span><span class="token string">"$_"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => "a1b2c3d4e5"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>lastMatch <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">[</span><span class="token string">"$&amp;"</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => "c3"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>lastParen <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">[</span><span class="token string">"$+"</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => "3"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>leftContext <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">[</span><span class="token string">"$`"</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => "a1b2"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>rightContext <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">[</span><span class="token string">"$'"</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => "d4e5"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>真实案例<br>3.1 使用构造函数生成正则表达式</li></ol><p>我们知道要优先使用字面量来创建正则，但有时正则表达式的主体是不确定的，此时可以使用构造函数来创建。模拟getElementsByClassName方法，就是很能说明该问题的一个例子。</p><p>这里getElementsByClassName函数的实现思路是：</p><p>比如要获取className为”high”的dom元素；<br>首先生成一个正则：&#x2F;(^|\s)high(\s|$)&#x2F;；<br>然后再用其逐一验证页面上的所有dom元素的类名，拿到满足匹配的元素即可。<br>代码如下(可以直接复制到本地查看运行效果)：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"high"</span><span class="token operator">></span><span class="token number">1111</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"high"</span><span class="token operator">></span><span class="token number">2222</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token number">3333</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">function</span> <span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token parameter">className</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> elements <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"(^|\\s)"</span> <span class="token operator">+</span> className <span class="token operator">+</span> <span class="token string">"(\\s|$)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> element <span class="token operator">=</span> elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>className<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> highs <span class="token operator">=</span> <span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'high'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>highs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.2 使用字符串保存数据</p><p>一般情况下，我们都愿意使用数组来保存数据。但我看到有的框架中，使用的却是字符串。</p><p>使用时，仍需要把字符串切分成数组。虽然不一定用到正则，但总感觉酷酷的，这里分享如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> utils <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token string">"Boolean|Number|String|Function|Array|Date|RegExp|Object|Error"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>utils<span class="token punctuation">[</span><span class="token string">"is"</span> <span class="token operator">+</span> item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"[object "</span> <span class="token operator">+</span> item <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> utils<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.3 if语句中使用正则替代&amp;&amp;</p><p>比如，模拟ready函数，即加载完毕后再执行回调（不兼容ie的）：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> readyRE <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">complete|loaded|interactive</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">ready</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>readyRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>readyState<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> document<span class="token punctuation">.</span>body<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'DOMContentLoaded'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"加载完毕！"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.4 使用强大的replace</p><p>因为replace方法比较强大，有时用它根本不是为了替换，只是拿其匹配到的信息来做文章。</p><p>这里以查询字符串（querystring）压缩技术为例，注意下面replace方法中，回调函数根本没有返回任何东西。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">compress</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> keys <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>source<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([^=&amp;]+)=([^&amp;]*)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">full<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>keys<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>keys<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">?</span> keys<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> keys<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> keys<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">compress</span><span class="token punctuation">(</span><span class="token string">"a=1&amp;b=2&amp;a=3&amp;b=4"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => "a=1,3&amp;b=2,4"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.5 综合运用</p><p>最后这里再做个简单实用的正则测试器。</p><p>具体效果如下：</p><p>代码，直接贴了，相信你能看得懂：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>section<span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"err"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">"regex"</span> placeholder<span class="token operator">=</span><span class="token string">"请输入正则表达式"</span><span class="token operator">></span><span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">"text"</span> placeholder<span class="token operator">=</span><span class="token string">"请输入测试文本"</span><span class="token operator">></span><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"run"</span><span class="token operator">></span>测试一下<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"result"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span>section<span class="token punctuation">&#123;</span><span class="token literal-property property">display</span><span class="token operator">:</span>flex<span class="token punctuation">;</span>flex<span class="token operator">-</span>direction<span class="token operator">:</span>column<span class="token punctuation">;</span>justify<span class="token operator">-</span>content<span class="token operator">:</span>space<span class="token operator">-</span>around<span class="token punctuation">;</span><span class="token literal-property property">height</span><span class="token operator">:</span>300px<span class="token punctuation">;</span><span class="token literal-property property">padding</span><span class="token operator">:</span><span class="token number">0</span> 200px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>section <span class="token operator">*</span><span class="token punctuation">&#123;</span>min<span class="token operator">-</span>height<span class="token operator">:</span>30px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>#err <span class="token punctuation">&#123;</span><span class="token literal-property property">color</span><span class="token operator">:</span>red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>#result<span class="token punctuation">&#123;</span>line<span class="token operator">-</span>height<span class="token operator">:</span>30px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>info <span class="token punctuation">&#123;</span><span class="token literal-property property">background</span><span class="token operator">:</span>#00c5ff<span class="token punctuation">;</span><span class="token literal-property property">padding</span><span class="token operator">:</span>2px<span class="token punctuation">;</span><span class="token literal-property property">margin</span><span class="token operator">:</span>2px<span class="token punctuation">;</span><span class="token literal-property property">display</span><span class="token operator">:</span>inline<span class="token operator">-</span>block<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 获取相应dom元素</span><span class="token keyword">var</span> regexInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"regex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> textInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> runBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> errBox <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"err"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> resultBox <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 绑定点击事件</span>runBtn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 清除错误和结果</span>errBox<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>resultBox<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment">// 获取正则和文本</span><span class="token keyword">var</span> text <span class="token operator">=</span> textInput<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token keyword">var</span> regex <span class="token operator">=</span> regexInput<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>regex <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>errBox<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"请输入正则表达式"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>text <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>errBox<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"请输入测试文本"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>regex <span class="token operator">=</span> <span class="token function">createRegex</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>regex<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token keyword">var</span> result<span class="token punctuation">,</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 没有修饰符g的话，会死循环</span><span class="token keyword">if</span> <span class="token punctuation">(</span>regex<span class="token punctuation">.</span>global<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span>result <span class="token operator">=</span> regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>results<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>results<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>resultBox<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"匹配到0个结果"</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 倒序是有必要的</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> results<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> result <span class="token operator">=</span> results<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> match <span class="token operator">=</span> result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> prefix <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> suffix <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>index <span class="token operator">+</span> match<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>text <span class="token operator">=</span> prefix <span class="token operator">+</span> <span class="token string">'&lt;span class="info">'</span><span class="token operator">+</span> match<span class="token operator">+</span> <span class="token string">'&lt;/span>'</span><span class="token operator">+</span> suffix<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>resultBox<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"匹配到"</span> <span class="token operator">+</span> results<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token string">"个结果:&lt;br>"</span> <span class="token operator">+</span> text<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 生成正则表达式，核心函数</span><span class="token keyword">function</span> <span class="token function">createRegex</span><span class="token punctuation">(</span><span class="token parameter">regex</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>regex<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>regex <span class="token operator">=</span> regex<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>regex<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> flags <span class="token operator">=</span> regex<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>regex <span class="token operator">=</span> regex<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>regex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>regex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token string">"g"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> regex<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>errBox<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"无效的正则表达式"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第七章小结<br>相关API的注意点，本章基本上算是一网打尽了。</p><p>至于文中的例子，都是点睛之笔，没有详细解析。如有理解不透的，建议自己敲一敲。</p><p>后记<br>其实本文首发于：正则表达式系列总结 - 知乎专栏</p><p>原文是一个系列。一直等到老姚成为掘金的专栏作者，经过仔细考虑，在掘金平台没有采用系列形式，而是合成为了一篇文章。这样既便于读者阅读，最起码能一气呵成地阅读。同时也便于作者统一回复留言。</p><p>文章要结束了，最后还要有几点说明。</p><ol><li>需要注意的地方<br>本文主要讨论的是JavaScript的正则表达式，更精确地说是ES5的正则表达式。</li></ol><p>JavaScript的正则表达式引擎是传统型NFA的，因此本系列的讨论是适合任何一门正则引擎是传统型NFA的编程语言。当然，市面上大部分语言的正则引擎都是这种的。而JS里正则涉及到的所有语法要点，是这种引擎支持的核心子集。也就是说，要学正则表达式，不妨以JS正则为出发点。</p><ol start="2"><li>参考资料<br>当然本文不是无本之末。主要参考的是几本书籍。</li></ol><p>以下书籍中核心章节都认真阅读过，甚至阅读多遍。</p><p>《JavaScript权威指南》，看完本系列，再去看书中的第10章，你就知道了什么叫字字珠玑。</p><p>《精通正则表达式》，权威且比较杂乱，我阅读的第一本正则表达式书籍。</p><p>《正则表达式必知必会》，这是我看的第二本正则，看完后，确定自己算是入门了。</p><p>《正则指引》，《精通正则表达式》的译者写的，相对清晰。</p><p>《正则表达式入门》，我看的是英文版的，对于已经入门的我，基本没多少收获了。</p><p>《正则表达式经典实例》，除了第3章，比较杂外，也有收获，以实例为主导的一本书。</p><p>《JavaScript Regular Expressions》，为数不多转讲JS正则的。页数不多，也有收获。</p><p>《高性能JavaScript 》第5章，我看的是英文版的。第5章，讲了回溯和优化。</p><p>《JavaScript忍者秘籍》第7章，大概讲了一下正则的用法，几个例子还不错。</p><p>《JavaScript高级程序设计》第5.4节，比较简短的介绍。</p><p>使用的工具：</p><p>Regulex，一款可视化工具<br>ProcessOn - 免费在线作图，实时协作<br>LICEcap – 灵活好用，GIF 屏幕录制工具</p><ol start="3"><li>个人感悟<br>要多写文章的</li></ol><p>首先，我十分感谢读者。读者能在信息泛滥的网络里，点击我的文章进来瞧两眼，这都是对其注意力的消费。更何况，还有很多童鞋都认真读了，甚至给我挑毛病，这都是对我的帮助。不知有多少童鞋是从头读到这里的，不妨留言打卡，让我知道你是用心的读者，而并非简简单单地收藏一下，然后就再也不曾看过了。</p><p>说到要写文章，其目的是以教为学。看似为了教，其实是为了学。能教会别人才算自己真正学会了，最起码形成了文字，通过了自己的语言逻辑这一关。如果还能有人指出你的错误认知，那样收获就更大了，何乐而不为呢？</p><p>很多书中都提到类似的观点，例如《知道做到》《好好学习》《与时间做朋友》《暗时间》等。</p><p>以教为学的其他手段</p><p>当然，以教为学的手段还有很多，比如翻译一本书。我私下已经翻译了好几本（窃喜^_^）。</p><p>可以从薄点的书籍开始，比如100页左右的。基本上使用有道就可以了，也不用要求自己一词一句的翻译，能用自己的话说明白就行了。说到这里，不得不提起，我们的阮一峰大神，在我看来，他就是成功地应用这种模式的。看完外文的文章，理解明白了，用自己的话说一说，再形成自己的简练风格。</p><p>恐怕你可能说自己的英文水平不够，没信心尝试。相信我，熟悉了常用词汇（比如literal翻译成字面量）后，配合有道翻译，薄点的书，一天翻译一章是没问题的。当然前提是你懂相关领域，不然是没办法意译的。</p><p>最后一种以教为学的手段是，写一本书。写文章是基础，文章多了，自然而言就可以写成一本书。当然，写书强调的是整体架构，所以文章最好成体系。</p><p>你看看那些国内专业书籍的作者，一般都事先翻译过几本书的。最起码在前端领域，我就看到了好几位是这么干的。翻译明白了，学会了，用自己的角度去弄出一本书还是相对很容易的。</p><p>虽然，本人并未曾写过书，但上述方法，我始终相信是可行的。</p><p>最后，我们该想到，陆游诗人对前端界做出的最大贡献是：</p><p>纸上得来终觉浅，绝知此事要躬行。</p><p>本文完。</p><p>可以收藏PDF版本：<a href="https://github.com/qdlaoyao/js-regex-mini-book">JavaScript正则迷你书</a></p>]]></content>
      
      
      <categories>
          
          <category> 正则 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20种css3按钮hover悬停特效</title>
      <link href="/2023/10/20/20-chong-css3-an-niu-hover-xuan-ting-te-xiao/"/>
      <url>/2023/10/20/20-chong-css3-an-niu-hover-xuan-ting-te-xiao/</url>
      
        <content type="html"><![CDATA[<h3 id="CSS-20种css3按钮hover悬停特效-来自网络"><a href="#CSS-20种css3按钮hover悬停特效-来自网络" class="headerlink" title="CSS 20种css3按钮hover悬停特效(来自网络)"></a>CSS 20种css3按钮hover悬停特效(来自网络)</h3><hr><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/3.gif" alt="截图" title="代码效果示例"></p><hr><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">*</span> <span class="token punctuation">&#123;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>            <span class="token property">font-family</span><span class="token punctuation">:</span> Verdana<span class="token punctuation">,</span> Geneva<span class="token punctuation">,</span> Tahoma<span class="token punctuation">,</span> sans-serif        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid</span> <span class="token punctuation">&#123;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #b89467<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>            <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>auto-fit<span class="token punctuation">,</span> <span class="token function">minmax</span><span class="token punctuation">(</span>220px<span class="token punctuation">,</span> 1fr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">gap</span><span class="token punctuation">:</span> 10px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 220px<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> aliceblue<span class="token punctuation">;</span>            <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>            <span class="token property">justify-content</span><span class="token punctuation">:</span> center        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field h1</span> <span class="token punctuation">&#123;</span>            <span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 2px 20px 10px 6px<span class="token punctuation">;</span>            <span class="token property">align-self</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span>            <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">border-bottom</span><span class="token punctuation">:</span> 1px solid #7c7000<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #0586b1<span class="token punctuation">;</span>            <span class="token property">border-bottom-right-radius</span><span class="token punctuation">:</span> 100%        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field button</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> unset<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>            <span class="token property">text-transform</span><span class="token punctuation">:</span> uppercase<span class="token punctuation">;</span>            <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 155px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> unset<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> unset<span class="token punctuation">;</span>            <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>9px<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field button:focus</span> <span class="token punctuation">&#123;</span>            <span class="token property">outline</span><span class="token punctuation">:</span> 0        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but1</span> <span class="token punctuation">&#123;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>0deg<span class="token punctuation">,</span> orange<span class="token punctuation">,</span> red<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 2px darkgreen solid<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but1:hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">radial-gradient</span><span class="token punctuation">(</span>orange<span class="token punctuation">,</span> red<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 1px 10px 1px #97d189<span class="token punctuation">;</span>            <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 5px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but2</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #00f<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>            <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">hue-rotate</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transition-property</span><span class="token punctuation">:</span> filter<span class="token punctuation">,</span> letter-spacing<span class="token punctuation">,</span> box-shadow<span class="token punctuation">,</span> border-radius<span class="token punctuation">;</span>            <span class="token property">transition-duration</span><span class="token punctuation">:</span> 5s<span class="token punctuation">,</span> 1s<span class="token punctuation">,</span> 1s<span class="token punctuation">,</span> 2s<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> groove 2px green        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but2:hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">hue-rotate</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>            <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 1px 10px 0 white<span class="token punctuation">,</span> 0px 2px 20px 0 #4f7507<span class="token punctuation">,</span> 0px 3px 30px 0 #ff0505<span class="token punctuation">,</span> 0px 4px 40px 0 white<span class="token punctuation">,</span> 0px 5px 300px 0 #1b0202        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but3</span> <span class="token punctuation">&#123;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">radial-gradient</span><span class="token punctuation">(</span><span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0.301<span class="token punctuation">)</span> 20%<span class="token punctuation">,</span> black<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0.1<span class="token punctuation">)</span> 1px solid        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but3::before,        div.grid div.field .but3::after</span> <span class="token punctuation">&#123;</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> white        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but3::before</span> <span class="token punctuation">&#123;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but3::after</span> <span class="token punctuation">&#123;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> 0        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but3:hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> darkslateblue<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 25px<span class="token punctuation">;</span>            <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>            <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 1000px 10px <span class="token function">rgba</span><span class="token punctuation">(</span>220<span class="token punctuation">,</span> 245<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.986<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but3:hover:after,        div.grid div.field .but3:hover:before</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 2px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but4</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>105<span class="token punctuation">,</span> 105<span class="token punctuation">,</span> 105<span class="token punctuation">,</span> 0.082<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but4::before</span> <span class="token punctuation">&#123;</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>            <span class="token property">border-top</span><span class="token punctuation">:</span> 2.3px solid green<span class="token punctuation">;</span>            <span class="token property">border-left</span><span class="token punctuation">:</span> 2.3px solid green<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> transparent        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but4::after</span> <span class="token punctuation">&#123;</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">border-bottom</span><span class="token punctuation">:</span> 2.3px solid green<span class="token punctuation">;</span>            <span class="token property">border-right</span><span class="token punctuation">:</span> 2.3px solid green<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> transparent        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but4:hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.932<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but4:hover:before,        div.grid div.field .but4:hover:after</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but5</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but5::before</span> <span class="token punctuation">&#123;</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>            <span class="token property">border-top</span><span class="token punctuation">:</span> 2.3px solid green<span class="token punctuation">;</span>            <span class="token property">border-left</span><span class="token punctuation">:</span> 2.3px solid green<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> transparent        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but5::after</span> <span class="token punctuation">&#123;</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">border-bottom</span><span class="token punctuation">:</span> 2.3px solid green<span class="token punctuation">;</span>            <span class="token property">border-right</span><span class="token punctuation">:</span> 2.3px solid green<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> transparent        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but5:hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.0455<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but5:hover:before,        div.grid div.field .but5:hover:after</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 0        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but6</span> <span class="token punctuation">&#123;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 3px orangered solid<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #0f251a        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but6::before</span> <span class="token punctuation">&#123;</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> -3px<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 3px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but6::after</span> <span class="token punctuation">&#123;</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> -3px<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 3px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but6:hover:after,        div.grid div.field .but6:hover:before</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 119px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but7</span> <span class="token punctuation">&#123;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">skewX</span><span class="token punctuation">(</span>-15deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>10px<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 2px solid Olive<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #dd0c97        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but7:hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>10px<span class="token punctuation">,</span> 0<span class="token punctuation">)</span> <span class="token function">skewX</span><span class="token punctuation">(</span>-15deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">box-shadow</span><span class="token punctuation">:</span> -7px 7px 1px 1px <span class="token function">rgba</span><span class="token punctuation">(</span>221<span class="token punctuation">,</span> 12<span class="token punctuation">,</span> 151<span class="token punctuation">,</span> 0.623<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but8</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>            <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to top<span class="token punctuation">,</span> #423e3e 50%<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0.068<span class="token punctuation">)</span> 50%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">-webkit-box-reflect</span><span class="token punctuation">:</span> below 1px <span class="token function">linear-gradient</span><span class="token punctuation">(</span><span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.219<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0.005<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">-moz-box-reflect</span><span class="token punctuation">:</span> below 1px <span class="token function">linear-gradient</span><span class="token punctuation">(</span><span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.219<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0.005<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">-o-box-reflect</span><span class="token punctuation">:</span> below 1px <span class="token function">linear-gradient</span><span class="token punctuation">(</span><span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.219<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0.005<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but8:hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to bottom<span class="token punctuation">,</span> #423e3e 50%<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0.068<span class="token punctuation">)</span> 50%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 100px 5px <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0.349<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #0fa<span class="token punctuation">;</span>            <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 4px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but8::after</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>45deg<span class="token punctuation">,</span> transparent<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>241<span class="token punctuation">,</span> 241<span class="token punctuation">,</span> 241<span class="token punctuation">,</span> 0.266<span class="token punctuation">)</span><span class="token punctuation">,</span> transparent<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but8:hover::after</span> <span class="token punctuation">&#123;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 100%        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but9</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #0a5fbf<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #440101<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> greenyellow 1px solid        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but9::after,        div.grid div.field .but9::before</span> <span class="token punctuation">&#123;</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 65%<span class="token punctuation">;</span>            <span class="token property">z-index</span><span class="token punctuation">:</span> -1<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">skewX</span><span class="token punctuation">(</span>-45deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> greenyellow        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but9::after</span> <span class="token punctuation">&#123;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> -120px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but9::before</span> <span class="token punctuation">&#123;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> -120px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but9:hover::after</span> <span class="token punctuation">&#123;</span>            <span class="token property">right</span><span class="token punctuation">:</span> -20px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but9:hover::before</span> <span class="token punctuation">&#123;</span>            <span class="token property">left</span><span class="token punctuation">:</span> -20px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but9:hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #141401<span class="token punctuation">;</span>            <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> white 1px solid        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but10</span> <span class="token punctuation">&#123;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>94<span class="token punctuation">,</span> 57<span class="token punctuation">,</span> 3<span class="token punctuation">,</span> 0.986<span class="token punctuation">)</span> 1px solid<span class="token punctuation">;</span>            <span class="token property">box-shadow</span><span class="token punctuation">:</span> #a0a0a0 -28px -63px 21px -50px inset<span class="token punctuation">,</span> #fff -49px 72px 19px -50px inset<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>94<span class="token punctuation">,</span> 78<span class="token punctuation">,</span> 78<span class="token punctuation">,</span> 0.89<span class="token punctuation">)</span> -48px 65px 7px -50px inset<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0.89<span class="token punctuation">)</span> -63px -80px 0 -50px inset<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>254<span class="token punctuation">,</span> 254<span class="token punctuation">,</span> 254<span class="token punctuation">,</span> 0.47<span class="token punctuation">)</span> 61px 75px 0 -49px inset        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but10::after</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> -1px<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> -1px<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px <span class="token function">rgba</span><span class="token punctuation">(</span>94<span class="token punctuation">,</span> 57<span class="token punctuation">,</span> 3<span class="token punctuation">,</span> 0.986<span class="token punctuation">)</span> solid<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> black        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but10::before</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0.137<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but10:hover:after</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'âœ”'</span><span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> -40px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but10:hover:before</span> <span class="token punctuation">&#123;</span>            <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>            <span class="token property">visibility</span><span class="token punctuation">:</span> visible<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>75deg<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but10:hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-10px<span class="token punctuation">,</span> 9px<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but11</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but11 span</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> inherit        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but11 span:nth-child(1)</span> <span class="token punctuation">&#123;</span>            <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>50% 0<span class="token punctuation">,</span> 85% 0<span class="token punctuation">,</span> 100% 50%<span class="token punctuation">,</span> 85% 100%<span class="token punctuation">,</span> 50% 100%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #00e71f        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but11 span:nth-child(2)</span> <span class="token punctuation">&#123;</span>            <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>15% 0<span class="token punctuation">,</span> 50% 0<span class="token punctuation">,</span> 50% 100%<span class="token punctuation">,</span> 15% 100%<span class="token punctuation">,</span> 0% 50%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #523c01        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but11 span:nth-child(1):hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">z-index</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #523c01<span class="token punctuation">;</span>            <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>15% 0<span class="token punctuation">,</span> 85% 0<span class="token punctuation">,</span> 100% 50%<span class="token punctuation">,</span> 85% 100%<span class="token punctuation">,</span> 15% 100%<span class="token punctuation">,</span> 0 50%<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but11 span:nth-child(2):hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">z-index</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #00e71f<span class="token punctuation">;</span>            <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>15% 0<span class="token punctuation">,</span> 85% 0<span class="token punctuation">,</span> 100% 50%<span class="token punctuation">,</span> 85% 100%<span class="token punctuation">,</span> 15% 100%<span class="token punctuation">,</span> 0 50%<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but12</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>128<span class="token punctuation">,</span> 128<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.103<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but12 svg,        div.grid div.field .but12 svg rect</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> 1s<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">fill</span><span class="token punctuation">:</span> transparent        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but12 svg rect</span> <span class="token punctuation">&#123;</span>            <span class="token property">stroke</span><span class="token punctuation">:</span> #f00<span class="token punctuation">;</span>            <span class="token property">stroke-width</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>            <span class="token property">stroke-dasharray</span><span class="token punctuation">:</span> 155 40<span class="token punctuation">;</span>            <span class="token property">stroke-dashoffset</span><span class="token punctuation">:</span> 195        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but12:hover svg rect</span> <span class="token punctuation">&#123;</span>            <span class="token property">stroke</span><span class="token punctuation">:</span> lightseagreen<span class="token punctuation">;</span>            <span class="token property">stroke-dasharray</span><span class="token punctuation">:</span> 40 155<span class="token punctuation">;</span>            <span class="token property">stroke-dashoffset</span><span class="token punctuation">:</span> -155        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but13</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #ffff<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but13 svg</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> 1s<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but13 svg ellipse</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">fill</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s <span class="token function">cubic-bezier</span><span class="token punctuation">(</span>0.24<span class="token punctuation">,</span> 0.32<span class="token punctuation">,</span> 0.51<span class="token punctuation">,</span> 1.43<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">stroke-width</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>            <span class="token property">stroke</span><span class="token punctuation">:</span> #00cbe6<span class="token punctuation">;</span>            <span class="token property">fill</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>64<span class="token punctuation">,</span> 224<span class="token punctuation">,</span> 208<span class="token punctuation">,</span> 0.096<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">stroke-dasharray</span><span class="token punctuation">:</span> 77 50<span class="token punctuation">;</span>            <span class="token property">stroke-dashoffset</span><span class="token punctuation">:</span> 127        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but13:hover svg ellipse</span> <span class="token punctuation">&#123;</span>            <span class="token property">stroke-dasharray</span><span class="token punctuation">:</span> 550 127<span class="token punctuation">;</span>            <span class="token property">stroke-dashoffset</span><span class="token punctuation">:</span> 127        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but13:hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #00ff0d<span class="token punctuation">;</span>            <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 5px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but14</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> yellowgreen<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #2a2b03<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but14 span</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 2px #000 solid        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but14 span:nth-child(1)</span> <span class="token punctuation">&#123;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but14 span:nth-child(2)</span> <span class="token punctuation">&#123;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> 0        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but14 span:nth-child(3)</span> <span class="token punctuation">&#123;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but14 span:nth-child(4)</span> <span class="token punctuation">&#123;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> 0        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but14:hover span</span> <span class="token punctuation">&#123;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 85%<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 96%<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 2px #000 ridge        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but14:hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> black        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but15</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but15 span:nth-child(1)</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> -100%<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> gold<span class="token punctuation">;</span>            <span class="token property">animation</span><span class="token punctuation">:</span> sp1 3s linear alternate-reverse infinite        <span class="token punctuation">&#125;</span>        <span class="token atrule"><span class="token rule">@keyframes</span> sp1</span> <span class="token punctuation">&#123;</span>            <span class="token selector">from</span> <span class="token punctuation">&#123;</span>                <span class="token property">left</span><span class="token punctuation">:</span> -100%            <span class="token punctuation">&#125;</span>            <span class="token selector">to</span> <span class="token punctuation">&#123;</span>                <span class="token property">left</span><span class="token punctuation">:</span> 100%            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but15 span:nth-child(2)</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> -100%<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> gold<span class="token punctuation">;</span>            <span class="token property">animation</span><span class="token punctuation">:</span> sp2 3s linear alternate-reverse infinite        <span class="token punctuation">&#125;</span>        <span class="token atrule"><span class="token rule">@keyframes</span> sp2</span> <span class="token punctuation">&#123;</span>            <span class="token selector">from</span> <span class="token punctuation">&#123;</span>                <span class="token property">right</span><span class="token punctuation">:</span> -100%            <span class="token punctuation">&#125;</span>            <span class="token selector">to</span> <span class="token punctuation">&#123;</span>                <span class="token property">right</span><span class="token punctuation">:</span> 100%            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but15 span:nth-child(3)</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> -40px<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> gold<span class="token punctuation">;</span>            <span class="token property">animation</span><span class="token punctuation">:</span> sp3 3s linear alternate-reverse infinite        <span class="token punctuation">&#125;</span>        <span class="token atrule"><span class="token rule">@keyframes</span> sp3</span> <span class="token punctuation">&#123;</span>            <span class="token selector">from</span> <span class="token punctuation">&#123;</span>                <span class="token property">top</span><span class="token punctuation">:</span> -100%            <span class="token punctuation">&#125;</span>            <span class="token selector">to</span> <span class="token punctuation">&#123;</span>                <span class="token property">top</span><span class="token punctuation">:</span> 100%            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but15 span:nth-child(4)</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> -40px<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> gold<span class="token punctuation">;</span>            <span class="token property">animation</span><span class="token punctuation">:</span> sp4 3s linear alternate-reverse infinite        <span class="token punctuation">&#125;</span>        <span class="token atrule"><span class="token rule">@keyframes</span> sp4</span> <span class="token punctuation">&#123;</span>            <span class="token selector">from</span> <span class="token punctuation">&#123;</span>                <span class="token property">bottom</span><span class="token punctuation">:</span> -100%            <span class="token punctuation">&#125;</span>            <span class="token selector">to</span> <span class="token punctuation">&#123;</span>                <span class="token property">bottom</span><span class="token punctuation">:</span> 100%            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but15:hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> gold<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>            <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 100px 3px gold        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but16</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> darkbLue<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> 1s<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but16:before,        div.grid div.field .but16:after</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 20%<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #000        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but16:before</span> <span class="token punctuation">&#123;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> -10%        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but16:after</span> <span class="token punctuation">&#123;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> -10%        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but16:focus</span> <span class="token punctuation">&#123;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>180deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #030338<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> 1s        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but16 span</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but16:focus span</span> <span class="token punctuation">&#123;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>180deg<span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>180deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>            <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 5px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but17</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but17 span:nth-child(1)</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">skewX</span><span class="token punctuation">(</span>-45deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.637<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> -10px<span class="token punctuation">;</span>            <span class="token property">z-index</span><span class="token punctuation">:</span> 6<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 5px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but17 span:nth-child(2)</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">skewY</span><span class="token punctuation">(</span>-45deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #3a0303<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> -5px<span class="token punctuation">;</span>            <span class="token property">z-index</span><span class="token punctuation">:</span> 6<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> -10px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but17::before</span> <span class="token punctuation">&#123;</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to left<span class="token punctuation">,</span> transparent<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span><span class="token punctuation">,</span> transparent<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but17:hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> maroon<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but18</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> mediumblue        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but18 span</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>-45deg<span class="token punctuation">,</span> transparent 33.33%<span class="token punctuation">,</span> #009688 33.33%<span class="token punctuation">,</span> #009688 66.667%<span class="token punctuation">,</span> transparent 66.66%<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>45deg<span class="token punctuation">,</span> transparent 33.33%<span class="token punctuation">,</span> #009688 33.33%<span class="token punctuation">,</span> #009688 66.667%<span class="token punctuation">,</span> transparent 66.66%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">background-size</span><span class="token punctuation">:</span> 20px 40px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but18 span:nth-child(1)</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> -10px<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but18 span:nth-child(2)</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> -10px<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>180deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but18 span:nth-child(3)</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>90deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> -25px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but18 span:nth-child(4)</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-90deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> -25px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but18:hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 2px 20px #009688 inset<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span>            <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 5px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but19</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> white        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but19 span</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">z-index</span><span class="token punctuation">:</span> -1<span class="token punctuation">;</span>            <span class="token property">background-size</span><span class="token punctuation">:</span> 10px 5px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but19 span:nth-child(1)</span> <span class="token punctuation">&#123;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> #2b2a289c 50%<span class="token punctuation">,</span> #65616891 50%<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but19 span:nth-child(2)</span> <span class="token punctuation">&#123;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>            <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> #65616891 50%<span class="token punctuation">,</span> #2b2a289c 50%<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but19::after</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> 15%<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> white        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but19:hover:after</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 60%<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>-50%<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but20</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 1px 10px 1px #522f03 inset        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but20::before</span> <span class="token punctuation">&#123;</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>            <span class="token property">z-index</span><span class="token punctuation">:</span> -1<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 80%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 80%<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>            <span class="token property">border-top</span><span class="token punctuation">:</span> 2px <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0.945<span class="token punctuation">)</span> solid<span class="token punctuation">;</span>            <span class="token property">border-bottom</span><span class="token punctuation">:</span> 2px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.9<span class="token punctuation">)</span> solid<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> transparent        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but20::after</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> -2px<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> -2px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 2px solid orangered<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 21px<span class="token punctuation">;</span>            <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> transparent        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but20:hover::before</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 95%        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but20:hover::after</span> <span class="token punctuation">&#123;</span>            <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but20:hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>177<span class="token punctuation">,</span> 37<span class="token punctuation">,</span> 13<span class="token punctuation">,</span> 0.788<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 5px        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>grid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>1.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>but1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>2.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>but2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>3.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>but3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>4.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>but4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>5.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>but5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>6.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>but6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>7.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>but7<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>8.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>but8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>9.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>but9<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>10.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>but10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>11.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>but11<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>BUTTON<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>BUTTON<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>12.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>but12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rect</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rect</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span>button <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>13.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>but13<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ellipse</span> <span class="token attr-name">cx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>77<span class="token punctuation">"</span></span> <span class="token attr-name">cy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span> <span class="token attr-name">rx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>73<span class="token punctuation">"</span></span> <span class="token attr-name">ry</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>48<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ellipse</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span>button <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>14.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>but14<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>button <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>15.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>but15<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>button <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>16.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>but16<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>17.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>but17<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>button <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>18.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>but18<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>button <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>19.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>but19<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>button <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>20.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>but20<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 打字效果和JS监听元素即将进入视口后再加载</title>
      <link href="/2023/10/15/css-da-zi-xiao-guo-he-js-jian-ting-yuan-su-ji-jiang-jin-ru-shi-kou-hou-zai-jia-zai/"/>
      <url>/2023/10/15/css-da-zi-xiao-guo-he-js-jian-ting-yuan-su-ji-jiang-jin-ru-shi-kou-hou-zai-jia-zai/</url>
      
        <content type="html"><![CDATA[<h3 id="CSS-打字效果和JS监听动画元素即将进入视口后再加载"><a href="#CSS-打字效果和JS监听动画元素即将进入视口后再加载" class="headerlink" title="CSS 打字效果和JS监听动画元素即将进入视口后再加载"></a>CSS 打字效果和JS监听动画元素即将进入视口后再加载</h3><hr><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/2.gif" alt="截图" title="代码效果示例"></p><p>  主要是JS监听动画元素即将进入视口后再加载</p><hr><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zh-Hans<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>format-detection<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>telephone=no<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">.ooo</span> <span class="token punctuation">&#123;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 14em<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 1.25em<span class="token punctuation">;</span>            <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>            <span class="token property">border-right</span><span class="token punctuation">:</span> 3px solid transparent<span class="token punctuation">;</span>            <span class="token property">font-family</span><span class="token punctuation">:</span> 楷体<span class="token punctuation">,</span> Consolas<span class="token punctuation">,</span> Monaco<span class="token punctuation">;</span>            <span class="token property">font-weight</span><span class="token punctuation">:</span> 800<span class="token punctuation">;</span>            <span class="token property">word-break</span><span class="token punctuation">:</span> break-all<span class="token punctuation">;</span>            <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.typing</span> <span class="token punctuation">&#123;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 14em<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 1.25em<span class="token punctuation">;</span>            <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>            <span class="token property">border-right</span><span class="token punctuation">:</span> 3px solid transparent<span class="token punctuation">;</span>            <span class="token property">animation</span><span class="token punctuation">:</span> typing 3s forwards <span class="token function">steps</span><span class="token punctuation">(</span>26<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">,</span> blink-caret .75s forwards step-end<span class="token punctuation">;</span>            <span class="token property">animation-direction</span><span class="token punctuation">:</span> alternate<span class="token punctuation">;</span>            <span class="token property">font-family</span><span class="token punctuation">:</span> 楷体<span class="token punctuation">,</span> Consolas<span class="token punctuation">,</span> Monaco<span class="token punctuation">;</span>            <span class="token property">font-weight</span><span class="token punctuation">:</span> 800<span class="token punctuation">;</span>            <span class="token property">word-break</span><span class="token punctuation">:</span> break-all<span class="token punctuation">;</span>            <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.ooo</span> <span class="token punctuation">&#123;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 14em<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 1.25em<span class="token punctuation">;</span>            <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>            <span class="token property">border-right</span><span class="token punctuation">:</span> 3px solid transparent<span class="token punctuation">;</span>            <span class="token property">font-family</span><span class="token punctuation">:</span> 楷体<span class="token punctuation">,</span> Consolas<span class="token punctuation">,</span> Monaco<span class="token punctuation">;</span>            <span class="token property">font-weight</span><span class="token punctuation">:</span> 800<span class="token punctuation">;</span>            <span class="token property">word-break</span><span class="token punctuation">:</span> break-all<span class="token punctuation">;</span>            <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/* 打印效果 */</span>        <span class="token atrule"><span class="token rule">@keyframes</span> typing</span> <span class="token punctuation">&#123;</span>            <span class="token selector">from</span> <span class="token punctuation">&#123;</span>                <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token selector">to</span> <span class="token punctuation">&#123;</span>                <span class="token property">width</span><span class="token punctuation">:</span> 14em<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/* 光标闪啊闪 */</span>        <span class="token atrule"><span class="token rule">@keyframes</span> blink-caret</span> <span class="token punctuation">&#123;</span>            <span class="token selector">from,            to</span> <span class="token punctuation">&#123;</span>                <span class="token property">border-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token selector">50%</span> <span class="token punctuation">&#123;</span>                <span class="token property">border-color</span><span class="token punctuation">:</span> currentColor<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.dazi</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 3px solid #000<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 5px 0<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 5px 0<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.kuyun</span> <span class="token punctuation">&#123;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 4em<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span>            <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>            <span class="token property">font-family</span><span class="token punctuation">:</span> sans-serif<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.kuyun h1</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>            <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>            <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 0.02em<span class="token punctuation">;</span>            <span class="token property">text-transform</span><span class="token punctuation">:</span> uppercase<span class="token punctuation">;</span>            <span class="token property">text-shadow</span><span class="token punctuation">:</span> 0 0 10px blue<span class="token punctuation">;</span>            <span class="token property">user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>            <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">blur</span><span class="token punctuation">(</span>0.007em<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">animation</span><span class="token punctuation">:</span> shake 2.5s .2s linear forwards<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.kuyun h1 span</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>10% 0%<span class="token punctuation">,</span> 44% 0%<span class="token punctuation">,</span> 70% 100%<span class="token punctuation">,</span> 55% 100%<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.kuyun h1::before,        .kuyun h1::after</span> <span class="token punctuation">&#123;</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">attr</span><span class="token punctuation">(</span>data-text<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.kuyun h1::before</span> <span class="token punctuation">&#123;</span>            <span class="token property">animation</span><span class="token punctuation">:</span> crack1 2.5s linear forwards<span class="token punctuation">;</span>            <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0% 0%<span class="token punctuation">,</span> 10% 0%<span class="token punctuation">,</span> 55% 100%<span class="token punctuation">,</span> 0% 100%<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.kuyun h1::after</span> <span class="token punctuation">&#123;</span>            <span class="token property">animation</span><span class="token punctuation">:</span> crack2 2.5s linear forwards<span class="token punctuation">;</span>            <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>44% 0%<span class="token punctuation">,</span> 100% 0%<span class="token punctuation">,</span> 100% 100%<span class="token punctuation">,</span> 70% 100%<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token atrule"><span class="token rule">@keyframes</span> shake</span> <span class="token punctuation">&#123;</span>            <span class="token selector">5%,            15%,            25%,            35%,            55%,            65%,            75%,            95%</span> <span class="token punctuation">&#123;</span>                <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">blur</span><span class="token punctuation">(</span>0.018em<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>0.018em<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token selector">10%,            30%,            40%,            50%,            70%,            80%,            90%</span> <span class="token punctuation">&#123;</span>                <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">blur</span><span class="token punctuation">(</span>0.01em<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-0.018em<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token selector">20%,            60%</span> <span class="token punctuation">&#123;</span>                <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">blur</span><span class="token punctuation">(</span>0.03em<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-0.018em<span class="token punctuation">,</span> 0.018em<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token selector">45%,            85%</span> <span class="token punctuation">&#123;</span>                <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">blur</span><span class="token punctuation">(</span>0.03em<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0.018em<span class="token punctuation">,</span> -0.018em<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token selector">100%</span> <span class="token punctuation">&#123;</span>                <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">blur</span><span class="token punctuation">(</span>0.007em<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-0.5deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token atrule"><span class="token rule">@keyframes</span> crack1</span> <span class="token punctuation">&#123;</span>            <span class="token selector">0%,            95%</span> <span class="token punctuation">&#123;</span>                <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token selector">100%</span> <span class="token punctuation">&#123;</span>                <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-51%<span class="token punctuation">,</span> -48%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token atrule"><span class="token rule">@keyframes</span> crack2</span> <span class="token punctuation">&#123;</span>            <span class="token selector">0%,            95%</span> <span class="token punctuation">&#123;</span>                <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token selector">100%</span> <span class="token punctuation">&#123;</span>                <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-49%<span class="token punctuation">,</span> -53%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dazi<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>typing ooo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>还是打飞机烤红薯的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 使用HTML5的新属性：数据属性：data-， --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1x1m<span class="token punctuation">"</span></span> <span class="token attr-name">data-animation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>kuyun<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>waiting-for-add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">data-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>还是打飞机烤红薯的<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>还是打飞机烤红薯的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">// 处理typing动画暂停5s</span>        <span class="token keyword">var</span> scrollTip <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.typing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scrollTip<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'typing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scrollTip<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'animationend'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            scrollTip<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">'typing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                scrollTip<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'typing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">// 开始进入视口的动画</span>        <span class="token comment">// 当元素进入视图时触发的回调函数</span>        <span class="token keyword">const</span> <span class="token function-variable function">handleIntersection</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">entries<span class="token punctuation">,</span> observer</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            entries<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">entry</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span>isIntersecting<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">const</span> animationClassName <span class="token operator">=</span> entry<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'data-animation'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    entry<span class="token punctuation">.</span>target<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>animationClassName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加对应的动画</span>                    observer<span class="token punctuation">.</span><span class="token function">unobserve</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 元素一旦进入视图并开始动画，停止观察它</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">// 配置Intersection Observer</span>        <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>         <span class="token comment">// 使用视口作为根</span>            <span class="token literal-property property">rootMargin</span><span class="token operator">:</span> <span class="token string">'0px'</span><span class="token punctuation">,</span>  <span class="token comment">// 无边距</span>            <span class="token literal-property property">threshold</span><span class="token operator">:</span> <span class="token number">0.1</span>      <span class="token comment">// 当元素至少有10%可见时触发</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span>handleIntersection<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 观察所有希望在进入视图时开始动画的元素</span>        <span class="token keyword">const</span> elements <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.waiting-for-add'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        elements<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">el</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS无限TAB栏切换，点击按钮自动居中</title>
      <link href="/2023/10/14/js-wu-xian-tab-lan-qie-huan-dian-ji-an-niu-zi-dong-ju-zhong/"/>
      <url>/2023/10/14/js-wu-xian-tab-lan-qie-huan-dian-ji-an-niu-zi-dong-ju-zhong/</url>
      
        <content type="html"><![CDATA[<h3 id="JS无限TAB栏切换，点击按钮自动居中"><a href="#JS无限TAB栏切换，点击按钮自动居中" class="headerlink" title="JS无限TAB栏切换，点击按钮自动居中"></a>JS无限TAB栏切换，点击按钮自动居中</h3><hr><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/1.gif" alt="截图" title="代码效果示例"></p><hr><p>遇到一个案例，需要TAB有点击滚动的效果，并且切换显示对应的文字，</p><p>在网上搜了一圈，没发现很合适的，要不就是需要给tab和content加唯一ID（麻烦）</p><p>所以有了这个代码。</p><hr><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">*</span> <span class="token punctuation">&#123;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">a</span> <span class="token punctuation">&#123;</span>            <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #dcc833<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">li</span> <span class="token punctuation">&#123;</span>            <span class="token property">list-style-type</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.for9xOnly</span> <span class="token punctuation">&#123;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 8px 0<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#top7412</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> #f2f2f2<span class="token punctuation">;</span>            <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>            <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">scroll-behavior</span><span class="token punctuation">:</span> smooth<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#top7412 li</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 18%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #bf9663<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> color 0.2s<span class="token punctuation">,</span> text-shadow 0.2s<span class="token punctuation">;</span>            <span class="token property">transition-timing-function</span><span class="token punctuation">:</span> ease-out<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>            <span class="token property">text-shadow</span><span class="token punctuation">:</span>                0 0 1px <span class="token function">rgba</span><span class="token punctuation">(</span>254<span class="token punctuation">,</span> 252<span class="token punctuation">,</span> 124<span class="token punctuation">,</span> 1<span class="token punctuation">)</span><span class="token punctuation">,</span>                0 0 3px <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 217<span class="token punctuation">,</span> 54<span class="token punctuation">,</span> 0.7<span class="token punctuation">)</span><span class="token punctuation">,</span>                0 0 5px <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 1<span class="token punctuation">)</span><span class="token punctuation">,</span>                0 0 14px <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 1<span class="token punctuation">)</span><span class="token punctuation">,</span>                0 0 17px <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 1<span class="token punctuation">)</span><span class="token punctuation">,</span>                0 0 20px <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 1<span class="token punctuation">)</span><span class="token punctuation">,</span>                0 5px 25px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0.9<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">font-weight</span><span class="token punctuation">:</span> 300<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.wobble</span> <span class="token punctuation">&#123;</span>            <span class="token property">animation</span><span class="token punctuation">:</span> bounceIn .75s<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#top7412 li.current9888</span> <span class="token punctuation">&#123;</span>            <span class="token property">background</span><span class="token punctuation">:</span> #c0392b<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#bottom4651</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#bottom4651 li</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 5px 15px<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">font-weight</span><span class="token punctuation">:</span> 800<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#bottom4651 li p</span> <span class="token punctuation">&#123;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>            <span class="token property">border-bottom</span><span class="token punctuation">:</span> 1px solid #dcc833<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#bottom4651 li.current9888</span> <span class="token punctuation">&#123;</span>            <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.container::-webkit-scrollbar</span> <span class="token punctuation">&#123;</span>            <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token selector">.container</span><span class="token punctuation">&#123;</span>            <span class="token property">scrollbar-width</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">-ms-overflow-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">overflow-y</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                                <span class="token selector">.result123</span> <span class="token punctuation">&#123;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 5px 0<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>            <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>0deg<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>222<span class="token punctuation">,</span> 199<span class="token punctuation">,</span> 7<span class="token punctuation">,</span> 0.33<span class="token punctuation">)</span> 0%<span class="token punctuation">,</span> <span class="token function">rgb</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">)</span> 100%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">box-shadow</span><span class="token punctuation">:</span> inset 0px 0px 0px 1px #ffffff<span class="token punctuation">,</span> 0 2px 3px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#bottom4651 li span</span> <span class="token punctuation">&#123;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #c0392b<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>for9xOnly<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top7412<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>current9888<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bottom4651<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>current9888<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>result123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>result123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>result123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>result123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>result123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>result123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">// 获取id=top7412</span>        <span class="token keyword">var</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#top7412"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取id=top7412的宽</span>        <span class="token keyword">var</span> containerW <span class="token operator">=</span> container<span class="token punctuation">.</span>offsetWidth<span class="token punctuation">;</span>        <span class="token comment">// 获取id=top7412的所有li，该变量为数组</span>        <span class="token keyword">var</span> navList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'top7412'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取id=bottom4651的所有li，该变量为数组</span>        <span class="token keyword">var</span> contents <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'bottom4651'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 函数名handleClick，参数event</span>        <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 删除 所有li的属性--class</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> navList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                navList<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 设定触发事件的元素的 class 属性的值</span>            event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"current9888 wobble"</span><span class="token punctuation">;</span>            <span class="token comment">// 获取触发事件的元素的 index 属性的值 （即bottom4651下的li的index值）</span>            <span class="token keyword">var</span> num <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 遍历删除所有contents的类名（即bottom4651下的li的类名）</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> contents<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                contents<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 设定触发事件的元素的 class 属性的值。总结：排他算法</span>            contents<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"current9888"</span><span class="token punctuation">;</span>            <span class="token comment">// 获取到当前点击元素的 offsetLeft  - 包裹盒子 offsetWidth 的一半 + 当前点击元素 offsetWidth 的一半</span>            <span class="token comment">// event.target.offsetLeft获取到当前点击元素的 offsetLeft（即该元素左上角到父元素左边的距离）</span>            <span class="token comment">// containerW / 2 包裹盒子 offsetWidth 的一半</span>            <span class="token comment">// event.target.offsetWidth / 2 当前点击元素 offsetWidth 的一半</span>            <span class="token comment">// 这三个值相互加减，会产生什么效果？假设父盒子宽为800px，</span>            <span class="token comment">// 此时的当前点击元素位于最右边，假设其offsetLeft为750px（显示了该盒子的一半，其他部分被隐藏），</span>            <span class="token comment">// 其宽为100px，其一半的宽则为50px，750-400+50=300，则向左滚动300px，</span>                        <span class="token keyword">var</span> scrollLeftNum <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>offsetLeft <span class="token operator">-</span> containerW <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>offsetWidth <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>                        <span class="token comment">// 执行container的滚动条向左滚动，如按上例，则为300px，</span>            <span class="token comment">// 本例中使用 CSS将滚动条隐藏，形成点击元素元素自动向容器中间移动的效果</span>            <span class="token comment">/***            CSS如下 使用overflow-y: auto;是为了可以滚动            .container::-webkit-scrollbar display: none;            .container&#123;                scrollbar-width: none;                -ms-overflow-style: none;                overflow-y: auto;             &#125;            */</span>            <span class="token comment">// container执行滚动</span>            container<span class="token punctuation">.</span>scrollLeft <span class="token operator">=</span> scrollLeftNum<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 给每个li加index，再给每个li绑定事件监听</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> navList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            navList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            navList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> handleClick<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 可想而知，每个top的li和对应的每个bottom的li的index值都是相同的，</span>        <span class="token comment">// 所以不必给li们增加额外的id也可以让它们对应显示，</span>        <span class="token comment">// 只需要在点击触发的li对应的bottom的li加一个display:block即可</span>                <span class="token comment">/*        20241029版本更新，主要改变是：        1. 代码更合理，不再直接删除class属性，而是移除指定类名        2. 直接给class属性添加类名，不再使用覆盖式的className='类名'方法        3. 使用 scrollIntoView 代替 scrollLeft 的平滑滚动，该方法有3个可选参数：        start（元素与容器的开头对齐）        end（元素与容器的末尾对齐）        center（元素与容器的中间对齐）        用法：scrollIntoView(&#123; behavior: 'smooth', inline: 'center' &#125;)        */</span>                 <span class="token comment">/*        var container = document.querySelector("#top7412");        var navList = container.getElementsByTagName('li');        var contents = document.getElementById('bottom4651').getElementsByTagName('li');        function handleClick(event) &#123;            for (var j = 0; j &lt; navList.length; j++) &#123;                navList[j].classList.remove('current9888', 'wobble'); // 移除指定类名            &#125;            event.target.classList.add("current9888", "wobble"); // 添加类名            var num = event.target.getAttribute("index");            for (var k = 0; k &lt; contents.length; k++) &#123;                contents[k].classList.remove('current9888');            &#125;            contents[num].classList.add("current9888");            // 使用 scrollIntoView 代替 scrollLeft 的平滑滚动            event.target.scrollIntoView(&#123; behavior: 'smooth', inline: 'start' &#125;);        &#125;        for (var i = 0; i &lt; navList.length; i++) &#123;            navList[i].setAttribute("index", i);            navList[i].addEventListener('click', handleClick);        &#125;        */</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 码海无涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
